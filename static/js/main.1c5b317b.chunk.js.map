{"version":3,"sources":["env.ts","features/settings/actions.ts","features/settings/components/AddPlayerForm.tsx","features/settings/selectors.ts","features/settings/components/AddSourceForm.tsx","features/settings/components/configuration/ChangeLanguage.tsx","features/settings/components/configuration/PlayerSettings.tsx","preferences.ts","features/settings/components/configuration/SocialMediaPlatform.tsx","features/settings/components/configuration/ItemPreferences.tsx","utils/statistics.ts","features/settings/components/configuration/SlidePreferences.tsx","features/settings/components/configuration/TagsPerferences.tsx","features/settings/components/Configuration.tsx","core/player-info.ts","features/settings/components/PlayerListItem.tsx","features/settings/components/PlayerList.tsx","features/settings/components/SourcesListItem.tsx","features/settings/components/SourcesList.tsx","features/settings/components/SettingsView.tsx","features/welcome/components/DrinctetHeader.tsx","features/game/actions.ts","features/welcome/components/StartButton.tsx","features/welcome/components/WelcomeView.tsx","features/game/utils.ts","features/game/slides/base/helper.tsx","features/game/slides/OpeningSlide.tsx","utils/fullscreen.ts","features/game/components/GameOptions.tsx","features/game/components/InsightsCurrentSlide.tsx","features/game/components/InsightsWillPowerView.tsx","core/selection/insights.ts","core/selection/utils.ts","core/selection/selection-algorithm-base.ts","core/selection/melina-algorithm.ts","core/cards-loader.ts","core/cards/player-setting.ts","core/parsing/parser-helper.ts","core/parsing/base-card-parser.ts","core/cards/text-element.ts","core/cards/text-translation.ts","core/parsing/text-content-parser.ts","core/parsing/text-card-parser.ts","core/cards/text-card.ts","core/cards/base-card.ts","impl/cards/fact-card.ts","impl/parsing/fact-card-parser.ts","impl/cards/virus-card.ts","impl/parsing/virus-card-parser.ts","impl/parsing/default-text-card-parser.ts","impl/cards/down-card.ts","impl/cards/never-ever-card.ts","impl/cards/joke-card.ts","impl/cards/question-card.ts","impl/cards/task-card.ts","impl/cards/would-you-rather-card.ts","impl/cards/drink-card.ts","impl/cards/group-game-card.ts","impl/cards/no-idea-loses-card.ts","impl/registrations.tsx","services/api/cards-loader.ts","impl/default-card-parser-factory.ts","services/index.ts","features/settings/epics.ts","core/text-fragment.ts","core/fragments/raw-text-fragment.ts","core/fragments/variable-fragment.ts","core/fragments/player-reference-fragment.ts","core/fragments/sips-fragment.ts","core/fragments/random-number-fragment.ts","core/fragments/random-text-fragment.ts","core/fragments/gender-based-selection-fragment.ts","core/fragments/social-media-platform-fragment.ts","core/parsing/text-decoder/default-text-decoder.ts","core/parsing/text-decoder/text-decoder-consts.ts","features/game/formatter/text-formatter.ts","features/game/slides/base/text-slide-presenter.ts","features/game/slides/base/card-presenter.ts","features/game/slides/colors.ts","features/game/slides/TruthOrDareSlide.tsx","features/game/slides/DownSlide.tsx","features/game/slides/FactSlide.tsx","features/game/slides/NeverEverSlide.tsx","features/game/slides/WouldYouRatherSlide.tsx","features/game/slides/DrinkSlide.tsx","features/game/slides/VirusSlide.tsx","features/game/slides/NoIdeaLosesSlide.tsx","features/game/slides/GroupGameSlide.tsx","features/game/slides/TaskSlide.tsx","features/game/component-registry.ts","features/game/epics.ts","features/game/slides-processor.ts","store/root-epic.ts","store/utils.ts","features/game/reducer.ts","features/settings/reducer.ts","store/root-reducer.ts","store/index.ts","features/game/game-engine.ts","features/game/components/InsightsCards.tsx","utils/string-extensions.ts","features/game/components/InsightsView.tsx","features/game/components/InsightsDialog.tsx","features/game/components/SettingsDialog.tsx","features/game/components/SlideWrapper.tsx","features/game/components/GameComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["process","LOCAL_STORAGE_VERSION","addPlayer","createStandardAction","map","playerInfo","payload","name","gender","id","cuid","updatePlayer","removePlayer","addSource","url","isLoading","errorMessage","undefined","cards","weight","tags","removeSource","loadSourceAsync","createAsyncAction","setSourceWeight","setPreferOppositeGenders","addPlayerArrangment","removePlayerArrangment","setSocialMediaPlatform","setSlideWeight","setTagWeight","dispatchProps","AddPlayerForm","state","handlePlayerNameChange","ev","_this","setState","currentTarget","value","handleAddClick","endsWith","props","handleFormKeyDown","e","key","preventDefault","this","translate","react","onKeyDown","style","display","Input_default","a","flexGrow","type","placeholder","onChange","Button_default","marginLeft","disabled","onClick","react_localize_redux_es","React","connect","withLocalize","getPlayers","players","getSources","sources","loadSource","request","AddSourceForm","handleUrlChange","findIndex","x","_this2","sourceExists","error","selectors","settings","withStyles","createStyles","root","width","_ref","activeLanguage","languages","setActiveLanguage","classes","index_es","container","item","xs","sm","md","lg","className","htmlFor","inputProps","code","target","lang","preferOppositeGenders","arrangements","theme","section","marginTop","arrangmentItem","borderBottom","paddingBottom","arrangementSelect","Object","defineProperty","breakpoints","down","variant","control","checked","_","c","label","filter","player","p2","arrangment","find","p1","arrangedPlayerId","alignItems","input","y","socialMediaPlatforms","slideWeights","FactSlide","DownSlide","NeverEverSlide","TruthOrDareSlide","WouldYouRatherSlide","DrinkSlide","VirusSlide","NoIdeaLosesSlide","GroupGameSlide","TaskSlide","higherArrangementPropabilityTags","platform","socialMediaPlatform","gutterBottom","ItemPreferences","_this$props","items","onChangeWeight","opacity","lab_index_es","max","min","padding","step","v","percentageFixedTotal","values","getPercentage","percentageValues","percent","total","reduce","result","Array","sum","prevBaseline","i","length","_percentageValues$i","sumRounded","Math","round","push","part","slides","slidePercentages","configuration_ItemPreferences","data","count","fontWeight","decks","weights","uniq","flatMap","color","Configuration","spacing","direction","marginBottom","configuration_ChangeLanguage","configuration_PlayerSettings","SocialMediaPlatform","configuration_SlidePreferences","TagsPerferences","PlayerInfo","classCallCheck","getIconButtonStyle","margin","height","onRemoveClick","onSwapGenderClick","onNameChanged","react_default","createElement","IconButton_default","aria-label","objectSpread","marginRight","react_fontawesome_index_es","icon","faMars","faVenus","onBlur","tabIndex","Delete_default","fontSize","List_default","ListItem_default","components_PlayerListItem","LoadingItem","LoadingFailedItem","onReloadClick","component","concat","WeightSlider","_ref2","n","backgroundColor","palette","background","paper","title","textOverflow","wordBreak","overflow","fullWidth","withTheme","_ref3","cardsCount","badgeContent","showZero","avatar","b","titleTypographyProps","action","subheader","source","components_SourcesListItem","SettingsView","handleChange","_event","handleChangeIndex","index","position","indicatorColor","textColor","tabContainer","firstChildMargins","components_AddPlayerForm","fillRemaining","components_PlayerList","PlayersTab","components_AddSourceForm","components_SourcesList","SourcesTab","overflowX","components_Configuration","SettingsTab","flexDirection","responsiveHeader","responsiveSubTitle","Typography_default","startGame","cancelGame","requestSlideAsync","applyCard","setSlideState","enqueueFollowUp","activateFollowUp","setWillPowerLocked","setWillPower","addWillPowerMemory","styles","&:hover","StartButton","history","_this$props2","arePlayersSelected","areSourcesAdded","areSourcesLoading","Fab_default","size","compose","withRouter","header","WelcomeView","possibleConstructorReturn","getPrototypeOf","call","viewportHeight","window","innerHeight","updateHeight","bind","assertThisInitialized","addEventListener","removeEventListener","justify","components_DrinctetHeader","components_SettingsView","components_StartButton","Component","toTranslator","localize","languageCode","getContentStyles","textAlign","up","spaceHeaderStyles","visibility","getHeaderStyles","defaultMarkdownOptions","overrides","p","_ref4","children","objectWithoutProperties","assign","marginBlockStart","marginBlockEnd","h3","_ref5","h4","_ref6","progressColor","nextSlide","actions","game","slideState","justifyContent","cursor","-webkit-tap-highlight-color","rootProgress","top","left","bottom","zIndex","content","continuationDate","remaining","abs","Date","now","Container","Keyframes","Spring","asyncToGenerator","regenerator_default","mark","_callee","next","wrap","_context","prev","from","config","duration","stop","_x","apply","arguments","tapToContinueProps","useSpring","delay","native","renderprops","div","esm","options","web","OpeningSlide","slideType","requiredCards","createClass","date","setSeconds","getSeconds","Error","insights","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","webkit","moz","ms","document","vendor","keys","Fullscreen","element","handler","Boolean","toLowerCase","button","GameOptions","anchorEl","isFullscreen","handleMenuOpenClick","event","handleClose","handleNavigate","path","toggleFullscreen","documentElement","onfullscreenchange","_this3","selectedCard","_this$state","isOpen","MoreVert_default","open","onClose","PaperProps","Settings_default","DonutLarge_default","Feedback_default","FullscreenExit_default","Fullscreen_default","selectedSlide","activeFollowUp","scrollableTable","tableCellNoBreak","whiteSpace","renderPlayerInsights","playerInsights","predefined","join","renderPredefinedPlayers","rounds","statistics","number","playerId","paddingLeft","conditionalBold","chosen","isBold","InsightsCurrentSlide","cardRef","card","wp","willPower","deckUrl","slide","slideInsights","renderSlideWeights","toggleContainer","currentWillPower","isLocked","isWillPowerLocked","exclusive","row","Insights","playerSelection","defaultRandomGenerator","random","selectRandomWeighted","getWeight","totalWeight","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","randomWeight","_i","MelinaAlgorithm","_SelectionAlgorithmBa","_getPrototypeOf2","_len","args","_key","deckExhaustionLimit","inherits","cardType","weightedDecks","weightCards","status","deckWeights","willPowerWeights","willPowerCounter","allCards","_loop","deck","toConsumableArray","boostWillPower","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_loop2","willPowerWeightsArray","propName","Number","totalCards","playerSettings","definedPlayers","forArrangement","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop4","arrangement","_iterator3","resultCounter","_loop3","sourceList","includes","malesCount","femalesCount","selectionRoundInsights","some","dominant","changed","_this4","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop5","_iterator4","_loop6","_i4","selected","_this5","perfectCards","unplayedCards","cardsHistory","percentage","unplayedWeight","console","log","factor","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","perfectCard","availableSlides","_this6","uniqueCardTypes","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_loop7","_iterator8","requestedCards","cardTypeRatings","_i5","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","cardDeck","weightedSlides","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_loop8","slideSettings","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iterator7","slidesHistory","lastSlideType","lastSlide","floor","getRandom","_this7","filtered","weightedTag","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop9","cardsPlayed","exhaustionFactor","pow","weightedCards","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","rateWillPower","getHistoryFactor","getTagsFactor","_iterator11","memory","addedMemory","getHours","slidesCount","tagWeights","historyPosition","cardWillPower","filteredDecks","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","verifyPlayerSpecification","weightedZero","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","tag","checkIfWeightedZero","condition","specification","specificationMales","actualMales","specificationFemales","actualFemales","SelectionAlgorithmBase","selectRandomFromWeightedList","CardsLoader","requestFile","parserFactory","domParser","DOMParser","_loadFromUrl","loadFile","abrupt","_loadFile","_callee2","xml","xmlDoc","cardElements","xmlElement","parser","_context2","sent","parseFromString","getElementsByTagName","parentElement","nodeName","parseDeckReference","createParser","deserialize","indexOf","_x2","_x3","_x4","getAttribute","deckWhitelist","referenceRequests","cardRefs","idAttr","cardId","PlayerSetting","playerIndex","ParserHelper","s","startsWith","substring","isNaN","genderRequirementMap","split","m","male","f","female","o","opposite","same","BaseCardParser","createCard","getDefaultAttributes","parseAttributes","subElements","tagName","parseElement","parsePlayers","parsePlayer","parsePlayerTag","requiredGender","genderAttr","genderReq","parseGenderRequirement","TextElement","translations","TextTranslation","TextContentParser","isConditionalElement","parseTextElement","parseTranslation","textElement","texts","textXmlNode","textContent","TextCardParser","_BaseCardParser","textContentParser","rootXml","followUpAttr","followUpProbability","followUpPropability","followUpDelay","seconds","parseTimeSpanStringToSeconds","addElement","subElement","followUp","TextCard","_BaseCard","language","BaseCard","FactCard","_TextCard","isTrueFact","FactCardParser","_TextCardParser","get","prototype","attr","toBool","VirusCard","VirusCardParser","DefaultTextCardParser","factory","DownCard","NeverEverCard","JokeCard","QuestionCard","TaskCard","WouldYouRatherCard","DrinkCard","GroupGameCard","NoIdeaLosesCard","parsers","WyrCard","loader","DefaultCardParserFactory","response","axios","loadCards","_loadCards","loadFromUrl","services","api","cardsLoader","loadSourceEpic","action$","_state$","pipe","isActionOf","mergeMap","success","catchError","message","of","failure","TextFragment","RawTextFragment","_TextFragment","text","VariableFragment","PlayerReferenceFragment","_VariableFragment","SipsFragment","minSips","sipsIndex","RandomNumberFragment","numbers","NumberRange","StaticNumber","RandomTextFragment","GenderBasedSelectionFragment","femaleText","maleText","referencedPlayerIndex","SocialMediaPlatformFragment","DefaultTextDecoder","lastTokenIndex","token","readToken","parseVariableFragment","parseRandomSelectionFragment","parseGenderSelectionFragment","playerTag","playerRef","parameterBegin","genderString","parsePlayerIndex","sipsTag","sipsFragment","test","parseNumberArray","splitQuoted","currentNumber","numberStart","isRangeToken","num","delimiter","tokenStart","withinQuotes","replace","nextChar","fragment","splitterIndex","reference","endChar","char","TextFormatter","fragments","requiredPlayers","groupBy","hasOwnProperty","rootSetting","sips","selection","lastPlayerFragment","boldPlayerNames","boldSips","sip","referencedPlayer","playerKeys","getCount","TextSlidePresenter","_CardPresenter","translator","gameEngine","selectText","_this$formatText","formatText","formatted","initializeState","due","createFollowUp","param","_this$selectFollowUpT","selectFollowUpText","initializeFollowUpState","followUps","CardPresenter","selectCard","initializeCard","initializeFollowUpCard","decode","getRequiredPlayers","requiredSips","getRequiredSips","indexedPlayers","sipInfo","getSips","store","getState","format","viableContents","toLocaleLowerCase","colors","drink","fact","groupGame","neverEver","noIdeaLoses","truthOrDare","virus","wouldYouRather","task","clickableRoot","spaceHeader","questionPaper","unit","questionButtonsContainer","isDeciding","selectedPlayer","select","decision","springProps","transform","QuestionComponent","markdownContent","DareComponent","TruthComponent","selectedText","getRandomSelectionAlgorithm","TruthOrDareSlide_Component","wobbly","to","_TextSlidePresenter","DownSlide_Component","isFollowUp","isTrue","availableFactSlideModes","selectedMode","FactSlide_Component","cardText","instruction","_selection","mode","NeverEverSlide_Component","_card","_players","WouldYouRatherSlide_Component","DrinkSlide_Component","VirusSlide_Component","NoIdeaLosesSlide_Component","GroupGameSlide_Component","slideComponents","TaskSlide_Component","nextSlideEpic","dueFollowUps","sortBy","slideInitalizer","slideActions","initializeFollowUp","components","getSlideRegistrations","_selection$recomputeW","recomputeWillPower","willPowerMemory","willPowerActions","selectNextSlide","initialize","redirectOnGameStartedEpic","tap","ignoreElements","combineEpics","settingsEpics","gameEpics","composeEnhancers","combineReducers","getType","isStarted","startTime","currentSlideStatus","flatten","weightsList","GetSlideWeightedArray","rootReducer","gameReducer","settingsReducer","localizeReducer","epicMiddleware","createEpicMiddleware","dependencies","middlewares","enhancer","applyMiddleware","createStore","run","rootEpic","selectPlayers","seedrandom","active","extractGameStatus","chart","InsightsCards","selectedCardType","setSelectedCardType","cardTypes","getAllCardDeckStatistics","decksStatistics","willPowerStatistics","info","displayEmpty","renderValue","es6","dataKey","tickFormatter","formatter","labelFormatter","fill","maxBarSize","entry","InsightsView","components_InsightsWillPowerView","components_InsightsCurrentSlide","components_InsightsCards","Transition","withMobileDialog","breakpoint","appBar","flex","overflowY","fullScreen","Dialog_default","TransitionComponent","maxWidth","InsightsView_InsightsView","dialogPaper","fullscreenPaper","paperScrollPaper","paperFullScreen","render","GameComponent","openingSlide","dispatch","components_SlideWrapper","right","components_GameOptions","Switch","Route","SettingsDialog","InsightsDialog","current","BrowserRouter","basename","exact","components_GameComponent","Redirect","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","src_step","src_iterator","src_iteratorNormalCompletion","src","userLang","userLanguage","translation","drinctetTranslations","renderToStaticMarkup","defaultLanguage","es","src_App","getElementById","URL","href","origin","fetch","contentType","headers","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6nLACAA,uDAAYC,sBAAwB,ieCOvBC,EAAYC,+BAAqB,cAAcC,IACxD,SAACC,GAAD,MAA4E,CACxEC,QAAS,CACLC,KAAMF,EAAWE,KACjBC,OAAQH,EAAWG,OACnBC,GAAIC,UAIHC,EAAeR,+BAAqB,gBAArBA,GACfS,EAAeT,+BAAqB,gBAArBA,GAEfU,EAAYV,+BAAqB,cAAcC,IACxD,SAACU,GAAD,MAA2C,CACvCR,QAAS,CACLQ,MACAC,WAAW,EACXC,kBAAcC,EACdC,WAAOD,EACPE,OAAQ,GACRC,KAAM,OAILC,EAAelB,+BAAqB,gBAArBA,GAEfmB,EAAkBC,4BAC3B,sBACA,sBACA,sBAH2BA,GAMlBC,EAAkBrB,+BAAqB,oBAArBA,GAElBsB,EAA2BtB,+BAAqB,8BAArBA,GAI3BuB,EAAsBvB,+BAAqB,yBAArBA,GACtBwB,EAAyBxB,+BAAqB,4BAArBA,GAEzByB,EAAyBzB,+BAAqB,4BAArBA,GAEzB0B,EAAiB1B,+BAAqB,mBAArBA,GAEjB2B,EAAe3B,+BAAqB,iBAArBA,sCC7CtB4B,EAAgB,CAClB7B,aASE8B,6MACOC,MAAQ,CAAE1B,KAAM,MAEzB2B,uBAAyB,SAACC,GACtBC,EAAKC,SAAS,CAAE9B,KAAM4B,EAAGG,cAAcC,WAG3CC,eAAiB,WACb,IAAIhC,EAAiB,OACjB4B,EAAKH,MAAM1B,KAAKkC,SAAS,OAEzBjC,EAAS,UAEb4B,EAAKM,MAAMxC,UAAU,CAAEK,KAAM6B,EAAKH,MAAM1B,KAAMC,WAC9C4B,EAAKC,SAAS,CAAE9B,KAAM,QAG1BoC,kBAAoB,SAACC,GACH,UAAVA,EAAEC,MACFD,EAAEE,iBAEEV,EAAKH,MAAM1B,MAAM6B,EAAKI,2FAIzB,IACGjC,EAASwC,KAAKd,MAAd1B,KACAyC,EAAcD,KAAKL,MAAnBM,UAER,OACIC,EAAA,sBAAMC,UAAWH,KAAKJ,mBAClBM,EAAA,qBAAKE,MAAO,CAAEC,QAAS,SACnBH,EAAA,cAACI,EAAAC,EAAD,CACIH,MAAO,CAAEI,SAAU,GACnBC,KAAK,OACLjB,MAAOhC,EACPkD,YAAaT,EAAU,+BACvBU,SAAUX,KAAKb,yBAEnBe,EAAA,cAACU,EAAAL,EAAD,CACIH,MAAO,CAAES,WAAY,GACrBC,UAAWtD,EACXuD,QAASf,KAAKP,gBAEdS,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,kBA5CVuD,aAoDbC,cACX,KACAlC,EAFWkC,CAGbC,YAAalC,ICvEFmC,EAAa,SAAClC,GAAD,OAA0BA,EAAMmC,SAE7CC,EAAa,SAACpC,GAAD,OAA0BA,EAAMqC,SCSpDvC,EAAgB,CAClBlB,YACA0D,WAAYjD,EAAgBkD,SAS1BC,6MACOxC,MAAQ,CAAEnB,IAAK,MAExB4D,gBAAkB,SAACvC,GACfC,EAAKC,SAAS,CAAEvB,IAAKqB,EAAGG,cAAcC,WAG1CC,eAAiB,YACRJ,EAAKH,MAAMnB,KAAOsB,EAAKM,MAAM4B,QAAQK,UAAU,SAAAC,GAAC,OAAIA,EAAE9D,MAAQsB,EAAKH,MAAMnB,OAAQ,IAItFsB,EAAKM,MAAM7B,UAAUuB,EAAKH,MAAMnB,KAChCsB,EAAKM,MAAM6B,WAAWnC,EAAKH,MAAMnB,KACjCsB,EAAKC,SAAS,CAAEvB,IAAK,SAGzB6B,kBAAoB,SAACC,GACH,UAAVA,EAAEC,MACFD,EAAEE,iBAEEV,EAAKH,MAAMnB,KACXsB,EAAKI,2FAKR,IAAAqC,EAAA9B,KACGjC,EAAQiC,KAAKd,MAAbnB,IACAkC,EAAcD,KAAKL,MAAnBM,UACF8B,EAAe/B,KAAKL,MAAM4B,QAAQK,UAAU,SAAAC,GAAC,OAAIA,EAAE9D,MAAQ+D,EAAK5C,MAAMnB,OAAQ,EAEpF,OACImC,EAAA,sBAAMC,UAAWH,KAAKJ,mBAClBM,EAAA,qBAAKE,MAAO,CAAEC,QAAS,SACnBH,EAAA,cAACI,EAAAC,EAAD,CACIH,MAAO,CAAEI,SAAU,GACnBC,KAAK,OACLjB,MAAOzB,EACP2C,YAAaT,EAAU,8BACvB+B,MAAOD,EACPpB,SAAUX,KAAK2B,kBAEnBzB,EAAA,cAACU,EAAAL,EAAD,CACIH,MAAO,CAAES,WAAY,GACrBC,UAAW/C,GAAOgE,EAClBhB,QAASf,KAAKP,gBAEdS,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,kBAhDVuD,aAwDbC,cAvES,SAAChC,GAAD,MAAuB,CAC3CqC,QAASU,EAAqB/C,EAAMgD,YAwEpClD,EAFWkC,CAGbC,YAAaO,ICnCAS,2BAnCA,kBACXC,uBAAa,CACTC,KAAM,CACFC,MAAO,WAgCJH,CAAmBhB,YA1BlC,SAAAoB,GAA0F,IAAhEC,EAAgED,EAAhEC,eAAgBC,EAAgDF,EAAhDE,UAAWC,EAAqCH,EAArCG,kBAAmBC,EAAkBJ,EAAlBI,QACpE,OACIzC,EAAA,cAAC0C,EAAA,EAAD,CAAMC,WAAS,GACX3C,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAClChD,EAAA,cAAC0C,EAAA,EAAD,CAAaO,UAAWR,EAAQN,MAC5BnC,EAAA,cAAC0C,EAAA,EAAD,CAAYQ,QAAQ,kBAChBlD,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,qCAElBwC,EAAA,cAAC0C,EAAA,EAAD,CACIS,WAAY,CACR3F,GAAI,kBAER0C,MAAO,CAAEkC,MAAO,QAChB9C,MAAOgD,EAAec,KACtB3C,SAAU,SAAAvB,GAAE,OAAIsD,EAAkBtD,EAAGmE,OAAO/D,SAE3CiD,EAAUpF,IAAI,SAAAmG,GAAI,OACftD,EAAA,cAAC0C,EAAA,EAAD,CAAU9C,IAAK0D,EAAKF,KAAM9D,MAAOgE,EAAKF,MAAOE,EAAKhG,uBCRxEwB,EAAgB,CAClBN,2BACAC,sBACAC,0BA0HWsC,mBAnIS,SAAChC,GAAD,MAAuB,CAC3CuE,sBAAuBvE,EAAMgD,SAASuB,sBACtCpC,QAASnC,EAAMgD,SAASb,QACxBqC,aAAcxE,EAAMgD,SAASwB,eAkI7B1E,EAFWkC,CAGbiB,qBA1Ha,SAACwB,GAAD,OACXvB,uBAAa,CACTwB,QAAS,CACLC,UAAW,IAEfC,eAAgB,CACZC,aAAc,oBACdC,cAAe,GAEnBC,kBAAkBC,OAAAC,EAAA,EAAAD,CAAA,CACd5B,MAAO,KACNqB,EAAMS,YAAYC,KAAK,MAAQ,CAC5B/B,MAAO,YA8GrBH,CAAmBhB,YApGrB,SAAAoB,GAQU,IAPNkB,EAOMlB,EAPNkB,sBACA/E,EAMM6D,EANN7D,yBACAiE,EAKMJ,EALNI,QACAtB,EAIMkB,EAJNlB,QACAqC,EAGMnB,EAHNmB,aACA/E,EAEM4D,EAFN5D,oBACAC,EACM2D,EADN3D,uBAEA,OACIsB,EAAA,yBACIA,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,MAChBpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,2CAElBwC,EAAA,cAAC0C,EAAA,EAAD,CACI2B,QACIrE,EAAA,cAAC0C,EAAA,EAAD,CACI4B,QAASf,EACT9C,SAAU,SAAC8D,EAAGC,GAAJ,OAAUhG,EAAyBgG,MAGrDC,MAAOzE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,gEAEzBwC,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiB,QAASU,QAAQ,aAC5CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,yCAElBwC,EAAA,cAAC0C,EAAA,EAAD,KACI1C,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,qDAElBwC,EAAA,cAAC0C,EAAA,EAAD,CAAMC,WAAS,GACVxB,EACIuD,OAAO,SAAAC,GAAM,OAAyD,IAArDnB,EAAa9B,UAAU,SAAAC,GAAC,OAAIA,EAAEiD,KAAOD,EAAOnH,OAC7DL,IAAI,SAAAwH,GACD,IAAME,EAAarB,EAAasB,KAAK,SAAAnD,GAAC,OAAIA,EAAEoD,KAAOJ,EAAOnH,KACpDwH,OAAkChH,IAAf6G,EAA2B,GAAKA,EAAWD,GACpE,OACI5E,EAAA,cAAC0C,EAAA,EAAD,CACIE,MAAI,EACJD,WAAS,EACTsC,WAAW,WACXhC,UAAWR,EAAQmB,eACnBhE,IAAK+E,EAAOnH,IAEZwC,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGG,GAAI,GAClBhD,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,aAAaO,EAAOrH,OAE5C0C,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGG,GAAI,GAClBhD,EAAA,cAAC0C,EAAA,EAAD,CAAaO,UAAWR,EAAQsB,mBAC5B/D,EAAA,cAAC0C,EAAA,EAAD,CAAYQ,QAAQ,oBAChBlD,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,kDAElBwC,EAAA,cAAC0C,EAAA,EAAD,CACIpD,MAAO0F,EACPvE,SAAU,SAAAvB,GACN,IAAMI,EAAQJ,EAAGmE,OAAO/D,MACV,KAAVA,EACAZ,EAAuBiG,EAAOnH,IAE9BiB,EAAoB,CAChBsG,GAAIJ,EAAOnH,GACXoH,GAAItF,KAIhB4F,MAAOlF,EAAA,cAAC0C,EAAA,EAAD,CAAOlF,GAAG,sBAEjBwC,EAAA,cAAC0C,EAAA,EAAD,CAAUpD,MAAM,IACZU,EAAA,wBACIA,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,+CAGrB2D,EACIuD,OACG,SAAA/C,GAAC,OACGA,EAAEnE,KAAOmH,EAAOnH,KAKT,IAJPgG,EAAa9B,UACT,SAAAyD,GAAC,OACIA,EAAEJ,KAAOpD,EAAEnE,IAAM2H,EAAEP,KAAOjD,EAAEnE,KAC7B2H,EAAEJ,KAAOJ,EAAOnH,OAG/BL,IAAI,SAAAwE,GAAC,OACF3B,EAAA,cAAC0C,EAAA,EAAD,CAAU9C,IAAK+B,EAAEnE,GAAI8B,MAAOqC,EAAEnE,IACzBmE,EAAErE,oBC9I9C8H,GAAuB,CAAC,WAAY,YAAa,YAejDC,GAA0C,CACnDC,UAAW,GACXC,UAAW,GACXC,eAAgB,GAChBC,iBAAkB,IAClBC,oBAAqB,GACrBC,WAAY,GACZC,WAAY,IACZC,iBAAkB,GAClBC,eAAgB,GAChBC,UAAW,IAKFC,GAAmC,CAAC,UClB3ClH,GAAgB,CAClBH,0BA+BWqC,mBApCS,SAAChC,GAAD,MAAuB,CAC3CiH,SAAUjH,EAAMgD,SAASkE,sBAqCzBpH,GAFWkC,CAGbC,YA7BF,SAAAoB,GAAqE,IAA3C4D,EAA2C5D,EAA3C4D,SAAUtH,EAAiC0D,EAAjC1D,uBAChC,OACIqB,EAAA,yBACIA,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,MAChBpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,gDAElBwC,EAAA,cAAC0C,EAAA,EAAD,CAAYyD,cAAY,GACpBnG,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,4DAElBwC,EAAA,cAAC0C,EAAA,EAAD,KACI1C,EAAA,cAAC0C,EAAA,EAAD,CAAQxC,MAAO,CAACkC,MAAO,IAAKuB,UAAW,IACnCrE,MAAO2G,EACPxF,SAAU,SAAAvB,GAAE,OAAIP,EAAuBO,EAAGmE,OAAO/D,QACjD4F,MAAOlF,EAAA,cAAC0C,EAAA,EAAD,OAEN0C,GAAqBjI,IAAI,SAAAwE,GAAC,OACvB3B,EAAA,cAAC0C,EAAA,EAAD,CAAU9C,IAAK+B,EAAGrC,MAAOqC,GACpBA,oBCSdyE,oLAjCF,IAAAC,EAC6BvG,KAAKL,MAA/B6G,EADHD,EACGC,MAAOC,EADVF,EACUE,eAEf,OACIvG,EAAA,cAAC0C,EAAA,EAAD,CAAMC,WAAS,GACV2D,EAAMnJ,IAAI,SAAAwE,GAAC,OACR3B,EAAA,cAAC0C,EAAA,EAAD,CAAM9C,IAAK+B,EAAErC,MAAOsD,MAAI,EAACD,WAAS,EAACsC,WAAW,UAC1CjF,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGG,GAAI,GAClBhD,EAAA,cAAC0C,EAAA,EAAD,CACIxC,MAAO,CACHsG,QAAsB,IAAb7E,EAAEzD,OAAe,GAAM,IAGnCyD,EAAErC,QAGXU,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGG,GAAI,GAClBhD,EAAA,cAACyG,GAAA,EAAD,CACIC,IAAK,EACLC,IAAK,EACLzG,MAAO,CAAE0G,QAAS,UAClBC,KAAM,IACNvH,MAAOqC,EAAEzD,OACTuC,SAAU,SAAC8D,EAAGuC,GAAJ,OAAUP,EAAe,CAAEjH,MAAOqC,EAAErC,MAAOpB,OAAQ4I,mBAxB/D/F,aCVvB,SAASgG,GACZC,EACAC,EACA5D,GAUA,IAPA,IAAM6D,EAAmBF,EAAO7J,IAAI,SAAAmC,GAAK,MAAK,CAAEA,QAAO6H,QAASF,EAAc3H,MACxE8H,EAAQF,EAAiBG,OAAO,SAAC1F,EAAGwD,GAAJ,OAAUxD,EAAIwD,EAAEgC,SAAS,GAEzDG,EAAS,IAAIC,MACfC,EAAM,EACNC,EAAe,EAEVC,EAAI,EAAGA,EAAIR,EAAiBS,OAAQD,IAAK,KAAAE,EACrBV,EAAiBQ,GAAnCpI,EADuCsI,EACvCtI,MAEPkI,GAH8CI,EAChCT,QAEGC,EAAQ/D,EACzB,IAAMwE,EAAaC,KAAKC,MAAMP,GAE9BF,EAAOU,KAAK,CAAE1I,QAAO2I,KAAMJ,EAAaJ,IACxCA,EAAeI,EAGnB,OAAOP,ECbX,IAIMxI,GAAgB,CAClBF,kBA+BWoC,mBApCS,SAAChC,GAAD,MAAuB,CAC3CkJ,OAAQlJ,EAAMgD,SAASkG,SAqCvBpJ,GAFWkC,CAGbC,YA7BF,SAAAoB,GAA6D,IAAjC6F,EAAiC7F,EAAjC6F,OAAQtJ,EAAyByD,EAAzBzD,eAE1BuJ,EAAmBpB,GAAqBmB,EAAQ,SAAAvG,GAAC,OAAIA,EAAEzD,QAD1C,IAGnB,OACI8B,EAAA,yBACIA,EAAA,cAAC0C,EAAA,EAAD,CAAYyD,cAAY,EAAC/B,QAAQ,MAC7BpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,mCAElBwC,EAAA,cAACoI,GAAD,CAAiB9B,MAAO4B,EAAQ3B,eAAgB,SAAA5E,GAAC,OAAI/C,EAAe+C,MACpE3B,EAAA,cAAC0C,EAAA,EAAD,KACI1C,EAAA,cAACc,EAAA,EAAD,CACItD,GAAG,0CACH6K,KAAM,CAAEC,MAZL,MAcNH,EAAiBhL,IAAI,SAACwE,EAAG+F,GAAJ,OAClB1H,EAAA,cAACA,EAAA,SAAD,CAAgBJ,IAAK+B,EAAErC,MAAMA,OACzBU,EAAA,mBAAGE,MAAO,CAACqI,WAAY,WAAY5G,EAAErC,MAAMA,OAD/C,KAC4DqC,EAAEsG,KACzDP,EAAIS,EAAiBR,OAAS,EAAI,KAAO,iCCxB5D7I,GAAgB,CAClBD,gBA0BWmC,mBAhCS,SAAChC,GAAD,MAAuB,CAC3Cb,KAAMa,EAAMgD,SAAS7D,KACrBqK,MAAOxJ,EAAMgD,SAASX,UAgCtBvC,GAFWkC,CAGbC,YAxBF,SAAAoB,GAA8D,IAApClE,EAAoCkE,EAApClE,KAAMqK,EAA8BnG,EAA9BmG,MAAO3J,EAAuBwD,EAAvBxD,aAE7B4J,EADUlE,KAAEmE,KAAKF,EAAMG,QAAQ,SAAAhH,GAAC,OAAIA,EAAExD,QACpBhB,IAAI,SAAAwE,GAAC,OAAIxD,EAAK2G,KAAK,SAAAK,GAAC,OAAIA,EAAE7F,QAAUqC,KAAM,CAAErC,MAAOqC,EAAGzD,OAAQ,MAEtF,OACI8B,EAAA,yBACIA,EAAA,cAAC0C,EAAA,EAAD,CAAYyD,cAAY,EAAC/B,QAAQ,MAC7BpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,iCAElBwC,EAAA,cAACoI,GAAD,CAAiB9B,MAAOmC,EAASlC,eAAgB,SAAA5E,GAAC,OAAI9C,EAAa8C,MAC/C,IAAnB8G,EAAQd,OACL3H,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,QAAQwE,MAAM,iBAC9B5I,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,2CAGlBQ,MCDD6K,oLAxBP,OACI7I,EAAA,cAAC0C,EAAA,EAAD,CAAMxC,MAAO,CAAE0G,QAAS,KACpB5G,EAAA,cAAC0C,EAAA,EAAD,CAAMC,WAAS,EAACmG,QAAS,GAAIC,UAAU,UACnC/I,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,EAAC1C,MAAO,CAAE8I,aAAc,KAC9BhJ,EAAA,cAACiJ,EAAD,OAEJjJ,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,GACN5C,EAAA,cAACkJ,GAAD,OAEJlJ,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,GACN5C,EAAA,cAACmJ,GAAD,OAEJnJ,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,GACN5C,EAAA,cAACoJ,GAAD,OAEJpJ,EAAA,cAAC0C,EAAA,EAAD,CAAME,MAAI,GACN5C,EAAA,cAACqJ,GAAD,gBAlBItI,qDCRfuI,GACT,SAAAA,EAAmB9L,EAAmBF,EAAqBC,GAAiByG,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAwJ,GAAAxJ,KAAAtC,KAAAsC,KAAAxC,OAAAwC,KAAAvC,gFCiB1EiM,GAAqB,iBAA4B,CACnDC,QAAS,GACTrH,MAAO,GACPsH,OAAQ,KAqCGzI,mBAlCf,SAAAoB,GAA6G,IAAnF/E,EAAmF+E,EAAnF/E,KAAMC,EAA6E8E,EAA7E9E,OAAQoM,EAAqEtH,EAArEsH,cAAeC,EAAsDvH,EAAtDuH,kBAAmBC,EAAmCxH,EAAnCwH,cAAe9J,EAAoBsC,EAApBtC,UACrF,OACI+J,EAAAzJ,EAAA0J,cAAA,OAAK7J,MAAO,CAAEC,QAAS,SACnB2J,EAAAzJ,EAAA0J,cAACC,GAAA3J,EAAD,CACI4J,aAAW,cACXpJ,QAAS+I,EACT1J,MAAK8D,OAAAkG,GAAA,EAAAlG,CAAA,GAAOwF,KAAP,CAA6BW,YAAa,KAE/CL,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACK,GAAA,EAAD,CAAiBC,KAAiB,SAAX9M,EAAoB+M,KAASC,SAG5DT,EAAAzJ,EAAA0J,cAAC3J,EAAAC,EAAD,CACIyB,OAAQxE,EACRkN,OAAQ,WACClN,GAAMqM,KAEfzJ,MAAO,CAAEI,SAAU,EAAGK,WAAY,EAAGwJ,YAAa,GAClD3J,YAAaT,EAAU,0BACvBT,MAAOhC,EACPmD,SAAU,SAAAvB,GAAE,OAAI2K,EAAc3K,EAAGG,cAAcC,UAEnDwK,EAAAzJ,EAAA0J,cAACC,GAAA3J,EAAD,CACI4J,aAAW,SACXpJ,QAAS8I,EACTzJ,MAAK8D,OAAAkG,GAAA,EAAAlG,CAAA,GAAOwF,KAAP,CAA6B7I,WAAY,IAC9C8J,UAAW,GAEXX,EAAAzJ,EAAA0J,cAACW,GAAArK,EAAD,CAAYsK,SAAS,gBCrC/B7L,GAAgB,CACpBnB,eACAD,gBAmCasD,mBAzCS,SAAChC,GAAD,MAAuB,CAC7CmC,QAASY,EAAqB/C,EAAMgD,YA0CpClD,GAFakC,CA9Bf,SAAAqB,GAAoE,IAA9ClB,EAA8CkB,EAA9ClB,QAASxD,EAAqC0E,EAArC1E,aAAcD,EAAuB2E,EAAvB3E,aAC3C,OACEsC,EAAA,cAAC4K,GAAAvK,EAAD,KACGc,EAAQhE,IAAI,SAAAwH,GAAM,OACjB3E,EAAA,cAAC6K,GAAAxK,EAAD,CAAUT,IAAK+E,EAAOnH,IACpBwC,EAAA,cAAC0C,EAAA,EAAD,KACE1C,EAAA,cAAC8K,GAAD,CACExN,KAAMqH,EAAOrH,KACbC,OAAQoH,EAAOpH,OACfoM,cAAe,kBAAMhM,EAAagH,EAAOnH,KACzCqM,cAAe,SAAAvM,GAAI,OACjBI,EAAa,IAAI4L,GAAW3E,EAAOnH,GAAIF,EAAMqH,EAAOpH,UAEtDqM,kBAAmB,kBACjBlM,EACE,IAAI4L,GACF3E,EAAOnH,GACPmH,EAAOrH,KACW,WAAlBqH,EAAOpH,OAAsB,OAAS,qBCY1D,SAASwN,KACL,OAAOjB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,MAGX,SAASsI,GAAT3I,GAAoF,IAAvDtE,EAAuDsE,EAAvDtE,aAAckN,EAAyC5I,EAAzC4I,cACvC,OACInB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAYkG,MAAM,YAAYxE,QAAQ,QAAQ8G,UAAU,SAAxD,GAAAC,OACQpN,GACJ+L,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACIxC,MAAO,CAAES,WAAY,IACrBuK,UAAU,SACV9G,QAAQ,QACRvD,QAASoK,GAJb,WAYZ,SAASG,GAATC,GAA+D,IAAvCnN,EAAuCmN,EAAvCnN,OAAQqI,EAA+B8E,EAA/B9E,eAC5B,OACIuD,EAAAzJ,EAAA0J,cAACtD,GAAA,EAAD,CACIC,IAAK,EACLC,IAAK,EACLE,KAAM,IACN3G,MAAO,CAAEuJ,OAAQ,GAAI7C,QAAS,WAC9BtH,MAAOpB,EACPuC,SAAU,SAAC8D,EAAG+G,GAAJ,OAAU/E,EAAe+E,MA0DhCrJ,4BA9GA,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KAAM,CACFoJ,gBAAiB9H,EAAM+H,QAAQC,WAAWC,MAC1ChC,OAAQ,QAEZiC,MAAO,CACHC,aAAc,UACdC,UAAW,YACXC,SAAU,UAEdC,UAAW,CACP3J,MAAO,WAkGe,CAAE4J,WAAW,GAAhC/J,CArDf,SAAAgK,GAUU,IATNpO,EASMoO,EATNpO,IACA4E,EAQMwJ,EARNxJ,QACA3E,EAOMmO,EAPNnO,UACAC,EAMMkO,EANNlO,aACAmO,EAKMD,EALNC,WACAhO,EAIM+N,EAJN/N,OACAyL,EAGMsC,EAHNtC,cACAsB,EAEMgB,EAFNhB,cACA1E,EACM0F,EADN1F,eAEA,OACIuD,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACIyJ,aAAcD,EACdtD,MAAM,UACNlC,IAAK,KACLzD,UAAWR,EAAQsJ,UACnBK,UAAU,GAEVtC,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAMO,UAAWR,EAAQsJ,WACrBjC,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACI2J,OACIvC,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACI4B,QAAoB,IAAXpG,EACTgC,MAAO,CAAEuJ,QAAS,IAClBhJ,SAAU,SAAC8D,EAAG+H,GAAJ,OAAe/F,EAAJ+F,EAAmB,GAAsB,MAGtEC,qBAAsB,CAAEtJ,UAAWR,EAAQkJ,OAC3CA,MAAO9N,EACP2O,OACI1C,EAAAzJ,EAAA0J,cAACC,GAAA3J,EAAD,CAAYQ,QAAS8I,GACjBG,EAAAzJ,EAAA0J,cAACW,GAAArK,EAAD,OAGRoM,UACI3O,EACIgM,EAAAzJ,EAAA0J,cAACgB,GAAD,MACAhN,EACA+L,EAAAzJ,EAAA0J,cAACiB,GAAD,CACIjN,aAAcA,EACdkN,cAAeA,IAGnBnB,EAAAzJ,EAAA0J,cAACqB,GAAD,CAAclN,OAAQA,EAAQqI,eAAgBA,UCnHpEzH,GAAgB,CAClBwC,WAAYjD,EAAgBkD,QAC5BnD,eACAG,mBA8BWyC,mBArCS,SAAChC,GAAD,MAAuB,CAC3CqC,QAASU,EAAqB/C,EAAMgD,YAsCpClD,GAFWkC,CAzBf,SAAAqB,GAAoF,IAA7DhB,EAA6DgB,EAA7DhB,QAASjD,EAAoDiE,EAApDjE,aAAckD,EAAsCe,EAAtCf,WAAY/C,EAA0B8D,EAA1B9D,gBACtD,OACIyB,EAAA,cAAC4K,GAAAvK,EAAD,KACKgB,EAAQlE,IAAI,SAAAuP,GAAM,OACf1M,EAAA,cAAC6K,GAAAxK,EAAD,CAAUT,IAAK8M,EAAO7O,KAClBmC,EAAA,cAAC0C,EAAA,EAAD,KACI1C,EAAA,cAAC2M,GAAD,CACI9O,IAAK6O,EAAO7O,IACZC,UAAW4O,EAAO5O,UAClBC,aAAc2O,EAAO3O,aACrBmO,WAAaQ,EAAOzO,OAASyO,EAAOzO,MAAM0J,QAAW,EACrDzJ,OAAQwO,EAAOxO,OACfqI,eAAgB,SAAArI,GAAM,OAClBK,EAAgB,CAAEe,MAAOoN,EAAO7O,IAAKK,YAEzCyL,cAAe,kBAAMvL,EAAasO,EAAO7O,MACzCoN,cAAe,kBAAM3J,EAAWoL,EAAO7O,mBC8C7D+O,8MACO5N,MAAQ,CACbM,MAAO,KAGXuN,aAAe,SAACC,EAAaxN,GACzBH,EAAKC,SAAS,CAAEE,aAGpByN,kBAAoB,SAACC,GACjB7N,EAAKC,SAAS,CAAEE,MAAO0N,6EAGlB,IAAA3G,EAC0BvG,KAAKL,MAA5BgD,EADH4D,EACG5D,QAAS1C,EADZsG,EACYtG,UACTT,EAAUQ,KAAKd,MAAfM,MAER,OACIU,EAAA,qBAAKiD,UAAWR,EAAQN,MACpBnC,EAAA,cAAC0C,EAAA,EAAD,CAAQuK,SAAS,SAASrE,MAAM,WAC5B5I,EAAA,cAAC0C,EAAA,EAAD,CACIpD,MAAOA,EACPmB,SAAUX,KAAK+M,aACfK,eAAe,UACfC,UAAU,UACV/I,QAAQ,aAERpE,EAAA,cAAC0C,EAAA,EAAD,CAAK+B,MAAO1E,EAAU,sBACtBC,EAAA,cAAC0C,EAAA,EAAD,CAAK+B,MAAO1E,EAAU,sBACtBC,EAAA,cAAC0C,EAAA,EAAD,CAAK+B,MAAO1E,EAAU,8BAGnB,IAAVT,GA1EjB,SAAA+C,GAAwC,IAAlBI,EAAkBJ,EAAlBI,QAClB,OACIzC,EAAA,cAAC0C,EAAA,EAAD,CAAMO,UAAWR,EAAQ2K,cACrBpN,EAAA,qBAAKiD,UAAWR,EAAQ4K,mBACpBrN,EAAA,cAACsN,EAAD,OAEJtN,EAAA,qBACIiD,UAAWR,EAAQ8K,cACnBrN,MAAO,CACH4L,SAAU,OACVrC,OAAQ,qBAGZzJ,EAAA,cAACwN,GAAD,QA6DgBC,CAAW3N,KAAKL,OACrB,IAAVH,GAxDjB,SAAA+L,GAAwC,IAAlB5I,EAAkB4I,EAAlB5I,QAClB,OACIzC,EAAA,cAAC0C,EAAA,EAAD,CAAMO,UAAWR,EAAQ2K,cACrBpN,EAAA,qBAAKiD,UAAWR,EAAQ4K,mBACpBrN,EAAA,cAAC0N,EAAD,OAEJ1N,EAAA,qBAAKiD,UAAWR,EAAQ8K,cAAerN,MAAO,CAAE4L,SAAU,SACtD9L,EAAA,cAAC2N,GAAD,QAiDgBC,CAAW9N,KAAKL,OACrB,IAAVH,GA5CjB,SAAA2M,GAAyC,IAAlBxJ,EAAkBwJ,EAAlBxJ,QACnB,OACIzC,EAAA,cAAC0C,EAAA,EAAD,CAAMO,UAAWR,EAAQ2K,cACrBpN,EAAA,qBAAKiD,UAAWR,EAAQ8K,cAAerN,MAAO,CAAE2N,UAAW,WACvD7N,EAAA,cAAC8N,GAAD,QAwCgBC,CAAYjO,KAAKL,eAlCtBsB,aAwCZE,eAAagB,qBAlHb,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KAAM,CACFoJ,gBAAiB9H,EAAM+H,QAAQC,WAAWC,MAC1ChC,OAAQ,OACRvJ,QAAS,OACT6N,cAAe,UAEnBZ,aAAc,CACVjN,QAAS,OACT6N,cAAe,SACftE,OAAQ,QAEZ2D,kBAAmB,CACf1J,UAAW,GACXhD,WAAY,GACZwJ,YAAa,IAEjBoD,cAAe,CACXjN,SAAU,EACVoJ,OAAQ,MA8F2B,CAAEsC,WAAW,GAAhC/J,CAAwC2K,yBC3FrD3K,4BA7BA,SAACwB,GAAD,OACXvB,uBAAa,CACT+L,iBAAiBjK,OAAAC,EAAA,EAAAD,CAAA,CACb2G,SAAU,QACTlH,EAAMS,YAAYC,KAAK,MAAQ,CAC5BwG,SAAU,SAGlBuD,mBAAmBlK,OAAAC,EAAA,EAAAD,CAAA,CACf2G,SAAU,UACTlH,EAAMS,YAAYC,KAAK,MAAQ,CAC5BwG,SAAU,YAkBX1I,CAbf,SAAAI,GAAgE,IAAtCI,EAAsCJ,EAAtCI,QACtB,OACIzC,EAAA,yBACIA,EAAA,cAACmO,GAAA9N,EAAD,CAAY+D,QAAQ,KAAKnB,UAAWR,EAAQwL,kBAA5C,YAGAjO,EAAA,cAACmO,GAAA9N,EAAD,CAAY+D,QAAQ,KAAKnB,UAAWR,EAAQyL,oBAA5C,yECnBCE,GAAYlR,+BAAqB,aAArBA,GAEZmR,GAAanR,+BAAqB,cAArBA,GAEboR,GAAoBhQ,4BAC7B,qBACA,qBACA,qBAH6BA,GAMpBiQ,GAAYrR,+BAAqB,aAArBA,GAEZsR,GAAgBtR,+BAAqB,kBAArBA,GAEhBuR,GAAkBvR,+BAAqB,gBAArBA,GAClBwR,GAAmBxR,+BAAqB,qBAArBA,GAEnByR,GAAqBzR,+BAAqB,wBAArBA,GACrB0R,GAAe1R,+BAAqB,iBAArBA,GACf2R,GAAqB3R,+BAAqB,wBAArBA,GChB5B4R,GAAS5M,uBAAa,CACxBC,KAAM,CACFyG,MAAO,QACPxG,MAAO,OACPmJ,gBAAiB,UACjBwD,UAAW,CACPxD,gBAAiB,cASvBzM,GAAgB,CAClBsP,cASEY,8MACFZ,UAAY,WAAM,IAAA/H,EACiBlH,EAAKM,OAEpC2O,EAHc/H,EACN+H,WADM/H,EACK4I,kFAKd,IAAAC,EACyBpP,KAAKL,MAA3BgD,EADHyM,EACGzM,QAAST,EADZkN,EACYlN,SAEXmN,EAAqBnN,EAASb,QAAQwG,OAAS,EAC/CyH,EAAkBpN,EAASX,QAAQqD,OAAO,SAAA/C,GAAC,YAAgB3D,IAAZ2D,EAAE1D,QAAqB0J,OAAS,EAC/E0H,EAAoBrN,EAASX,QAAQqD,OAAO,SAAA/C,GAAC,OAAIA,EAAE7D,YAAW6J,OAAS,EAE7E,OACI3H,EAAA,cAACsP,GAAAjP,EAAD,CACI+D,QAAQ,WACRmL,KAAK,QACL3O,UAAWuO,IAAuBC,GAAmBC,EACrD5M,QAAS,CAAEN,KAAMM,EAAQN,MACzBtB,QAASf,KAAKsO,WAEdpO,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,8BAtBJuD,aA4BXyO,gBACXvN,qBAAW6M,IACX9N,YA5CoB,SAAChC,GAAD,MAAuB,CAC3CgD,SAAUhD,EAAMgD,WA6CZlD,IAEJmC,IACAwO,KAPWD,CAQbR,ICjEIF,GAAS5M,uBAAa,CACxBC,KAAM,CACFuH,OAAQ,QACRvJ,QAAS,OACT6N,cAAe,UAEnB0B,OAAQ,CACJjG,OAAQ,GACRT,aAAc,MAUhB2G,eAKF,SAAAA,EAAYlQ,GAAc,IAAAN,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA6P,IACtBxQ,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA2L,GAAAG,KAAAhQ,KAAML,KALDT,MAAQ,CACb+Q,eAAgBC,OAAOC,aAMvB9Q,EAAK+Q,aAAe/Q,EAAK+Q,aAAaC,KAAlBnM,OAAAoM,EAAA,EAAApM,QAAAoM,EAAA,EAAApM,CAAA7E,KAHEA,mFAOtB6Q,OAAOK,iBAAiB,SAAUvQ,KAAKoQ,6DAIvCF,OAAOM,oBAAoB,SAAUxQ,KAAKoQ,qDAI1CpQ,KAAKV,SAAS,CAAE2Q,eAAgBC,OAAOC,+CAGlC,IACGxN,EAAY3C,KAAKL,MAAjBgD,QACAsN,EAAmBjQ,KAAKd,MAAxB+Q,eACR,OACIjG,EAAAzJ,EAAA0J,cAAA,OAAK9G,UAAWR,EAAQN,MACnB4N,EAAiB,IACdjG,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAMC,WAAS,EAAC4N,QAAQ,UACpBzG,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAGE,UAAWR,EAAQiN,QACzC5F,EAAAzJ,EAAA0J,cAACyG,GAAD,QAGR,KACJ1G,EAAAzJ,EAAA0J,cAAA,OAAK7J,MAAO,CAAEI,SAAU,EAAGoJ,OAAQ,IAC/BI,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAMC,WAAS,EAAC4N,QAAQ,SAASrQ,MAAO,CAAEwJ,OAAQ,SAC9CI,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIE,GAAI,GACnB+G,EAAAzJ,EAAA0J,cAAC0G,GAAD,SAIZ3G,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAMC,WAAS,EAAC4N,QAAQ,UACpBzG,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAGJ,WAAS,EAAC4N,QAAQ,UACxCzG,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAG9C,MAAO,CAAE0G,QAAS,wBACxCkD,EAAAzJ,EAAA0J,cAAC2G,GAAD,iBA7CFC,aAsDX1O,wBAAW6M,GAAX7M,CAAmB0N,oDC3E3B,SAASiB,GAAaC,GACzB,MAAO,CACHC,aAAcD,EAASvO,eAAec,KACtCrD,UAAW,SAAA4B,GAAC,OAAIkP,EAAS9Q,UAAU4B,mBCapC,SAASoP,GAAiBtN,GAA6B,IAAApB,EAC1D,OAAAA,EAAA,CACI2O,UAAW,UADfhN,OAAAC,EAAA,EAAAD,CAAA3B,EAEKoB,EAAMS,YAAYC,KAAK,MAAQ,CAC5B/B,MAAO,OACPzB,WAAY,GACZwJ,YAAa,GACbQ,SAAU,KANlB3G,OAAAC,EAAA,EAAAD,CAAA3B,EAQKoB,EAAMS,YAAY+M,GAAG,MAAQ,CAC1B7O,MAAO,QATf4B,OAAAC,EAAA,EAAAD,CAAA3B,EAWKoB,EAAMS,YAAY+M,GAAG,MAAQ,CAC1B7O,MAAO,QAZfC,EAiBG,SAAS6O,GAAkBzN,GAC9B,OAAOO,OAAAC,EAAA,EAAAD,CAAA,CACHmN,WAAY,UACX1N,EAAMS,YAAYC,KAAK,MAAQ,CAC5BwG,SAAU,SAKf,SAASyG,GAAgB3N,GAC5B,OAAOO,OAAAC,EAAA,EAAAD,CAAA,CACH4E,MAAO,SACNnF,EAAMS,YAAYC,KAAK,MAAQ,CAC5BwG,SAAU,SA6Bf,IAAM0G,GAAyC,CAClDC,UAAW,CACPC,EAAG,CACCrG,UA3BZ,SAAAsG,GAAiD,IAA3BC,EAA2BD,EAA3BC,SAAahS,EAAcuE,OAAA0N,GAAA,EAAA1N,CAAAwN,EAAA,cAC7C,OACIxR,EAAA,cAAC0C,EAAA,EAADsB,OAAA2N,OAAA,GAAgBlS,EAAhB,CAAuBS,MAAO,CAAE0R,iBAAkB,EAAGC,eAAgB,EAAGjJ,MAAO,QAAS+B,SAAU,YAC7F8G,IAyBDhS,MAAO,IAEXqS,GAAI,CACA5G,UAvBZ,SAAA6G,GAA2C,IAA3BN,EAA2BM,EAA3BN,SAAahS,EAAcuE,OAAA0N,GAAA,EAAA1N,CAAA+N,EAAA,cACvC,OACI/R,EAAA,mBAAAgE,OAAA2N,OAAA,GAAQlS,EAAR,CAAeS,MAAO,CAAE0R,iBAAkB,EAAGC,eAAgB,KACxDJ,IAqBDhS,MAAO,IAEXuS,GAAI,CACA9G,UAnBZ,SAAA+G,GAA2C,IAA3BR,EAA2BQ,EAA3BR,SAAahS,EAAcuE,OAAA0N,GAAA,EAAA1N,CAAAiO,EAAA,cACvC,OACIjS,EAAA,mBAAAgE,OAAA2N,OAAA,GAAQlS,EAAR,CAAeS,MAAO,CAAE0R,iBAAkB,EAAGC,eAAgB,KACxDJ,IAiBDhS,MAAO,yBC7EbmJ,GAAQ,UACRsJ,GAAgB,UAMhBpT,GAAgB,CAClBqT,UAAWC,GAA0B7Q,SA+FzC,IAAMoP,GAAYnB,aACdxO,YArGoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAsGdxT,IAEJmD,qBAjGW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KAAK6B,OAAAkG,GAAA,EAAAlG,CAAA,GDrBF,CACHuH,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0BCY3B,CAEAlH,gBAAiB3C,GACjBqE,SAAU,aAEdyF,aAAc,CACVhJ,OAAQ,OACR6B,gBAAiB2G,GACjBjF,SAAU,WACV0F,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,OAAQ,GAEZC,QAAQ/O,OAAAkG,GAAA,EAAAlG,CAAA,GACD+M,GAAiBtN,GADjB,CAEHqP,OAAQ,KAEZpD,OAAQ,CACJ9G,MAAO,QACPI,aAAc,QA4EtB/H,IANcuO,CA7DlB,SAA+B/P,GAAc,IACjCgD,EAAyChD,EAAzCgD,QAAS0P,EAAgC1S,EAAhC0S,UAAWnT,EAAqBS,EAArBT,MAAOe,EAAcN,EAAdM,UACnC,GAAc,OAAVf,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAHM,IAMjC6Q,EAAqBhU,EAArBgU,iBACFC,EAAYnL,KAAKoL,KAAKF,EAAmBG,KAAKC,OAE9CC,EAAYC,aAAUC,OAAV,eAAAlR,EAAA2B,OAAAwP,GAAA,EAAAxP,CAAAyP,GAAApT,EAAAqT,KAAiB,SAAAC,EAAOC,GAAP,OAAAH,GAAApT,EAAAwT,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAF,MAAA,cAAAE,EAAAF,KAAA,EACzBA,EAAK,CACPI,KAAM,CAAE5R,MAAO,MACfA,MAAO,OACP6R,OAAQ,CACJC,SAAUjB,KALa,cAAAa,EAAAF,KAAA,EAQzBA,EAAK,CACPI,KAAM,CAAEzI,gBAAiB2G,IACzB3G,gBAAiB3C,GACjBqL,OAAQ,CAAEC,SAAU,OAXO,cAAAJ,EAAAF,KAAA,EAazBA,EAAK,CACPI,KAAM,CAAEzI,gBAAiB3C,IACzB2C,gBAAiB2G,GACjB+B,OAAQ,CAAEC,SAAU,OAhBO,wBAAAJ,EAAAK,SAAAR,MAAjB,gBAAAS,GAAA,OAAA/R,EAAAgS,MAAAvU,KAAAwU,YAAA,IAoBZC,EAAqBC,aAAU,CACjChO,QAAS,EACTwN,KAAM,CAAExN,QAAS,GACjBiO,MAAOxB,IAGX,OACIjT,EAAA,qBACIiD,UAAWR,EAAQN,KACnBtB,QAAS,kBAAM,IAAIsS,KAASH,GAAoBb,EAAUvB,GAAanR,MAEvEO,EAAA,cAACqT,EAAD,CAAWqB,QAAM,GACZ,SAACjV,GAAD,OAAgBO,EAAA,cAAC2U,GAAA,SAASC,IAAV,CAAc3R,UAAWR,EAAQiQ,aAAcxS,MAAOT,MAE3EO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACpB/S,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,KAAKnB,UAAWR,EAAQiN,OAAQvJ,cAAY,GAC5DnG,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,kBAElBwC,EAAA,cAAC6U,GAAA,EAAD,CACIpD,SAAU1R,EAAU,oBACpB+U,QAASzD,KAEbrR,EAAA,cAAC+U,GAAA,EAAYH,IAAb,CAAiB1U,MAAOqU,GACpBvU,EAAA,cAAC0C,EAAA,EAAD,CAAYxC,MAAO,CAAE0I,MAAO,QAASjF,UAAW,IAAMS,QAAQ,MAC1DpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,6BAqBzBwX,GAAb,oBAAAA,IAAAhR,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAkV,GAAAlV,KACImV,UAAY,eADhBnV,KAEIoV,cAAgB,GAFpBpV,KAGIyL,gBAAkB3C,GAHtB,OAAA5E,OAAAmR,EAAA,EAAAnR,CAAAgR,EAAA,EAAApV,IAAA,aAAAN,MAAA,WAMQ,IAAM8V,EAAO,IAAIjC,KAGjB,OAFAiC,EAAKC,WAAWD,EAAKE,aAAe,GAE7B,CACHxV,KAAK0O,cAAc,CACfwE,iBAAkBoC,OAXlC,CAAAxV,IAAA,qBAAAN,MAAA,WAiBQ,MAAM,IAAIiW,MAAM,6BAjBxB,CAAA3V,IAAA,gBAAAN,MAAA,SAoBkBN,GACV,OAAOoT,GAAsB,CAAEpT,QAAOwW,SAAU,SArBxD,CAAA5V,IAAA,SAAAN,MAAA,WAyBQ,OAAOU,EAAA,cAAC2Q,GAAD,UAzBfqE,EAAA,iIChIMpV,GAAW,CACb6V,kBAAmB,EACnBC,kBAAmB,EACnBC,kBAAmB,EACnBC,eAAgB,EAChBC,iBAAkB,EAClBC,gBAAiB,GAGfC,GAAS,CACX,0BACA,0BACA,0BACA,uBACA,yBACA,yBAGEC,GAAM,CACR,uBACA,uBACA,uBACA,sBACA,sBACA,sBAGEC,GAAK,CACP,sBACA,sBACA,sBACA,mBACA,qBACA,qBAIEC,GACgB,qBAAXlG,QAAqD,qBAApBA,OAAOkG,SAA2BlG,OAAOkG,SAAW,GAE1FC,GACD,sBAAuBD,IAAYlS,OAAOoS,KAAKxW,KAC/CmW,GAAO,KAAMG,IAAYH,IACzBC,GAAI,KAAME,IAAYF,IACtBC,GAAG,KAAMC,IAAYD,IACtB,GAEiBI,kHACQC,GACrB,OAAOA,EAAQH,GAAOvW,GAAI+V,wEAEGW,GAC7B,OAAOA,EAAQH,GAAOvW,GAAI+V,6DAKNpV,EAAWgW,EAAczB,GAC7C,OAAOoB,GAAS7F,iBAAiB8F,GAAOvW,GAAIW,IAAQgW,EAASzB,+CAEtCvU,EAAWgW,EAAczB,GAChD,OAAOoB,GAAS5F,oBAAoB6F,GAAOvW,GAAIW,IAAQgW,EAASzB,0CANhE,OAAOoB,GAASC,GAAOvW,GAAIgW,iBAAiBzF,KAAK+F,8CASjD,OAAOM,QAAQN,GAASC,GAAOvW,GAAI6V,+DAGnC,OAAOS,GAASC,GAAOvW,GAAI8V,+DAG3B,OAAOQ,GAAS,KAAA/K,OAAKgL,GAAOvW,GAAIiW,mBAAoBY,6BAE1BF,GAC1BL,GAAS,KAAA/K,OAAKgL,GAAOvW,GAAIiW,mBAAoBY,eAAiBF,4CAG9D,OAAOL,GAAS,KAAA/K,OAAKgL,GAAOvW,GAAIkW,kBAAmBW,6BAE1BF,GACzBL,GAAS,KAAA/K,OAAKgL,GAAOvW,GAAIkW,kBAAmBW,eAAiBF,WC1D/DzH,GAAS5M,uBAAa,CACxBwU,OAAQ,CACJ9N,MAAO,WAuBT+N,8MACO3X,MAAe,CACpB4X,SAAU,KACVC,cAAc,KAalBC,oBAAsB,SAACC,GACnB5X,EAAKC,SAAS,CAAEwX,SAAUG,EAAM1X,mBAGpC2X,YAAc,WACV7X,EAAKC,SAAS,CAAEwX,SAAU,UAG9BK,eAAiB,SAACC,GACd/X,EAAK6X,cACL7X,EAAKM,MAAMwP,QAAQjH,KAAnB,SAAAmD,OAAiC+L,OAGrCC,iBAAmB,WACUhY,EAAKH,MAAtB6X,aAEJR,GAAWT,iBAEXS,GAAWV,kBAAkB3F,OAAOkG,SAASkB,iBAGjDjY,EAAK6X,kGA/BW,IAAApV,EAAA9B,KAChBuW,GAAWgB,mBAAqB,WAC5BzV,EAAKxC,SAAS,SAAAJ,GAAK,OAAAgF,OAAAkG,GAAA,EAAAlG,CAAA,GAAUhF,EAAV,CAAiB6X,aAAcR,GAAWX,sEAKjEW,GAAWgB,mBAAqB,sCA2B3B,IAAAC,EAAAxX,KAAAuG,EAC6BvG,KAAKL,MAA/BgD,EADH4D,EACG5D,QAAS8U,EADZlR,EACYkR,aADZC,EAE8B1X,KAAKd,MAAhC4X,EAFHY,EAEGZ,SAAUC,EAFbW,EAEaX,aACZY,EAAsB,OAAbb,EAEf,OACI9M,EAAAzJ,EAAA0J,cAAA,WACID,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACIkG,MAAM,YACN3F,UAAWR,EAAQiU,OACnB7V,QAASf,KAAKgX,qBAEdhN,EAAAzJ,EAAA0J,cAAC2N,GAAArX,EAAD,OAEJyJ,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACIkU,SAAUA,EACVe,KAAMF,EACNG,QAAS9X,KAAKkX,YACda,WAAY,CACR3X,MAAO,CACHkC,MAAO,OAIf0H,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAU7B,QAAS,kBAAMyW,EAAKL,eAAe,cACzCnN,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAAC+N,GAAAzX,EAAD,OAEJyJ,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,2BAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAU7B,QAAS,kBAAMyW,EAAKL,eAAe,cACzCnN,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACgO,GAAA1X,EAAD,OAEJyJ,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,2BAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAU7B,QAASf,KAAKkX,YAAapW,SAA2B,OAAjB2W,GAC3CzN,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACiO,GAAA3X,EAAD,OAEJyJ,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,6BAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAU7B,QAASf,KAAKqX,kBACpBrN,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACKmU,EAAe/M,EAAAzJ,EAAA0J,cAACkO,GAAA5X,EAAD,MAAyByJ,EAAAzJ,EAAA0J,cAACmO,GAAA7X,EAAD,OAE7CyJ,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAIqZ,EAAe,8BAAgC,sCAtF5DlG,aA8FXnB,gBACXvN,qBAAW6M,IACX7N,IACAD,YA9GoB,SAAChC,GAAD,MAAuB,CAC3CmZ,cAAenZ,EAAMqT,KAAK8F,cAC1BC,eAAgBpZ,EAAMqT,KAAK+F,eAC3Bb,aAAcvY,EAAMqT,KAAKkF,eAGP,IA4GlB9H,KAPWD,CAQbmH,8CCtII7H,GAAS5M,uBAAa,CACxBwB,QAAS,CACLC,UAAW,IAEf0U,gBAAiB,CACbvM,SAAU,OACV1J,MAAO,QAEXkW,iBAAkB,CACdC,WAAY,YAsBpB,SAASC,GAAqB/Y,GAAc,IAChCgZ,EAAqChZ,EAArCgZ,eAAgBtX,EAAqB1B,EAArB0B,QAASsB,EAAYhD,EAAZgD,QACjC,OACIqH,EAAAzJ,EAAA0J,cAAA,OAAK9G,UAAWR,EAAQ4V,iBACnBI,EAAgBC,WAAW/Q,OAAS,EApBjD,SAAAtF,GAAqE,IAAlCoW,EAAkCpW,EAAlCoW,eAAgBtX,EAAkBkB,EAAlBlB,QAC/C,OACI2I,EAAAzJ,EAAA0J,cAAA,WACID,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,+BACb,KACAib,EAAgBC,WACZvb,IAAI,SAAAwE,GAAC,OAAIR,EAAQ2D,KAAK,SAAAK,GAAC,OAAIA,EAAE3H,KAAOmE,MACpC+C,OAAO,SAAA/C,GAAC,OAAS,MAALA,IACZxE,IAAI,SAAAwE,GAAC,OAAIA,EAAGrE,OACZqb,KAAK,QAU2BC,CAAwBnZ,GAAS,KACzEgZ,EAAgBI,OAAO1b,IAAI,SAACwE,EAAG+F,GAC5B,IAAMoR,EAAa/R,GAAqBpF,EAAG,SAAAA,GAAC,OAAIA,EAAEzD,QAAQ,KAC1D,OACI4L,EAAAzJ,EAAA0J,cAAA,SAAOnK,IAAK8H,GACRoC,EAAAzJ,EAAA0J,cAAA,aACID,EAAAzJ,EAAA0J,cAAA,UACID,EAAAzJ,EAAA0J,cAAA,MAAI9G,UAAWR,EAAQ6V,kBACnBxO,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,kBAAkB6K,KAAM,CAAE0Q,OAAQrR,EAAI,KADxD,MAIHoR,EAAW3b,IAAI,SAAAgI,GACZ,IACImR,EADE3R,EAASxD,EAAQ2D,KAAK,SAAAyM,GAAC,OAAIA,EAAE/T,KAAO2H,EAAE7F,MAAM0Z,WAmBlD,OAhBI1C,OADWtY,IAAX2G,EAEImF,EAAAzJ,EAAA0J,cAAA,YACID,EAAAzJ,EAAA0J,cAAA,SACID,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,4BACb,IAHT,IAIM2H,EAAE8C,KAAO,GAJf,MASA6B,EAAAzJ,EAAA0J,cAAA,YACKpF,EAAOrH,KADZ,KACoB6H,EAAE8C,KAAO,GAD7B,MAOJ6B,EAAAzJ,EAAA0J,cAAA,MAAInK,IAAKuF,EAAE7F,MAAM0Z,SAAU9Y,MAAO,CAAE+Y,YAAa,KAC7CnP,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACKwW,GAAgB5C,EAASnR,EAAE7F,MAAM6Z,kBAclF,SAASD,GAAgB5C,EAAsB8C,GAC3C,OAAIA,EACOtP,EAAAzJ,EAAA0J,cAAA,SAAIuM,GAGRA,MAmCL+C,oLACO,IAAAhT,EACwCvG,KAAKL,MAA1CgZ,EADHpS,EACGoS,eAAgBhW,EADnB4D,EACmB5D,QAAS6W,EAD5BjT,EAC4BiT,QACjC,OACIxP,EAAAzJ,EAAA0J,cAAA,WACID,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,MAChB0F,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,2BAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,yBACb,KACY,OAAZ8b,EACGxP,EAAAzJ,EAAA0J,cAAA,SACID,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,qBAGlBsM,EAAAzJ,EAAA0J,cAAA,YACID,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CACItD,GAAG,oBACH6K,KAAM,CACF/K,KAAMgc,EAAQC,KAAKhZ,KACnB/C,GAAI8b,EAAQC,KAAK/b,GACjBgc,QAA+Bxb,IAA3Bsb,EAAQC,KAAKE,UAA0B3P,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,uBAAyB8b,EAAQC,KAAKE,UAC/F5b,IAAKyb,EAAQI,aAvDjD,SAAArO,GAA6D,IAA/BsO,EAA+BtO,EAA/BsO,MAEpBb,EAAa/R,GAFsCsE,EAAxBuO,cACHnR,QACkB,SAAA9G,GAAC,OAAIA,EAAEzD,QAAQ,KAE/D,OACI4L,EAAAzJ,EAAA0J,cAAA,aACID,EAAAzJ,EAAA0J,cAAA,aACK+O,EAAW3b,IAAI,SAAAwE,GAAC,OACbmI,EAAAzJ,EAAA0J,cAAA,MAAInK,IAAK+B,EAAErC,MAAMA,OACbwK,EAAAzJ,EAAA0J,cAAA,UACID,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACKwW,GACGpP,EAAAzJ,EAAA0J,cAAA,YAAOpI,EAAErC,MAAMA,OACfqC,EAAErC,MAAMA,QAAUqa,KAI9B7P,EAAAzJ,EAAA0J,cAAA,MAAI7J,MAAO,CAAE+Y,YAAa,KACtBnP,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACKwW,GACGpP,EAAAzJ,EAAA0J,cAAA,YAAOpI,EAAEsG,KAAO,GAAhB,KACAtG,EAAErC,MAAMA,QAAUqa,UAwCrCE,CAAmB/Z,KAAKL,OAEzBqK,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,KAAKnB,UAAWR,EAAQiB,SACxCoG,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,8BAEE,OAAnBib,EACG3O,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAAA,SACID,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,yBAItBgb,GAAqB1Y,KAAKL,eAzCXkR,aAgDpBnB,gBACXxO,YArLoB,SAAChC,GAAD,MAAuB,CAC3C2a,MAAO3a,EAAMqT,KAAK8F,cAClByB,cAAe5a,EAAMqT,KAAKuH,cAC1BnB,eAAgBzZ,EAAMqT,KAAKoG,eAC3BtX,QAASnC,EAAMgD,SAASb,QACxBmY,QAASta,EAAMqT,KAAKkF,gBAiLpBtW,IACAgB,qBAAW6M,IAHAU,CAIb6J,IClLIva,GAAgB,CAClB8P,gBACAD,uBAGEG,GACF5M,uBAAa,CACT4X,gBAAiB,CACb3Z,QAAS,OACT8E,WAAY,SACZsN,eAAgB,gBA0Cb/C,oBACXxO,YA1DoB,SAAChC,GAAD,MAAuB,CAC3C+a,iBAAkB/a,EAAMqT,KAAK0H,iBAC7BC,SAAUhb,EAAMqT,KAAK4H,oBA0DjBnb,IAEJmC,IACAgB,qBAAW6M,IANAU,CApCf,SAAAnN,GAMU,IALN0X,EAKM1X,EALN0X,iBACAC,EAIM3X,EAJN2X,SACApL,EAGMvM,EAHNuM,aACAD,EAEMtM,EAFNsM,mBACAlM,EACMJ,EADNI,QAEA,OACIzC,EAAA,yBACIA,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,KAAK+B,cAAY,GACjCnG,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,wBAElBwC,EAAA,qBAAKiD,UAAWR,EAAQqX,iBACpB9Z,EAAA,cAACyG,GAAA,EAAD,CACIyT,WAAS,EACT5a,MAAOya,EACPtZ,SAAU,SAAC8D,EAAGY,GAAJ,OAAUyJ,EAAazJ,IACjCsM,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGtU,IAAI,SAAAwE,GAAC,OAC3B3B,EAAA,cAACyG,GAAA,EAAD,CAAc7G,IAAK+B,EAAGrC,MAAOqC,GACxBA,QAKjB3B,EAAA,cAAC0C,EAAA,EAAD,CAAWyX,KAAG,GACVna,EAAA,cAAC0C,EAAA,EAAD,CACI2B,QACIrE,EAAA,cAAC0C,EAAA,EAAD,CAAQ4B,QAAS0V,EAAUvZ,SAAU,SAAC8D,EAAG5C,GAAJ,OAAUgN,EAAmBhN,MAEtE8C,MAAOzE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,uDCxD5B4c,GAAb,SAAAA,IAAApW,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAsa,GAAAta,KACWua,gBAAkD,KAD7Dva,KAEWuF,aAA+C,MCFpDiV,GAA8B,kBAAMxS,KAAKyS,UAExC,SAASC,GACZlU,EACAmU,GAEa,IADbF,EACajG,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GADCgG,GAEd,GAAqB,IAAjBhU,EAAMqB,OAAV,CAIA,IAAMc,EAA8C,GAChDiS,EAAsB,EANbC,GAAA,EAAAC,GAAA,EAAAC,OAAA7c,EAAA,IAOb,QAAA8c,EAAAC,EAAmBzU,EAAnB0U,OAAAC,cAAAN,GAAAG,EAAAC,EAAAnH,QAAAsH,MAAAP,GAAA,EAA0B,KAAf/X,EAAekY,EAAAxb,MAChBpB,EAASuc,EAAU7X,GACzB6F,EAAQT,KAAK,CAAEpF,OAAM1E,WAErBwc,GAAexc,GAXN,MAAAid,GAAAP,GAAA,EAAAC,EAAAM,EAAA,YAAAR,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAeb,IADA,IAAIQ,EAAeX,EAAcH,IACjCe,EAAA,EAAAA,EAA+B7S,EAA/Bd,OAAA2T,IAAwC,KAAAjQ,EAAT5C,EAAS6S,GAA3B1Y,EAA2ByI,EAA3BzI,KAAM1E,EAAqBmN,EAArBnN,OACf,GAAe,IAAXA,IAGJmd,GAAgBnd,IAEI,EAChB,OAAO0E,ICrBZ,ICEM2Y,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAyb,GAAA,QAAAG,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAuX,IAAAzL,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MAEqBE,oBAAsB,GAF3C1c,EAIoBqW,SAAqB,IAAI4E,GAJ7Cjb,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAuX,EAAAC,GAAAxX,OAAAmR,EAAA,EAAAnR,CAAAuX,EAAA,EAAA3b,IAAA,2BAAAN,MAAA,WAMkF,IAAAsC,EAAA9B,KAA9Cic,EAA8CzH,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAApB,KAChD0H,EAAgBlc,KAAKmc,YAAYnc,KAAKoc,OAAO1T,MAAOuT,GACpDI,EAA6C,GAC7CC,EAAoD,GACpDC,EAAoD,GAEpDC,EAAW,IAAI/U,MANqDoT,GAAA,EAAAC,GAAA,EAAAC,OAAA7c,EAAA,IAO1E,IAP0E,IAO1E8c,EAP0EyB,EAAA,eAO/DC,EAP+D1B,EAAAxb,MAQtEgd,EAAStU,KAATqM,MAAAiI,EAAQtY,OAAAyY,GAAA,EAAAzY,CACDwY,EAAKve,MAAMd,IAAI,SAAAwE,GAAC,MAAK,CACpBrC,MAAO,CAAEia,KAAM5X,EAAErC,MAAOoa,QAAS8C,EAAKA,KAAK3e,KAC3CK,OAAQyD,EAAEzD,OAASse,EAAKA,KAAKte,aAJzC6c,EAAmBiB,EAAnBhB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAnH,QAAAsH,MAAAP,GAAA,EAAkC4B,IAPwC,MAAApB,GAAAP,GAAA,EAAAC,EAAAM,EAAA,YAAAR,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAgB1E/a,KAAK4c,eAAeJ,GAhBsD,IAAAK,GAAA,EAAAC,GAAA,EAAAC,OAAA7e,EAAA,IAkB1E,QAAA8e,EAAAC,EAAmBjd,KAAKoc,OAAO1T,MAA/BwS,OAAAC,cAAA0B,GAAAG,EAAAC,EAAAnJ,QAAAsH,MAAAyB,GAAA,EAAsC,KAA3BH,EAA2BM,EAAAxd,MAClC6c,EAAYK,EAAK3e,KAAO,GAnB8C,MAAAsd,GAAAyB,GAAA,EAAAC,EAAA1B,EAAA,YAAAwB,GAAA,MAAAI,EAAA3B,QAAA2B,EAAA3B,SAAA,WAAAwB,EAAA,MAAAC,GAsB1E,IAtB0E,IAAAG,EAAA,WAsBrE,IAAMzD,EAAQ+C,EAAJhB,GACHhc,EAAkBia,EAAlBja,MAAOpB,EAAWqb,EAAXrb,OAETse,EAAO5a,EAAKsa,OAAO1T,MAAM1D,KAAK,SAAAnD,GAAC,OAAIA,EAAE9D,MAAQyB,EAAMoa,UAEzDyC,EAAY7c,EAAMoa,UAAYxb,EAASse,EAAKte,OAE5C,IAAMub,EAAYna,EAAMia,KAAKE,WAAa,OACNzb,IAAhCqe,EAAiB5C,KACjB2C,EAAiB3C,GAAa,EAC9B4C,EAAiB5C,GAAa,GAGlC2C,EAAiB3C,IAAcvb,EAASse,EAAKte,OAC7Cme,EAAiB5C,IAAc,GAdnC6B,EAAA,EAAAA,EAAmBgB,EAAnB3U,OAAA2T,IAA6B0B,IAiB7B,IAAMC,EAGCjZ,OAAOoS,KAAKgG,GAAkBjf,IAAI,SAAA+f,GACrC,IAAMzD,EAAY0D,OAAOD,GACzB,MAAQ,CACJ5d,MAAO,CACHma,UAAyB,IAAdA,EAAkB,KAAOA,EACpCnR,MAAO+T,EAAiB5C,IAE5Bvb,OAAQke,EAAiB3C,MASjC,MAAO,CAAEjR,MALUxE,OAAOoS,KAAK+F,GAAahf,IAAI,SAAAU,GAC5C,IAAM2e,EAAO5a,EAAKsa,OAAO1T,MAAM1D,KAAK,SAAAnD,GAAC,OAAIA,EAAE9D,MAAQA,IACnD,MAAO,CAAEyB,MAAOkd,EAAMte,OAAQie,EAAYte,GAAO2e,EAAKte,UAG9Bub,UAAWwD,EAAuBG,WAAYd,EAAS3U,UAhE3F,CAAA/H,IAAA,gBAAAN,MAAA,SAoEQ+d,EACAC,EACAnf,GACY,IAAAmZ,EAAAxX,KACZ,GAA8B,IAA1Bud,EAAe1V,OACf,MAAO,GAGX,GAAI0V,EAAe1V,OAAS7H,KAAKoc,OAAO/a,QAAQwG,OAC5C,MAAM,IAAI4N,MAAM,+CAGpB,IAAMgI,EAAiB,IAAIhW,MACrBD,EAAgC+V,EAAelgB,IAAI,SAACoH,EAAGmD,GAAJ,OACrD4V,EAAe3V,OAASD,EAAI4V,EAAe5V,GAAK,OAXxC8V,GAAA,EAAAC,GAAA,EAAAC,OAAA1f,EAAA,IAcZ,IAdY,IAcZ2f,EAdYC,EAAA,eAcDjZ,EAdCgZ,EAAAre,MAeFue,EAAcvG,EAAK4E,OAAO1Y,aAAasB,KACzC,SAAAnD,GAAC,OAAIA,EAAEoD,KAAOJ,EAAOnH,IAAMmE,EAAEiD,KAAOD,EAAOnH,UAG3BQ,IAAhB6f,IACIA,EAAY9Y,KAAOJ,EAAOnH,GAC1B+f,EAAevV,KAAK6V,EAAYjZ,IAEhC2Y,EAAevV,KAAK6V,EAAY9Y,MAT5C+Y,EAAqBR,EAAe5Y,OAAO,SAAA/C,GAAC,OAAU,OAANA,IAAYxE,IAAI,SAAAwE,GAAC,OAAIA,IAArEqZ,OAAAC,cAAAuC,GAAAG,EAAAG,EAAAlK,QAAAsH,MAAAsC,GAAA,EAA0EI,IAd9D,MAAAzC,GAAAsC,GAAA,EAAAC,EAAAvC,EAAA,YAAAqC,GAAA,MAAAM,EAAA1C,QAAA0C,EAAA1C,SAAA,WAAAqC,EAAA,MAAAC,GAkCZ,IANA,IAAIK,EAAgB,EACdvI,EAAoC,CACtCkD,WAAY4E,EAAe5Y,OAAO,SAAA/C,GAAC,OAAS,MAALA,IAAWxE,IAAI,SAAAwE,GAAC,OAAIA,EAAGnE,KAC9Dqb,OAAQ,KAGkC,IAAvCvR,EAAO5F,UAAU,SAAAC,GAAC,OAAU,OAANA,KAAoB,CAC7C,IAD6C,IAAAqc,EAAA,SACpCtW,GACL,GAAkB,OAAdJ,EAAOI,GACP,iBAGJ,IAAMnK,EAAS8f,EAAe3V,GAC1BuW,OAAwB,EAE5B,OAAQ1gB,GACJ,IAAK,OACD0gB,EAAa3G,EAAK4E,OAAO/a,QACzB,MACJ,IAAK,OACD8c,EAAa3G,EAAK4E,OAAO/a,QAAQuD,OAAO,SAAA/C,GAAC,MAAiB,SAAbA,EAAEpE,SAC/C,MACJ,IAAK,SACD0gB,EAAa3G,EAAK4E,OAAO/a,QAAQuD,OAAO,SAAA/C,GAAC,MAAiB,WAAbA,EAAEpE,SAC/C,MACJ,QACI,iBAGR,IAAMmP,EAASuR,EAAWvZ,OAAO,SAAA/C,GAAC,OAAK4C,KAAE2Z,SAAS5W,EAAQ3F,KACpDwc,EAAa7W,EAAO5C,OAAO,SAAA/C,GAAC,OAAU,OAANA,GAA2B,SAAbA,EAAEpE,SAAmBoK,OACnEyW,EAAe9W,EAAO5C,OAAO,SAAA/C,GAAC,OAAU,OAANA,GAA2B,WAAbA,EAAEpE,SAAqBoK,OAEvE0W,EAAyB,IAAI9W,MAC7B5C,EAAS2S,EAAKkD,qBAAqB9N,EAAQ,SAAA6E,GAC7C,IAAIrT,EAAS,EA4Bb,OA1BIqG,KAAE+Z,KAAKf,EAAgB,SAAA5b,GAAC,OAAIA,IAAM4P,EAAE/T,OAEhC+G,KAAE+Z,KAAKtY,GAAkC,SAAArE,GAAC,OACtC4C,KAAE+Z,KAAKngB,EAAM,SAAAgH,GAAC,OAAIxD,IAAMwD,EAAEsR,kBAG9BvY,GAAUwO,EAAO/E,OAGjBzJ,GAA0B,GAAhBwO,EAAO/E,QAIV,SAAXpK,GAAqB+Z,EAAK4E,OAAO3Y,wBAC7B4a,EAAaC,EACI,WAAb7M,EAAEhU,SACFW,GAAU,IAEPkgB,EAAeD,GACL,SAAb5M,EAAEhU,SACFW,GAAU,KAKtBmgB,EAAuBrW,KAAK,CAAEgR,SAAUzH,EAAE/T,GAAIU,SAAQib,QAAQ,IACvDjb,IAGXmgB,EAAuBvZ,KAAK,SAAAnD,GAAC,OAAIA,EAAEqX,WAAarU,EAAOnH,KAAK2b,QAAS,EACrE3D,EAASqD,OAAO7Q,KAAKqW,GAErB/W,EAAOI,GAAK/C,EACZoZ,IAEA,IAAMF,EAAcvG,EAAK4E,OAAO1Y,aAAasB,KACzC,SAAAnD,GAAC,OAAIA,EAAEoD,KAAOJ,EAAOnH,IAAMmE,EAAEiD,KAAOD,EAAOnH,UAE3BQ,IAAhB6f,IACIA,EAAY9Y,KAAOJ,EAAOnH,GAC1B+f,EAAevV,KAAK6V,EAAYjZ,IAEhC2Y,EAAevV,KAAK6V,EAAY9Y,MAxEnC2C,EAAI,EAAGA,EAAI2V,EAAe1V,OAAQD,IAAKsW,EAAvCtW,GA6ET,GAAIqW,IAAkBzW,EAAOK,OACzB,MAKJ,IAAMwW,EAAa7W,EAAO5C,OAAO,SAAA/C,GAAC,OAAU,OAANA,GAA2B,SAAbA,EAAEpE,SAAmBoK,OACnEyW,EAAe9W,EAAO5C,OAAO,SAAA/C,GAAC,OAAU,OAANA,GAA2B,WAAbA,EAAEpE,SAAqBoK,OACzE4W,EAA0B,KAK9B,GAHIJ,EAAaC,EAAcG,EAAW,OACjCH,EAAeD,IAAYI,EAAW,UAE9B,OAAbA,EAkCJ,IAAK,IAAI7W,EAAI,EAAGA,EAAI2V,EAAe1V,OAAQD,IAAK,CAG5C,OAFe2V,EAAe3V,IAG1B,IAAK,WAEG2V,EAAe3V,GADF,WAAb6W,EACoB,OAEA,SAExB,MACJ,IAAK,OAEGlB,EAAe3V,GADF,WAAb6W,EACoB,SAEA,YAjDpC,CAII,IAAIC,GAAU,EACd,IAAS9W,EAAI,EAAGA,EAAI2V,EAAe1V,OAAQD,IACvC,GAA0B,SAAtB2V,EAAe3V,GAAe,CAC9B2V,EAAe3V,GAAK,OACpB8W,GAAU,EACV,MAIR,IAAKA,EAKD,IAAK,IAAI9W,EAAI,EAAGA,EAAI2V,EAAe1V,OAAQD,IACvC,GAA0B,aAAtB2V,EAAe3V,GAAmB,CAC7B8W,EAIDnB,EAAe3V,GAAK,QAHpB2V,EAAe3V,GAAK,OACpB8W,GAAU,GAId,QAiCpB,OADA1e,KAAK0V,SAAS6E,gBAAkB7E,EACzBlO,EAAOnK,IAAI,SAAAwE,GAAC,OAAIA,MA/P/B,CAAA/B,IAAA,aAAAN,MAAA,SAkQsByc,GAA2B,IAAA0C,EAAA3e,KACnCkc,EAAgBlc,KAAKmc,YAAYnc,KAAKoc,OAAO1T,MAAOuT,GAEpDO,EAAW,IAAI/U,MAHoBmX,GAAA,EAAAC,GAAA,EAAAC,OAAA5gB,EAAA,IAIzC,IAJyC,IAIzC6gB,EAJyCC,EAAA,eAI9BtC,EAJ8BqC,EAAAvf,MAKrCgd,EAAStU,KAATqM,MAAAiI,EAAQtY,OAAAyY,GAAA,EAAAzY,CACDwY,EAAKve,MAAMd,IAAI,SAAAwE,GAAC,MAAK,CACpBrC,MAAO,CAAEia,KAAM5X,EAAErC,MAAOoa,QAAS8C,EAAKA,KAAK3e,KAC3CK,OAAQyD,EAAEzD,OAASse,EAAKA,KAAKte,aAJzC6gB,EAAmB/C,EAAnBhB,OAAAC,cAAAyD,GAAAG,EAAAE,EAAAnL,QAAAsH,MAAAwD,GAAA,EAAkCI,IAJO,MAAA3D,GAAAwD,GAAA,EAAAC,EAAAzD,EAAA,YAAAuD,GAAA,MAAAK,EAAA3D,QAAA2D,EAAA3D,SAAA,WAAAuD,EAAA,MAAAC,GAazC9e,KAAK4c,eAAeJ,GAEpB,IAfyC,IAAA0C,EAAA,WAepC,IAAMzF,EAAQ+C,EAAJ2C,GACLzC,EAAOiC,EAAKvC,OAAO1T,MAAM1D,KAAK,SAAAnD,GAAC,OAAIA,EAAE9D,MAAQ0b,EAAKja,MAAMoa,UAC9DH,EAAKrb,QAAUse,EAAKte,QAFxB+gB,EAAA,EAAAA,EAAmB3C,EAAnB3U,OAAAsX,IAA6BD,IAK7B,IAAME,EAAWpf,KAAK0a,qBAAqB8B,EAAU,SAAA3a,GAAC,OAAIA,EAAEzD,SAC5D,QAAiBF,IAAbkhB,EACA,MAAM,IAAI3J,MAAM,mCAGpB,OAAO2J,EAAS5f,QA3RxB,CAAAM,IAAA,iBAAAN,MAAA,SA8R2BrB,GAAkC,IAAAkhB,EAAArf,KAC/C2Z,EAAY3Z,KAAKoc,OAAOzC,UAExB2F,EAAenhB,EAAMyG,OACvB,SAAA/C,GAAC,OAAIA,EAAErC,MAAMia,KAAKE,YAAcA,GAAa9X,EAAErC,MAAMia,KAAKE,YAAcA,EAAY,IAElF4F,EAAgBD,EAAa1a,OAC/B,SAAA/C,GAAC,OAGU,IAFPwd,EAAKjD,OAAOoD,aAAa5d,UACrB,SAAAyD,GAAC,OAAIA,EAAEuU,UAAY/X,EAAErC,MAAMoa,SAAWvU,EAAEoU,KAAK/b,KAAOmE,EAAErC,MAAMia,KAAK/b,OAKvE+hB,GAAcH,EAAazX,OAAS0X,EAAc1X,QAAUyX,EAAazX,OAS/E,GAAI7H,KAAK+b,oBAAsB0D,GAAcF,EAAc1X,OAAS,GAAI,CACpE,IAAM+S,EAAczc,EAAMoJ,OAAO,SAAC1F,EAAGwD,GAAJ,OAAUxD,EAAIwD,EAAEjH,QAAQ,GACnDshB,EAAiBH,EAAchY,OAAO,SAAC1F,EAAGwD,GAAJ,OAAUxD,EAAIwD,EAAEjH,QAAQ,GAEpEuhB,QAAQC,IAAR,UAAAvU,OAAsBuP,EAAtB,gBAAAvP,OAAgDqU,IAGhD,GADyB,GACrB9E,EAAiC8E,EAAgB,CACjD,IAAMG,EAFe,GAGjBjF,EACA8E,EACAA,EAAiBA,EAIrBC,QAAQC,IAAI,WAAaC,GARwB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAA9hB,EAAA,IAWjD,QAAA+hB,EAAAC,EAA0BX,EAA1BrE,OAAAC,cAAA2E,GAAAG,EAAAC,EAAApM,QAAAsH,MAAA0E,GAAA,EAAyC,KAA9BK,EAA8BF,EAAAzgB,MACrC2gB,EAAY/hB,OAAS+hB,EAAY/hB,OAASyhB,GAZG,MAAAxE,GAAA0E,GAAA,EAAAC,EAAA3E,EAAA,YAAAyE,GAAA,MAAAI,EAAA5E,QAAA4E,EAAA5E,SAAA,WAAAyE,EAAA,MAAAC,QA5TjE,CAAAlgB,IAAA,kBAAAN,MAAA,SA8U2B4gB,GAA0D,IAAAC,EAAArgB,KACvEsgB,EAA4B,GAD2CC,GAAA,EAAAC,GAAA,EAAAC,OAAAviB,EAAA,IAE7E,QAAAwiB,EAAAC,EAAoBP,EAApBlF,OAAAC,cAAAoF,GAAAG,EAAAC,EAAA7M,QAAAsH,MAAAmF,GAAA,EAAqC,KAA1B1G,EAA0B6G,EAAAlhB,MAAAohB,GAAA,EAAAC,GAAA,EAAAC,OAAA5iB,EAAA,IACjC,IADiC,IACjC6iB,EADiCC,EAAA,eACtB/E,EADsB8E,EAAAvhB,OAE2B,IAApD8gB,EAAgB1e,UAAU,SAAAC,GAAC,OAAIA,IAAMoa,KACrCqE,EAAgBpY,KAAK+T,IAF7BgF,EAAuBpH,EAAMqH,eAA7BhG,OAAAC,cAAAyF,GAAAG,EAAAE,EAAAnN,QAAAsH,MAAAwF,GAAA,EAA6CI,IADZ,MAAA3F,GAAAwF,GAAA,EAAAC,EAAAzF,EAAA,YAAAuF,GAAA,MAAAK,EAAA3F,QAAA2F,EAAA3F,SAAA,WAAAuF,EAAA,MAAAC,KAFwC,MAAAzF,GAAAmF,GAAA,EAAAC,EAAApF,EAAA,YAAAkF,GAAA,MAAAI,EAAArF,QAAAqF,EAAArF,SAAA,WAAAkF,EAAA,MAAAC,GAW7E,IADA,IAAMU,EAA8C,GACpDC,EAAA,EAAAA,EAAuBd,EAAvBzY,OAAAuZ,IAAwC,CAAnC,IAAMnF,EAAYqE,EAAJc,GACTlF,EAAgBlc,KAAKmc,YACvBnc,KAAKoc,OAAO1T,MAAM9D,OAAO,SAAA/C,GAAC,OAAiB,IAAbA,EAAEzD,SAChC6d,GAGEO,EAAkC,GANJ6E,GAAA,EAAAC,GAAA,EAAAC,OAAArjB,EAAA,IAOpC,QAAAsjB,EAAAC,EAAuBvF,EAAvBhB,OAAAC,cAAAkG,GAAAG,EAAAC,EAAA3N,QAAAsH,MAAAiG,GAAA,EAAsC,KAA3BK,EAA2BF,EAAAhiB,MAClCgd,EAAStU,KAATqM,MAAAiI,EAAQtY,OAAAyY,GAAA,EAAAzY,CAASwd,EAASvjB,SARM,MAAAkd,GAAAiG,GAAA,EAAAC,EAAAlG,EAAA,YAAAgG,GAAA,MAAAI,EAAAnG,QAAAmG,EAAAnG,SAAA,WAAAgG,EAAA,MAAAC,GAWZ,IAApB/E,EAAS3U,OACTsZ,EAAgBlF,GAAY,EAE5BkF,EAAgBlF,GACZ,IAAQ,IAAOO,EAASjV,OAAO,SAAC1F,EAAGwD,GAAJ,OAAUxD,EAAIwD,EAAEjH,QAAQ,GAAMoe,EAAS3U,OAIlF,IAAM8Z,EAAqD,GA9BkBC,GAAA,EAAAC,GAAA,EAAAC,OAAA5jB,EAAA,IA+B7E,IA/B6E,IA+B7E6jB,EA/B6EC,EAAA,eA+BlEnI,EA/BkEkI,EAAAviB,MAgCnEyiB,EAAgB5B,EAAKjE,OAAOhU,OAAOpD,KAAK,SAAAnD,GAAC,OAAIA,EAAErC,QAAUqa,EAAM1E,YAErE,QAAsBjX,IAAlB+jB,GAAwD,IAAzBA,EAAc7jB,OAC7C,iBAGJ,IAAIyhB,EAAS,EAtC4DqC,GAAA,EAAAC,GAAA,EAAAC,OAAAlkB,EAAA,IAuCzE,QAAAmkB,EAAAC,EAAuBzI,EAAMqH,eAA7BhG,OAAAC,cAAA+G,GAAAG,EAAAC,EAAAxO,QAAAsH,MAAA8G,GAAA,EAA6C,KAAlCjG,EAAkCoG,EAAA7iB,MACzCqgB,EAAS7X,KAAKnB,IAAIsa,EAAgBlF,GAAW4D,IAxCwB,MAAAxE,GAAA8G,GAAA,EAAAC,EAAA/G,EAAA,YAAA6G,GAAA,MAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,GA2CzET,EAAezZ,KAAK,CAAE9J,OAAQyhB,EAASoC,EAAc7jB,OAAQoB,MAAOqa,KAZxE0I,EAAoBnC,EAApBlF,OAAAC,cAAAyG,GAAAG,EAAAQ,EAAAzO,QAAAsH,MAAAwG,GAAA,EAAqCI,IA/BwC,MAAA3G,GAAAwG,GAAA,EAAAC,EAAAzG,EAAA,YAAAuG,GAAA,MAAAW,EAAAjH,QAAAiH,EAAAjH,SAAA,WAAAuG,EAAA,MAAAC,GA8C7E,GAAIH,EAAe9Z,OAAS,GAAK7H,KAAKoc,OAAOoG,cAAc3a,OAAS,EAAG,CACnE,IAAM4a,EAAgBziB,KAAKoc,OAAOoG,cAAc,GAC1CE,EAAYf,EAAe3c,KAAK,SAAAnD,GAAC,OAAIA,EAAErC,MAAM2V,YAAcsN,SAC/CvkB,IAAdwkB,IACAA,EAAUtkB,OAAS,GAI3B4B,KAAK0V,SAASnQ,aAAe,CACzBoD,QAASgZ,EAAetkB,IAAI,SAAAwE,GAAC,MAAK,CAAEzD,OAAQyD,EAAEzD,OAAQoB,MAAOqC,EAAErC,MAAM2V,cAGzE,IAAMiK,EAAWpf,KAAK0a,qBAAqBiH,EAAgB,SAAA9H,GAAK,OAAIA,EAAMzb,SAC1E,QAAiBF,IAAbkhB,EAIJ,OAAOA,EAAS5f,MAAM2V,YA7Y9B,CAAArV,IAAA,UAAAN,MAAA,SAgZmBqH,GAGX,OAFAA,EAAMmB,KAAKpB,IAAIC,EAAK,GAEbmB,KAAKpB,IAAIC,EAAMmB,KAAK2a,MAAyB,EAAnB3iB,KAAK4iB,aAAmB,KAnZjE,CAAA9iB,IAAA,cAAAN,MAAA,SAuZQkJ,EACAjI,GACuD,IAAAoiB,EAAA7iB,KACjD8iB,EAAuBpa,EAAMrL,IAAI,SAAAwE,GAAC,MAAK,CACzC1D,MAAO0D,EAAE1D,MAAMyG,OAAO,SAAA6U,GAClB,OAAa,OAAThZ,GAAiBgZ,EAAKhZ,OAASA,KAIV,IAArBgZ,EAAKpb,KAAKwJ,SAIF,IAHR4R,EAAKpb,KAAKuD,UAAU,SAAAC,GAChB,IAAMkhB,EAAcF,EAAKzG,OAAO/d,KAAK2G,KAAK,SAAAK,GAAC,OAAIA,EAAE7F,QAAUqC,IAC3D,YAAuB3D,IAAhB6kB,GAAoD,IAAvBA,EAAY3kB,YAI5DL,IAAK8D,EAAE9D,IACPK,OAAQyD,EAAEzD,UAKRkf,EAAawF,EAASvb,OAAO,SAAC1F,EAAGwD,GAAJ,OAAUxD,EAAIwD,EAAElH,MAAM0J,QAAQ,GAG3DL,EAAkE,GAElEmS,EAAY3Z,KAAKoc,OAAOzC,UAzByBqJ,GAAA,EAAAC,GAAA,EAAAC,OAAAhlB,EAAA,IA2BvD,IA3BuD,IA2BvDilB,EA3BuDC,EAAA,eA2B5C1G,EA3B4CyG,EAAA3jB,MA6B7C6jB,EAAcR,EAAKzG,OAAOoD,aAAa5a,OAAO,SAAA/C,GAAC,OAAIA,EAAE+X,UAAY8C,EAAK3e,MAGxEulB,OAAwB,EAEtB7D,EAAa4D,EAAYxb,OAAS6U,EAAKve,MAAM0J,OAG/Cyb,EAFA7D,EAAaoD,EAAK9G,oBAEgD,GAA/C/T,KAAKub,IAAIvb,KAAKpB,IAAI,IAAM6Y,EAAY,IAAM,GAE1C,EAGvB,IAAM+D,EAAuC,GA1CMC,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IA2CnD,QAAA0lB,EAAAC,EAAmBnH,EAAKve,MAAxB+c,OAAAC,cAAAsI,GAAAG,EAAAC,EAAA/P,QAAAsH,MAAAqI,GAAA,EAA+B,KAApBhK,EAAoBmK,EAAApkB,MAIrBpB,EAASklB,EAHST,EAAKiB,cAAcrK,EAAKE,UAAWA,GACrCkJ,EAAKkB,iBAAiBtK,EAAK/b,GAAI2lB,EAAa/F,GAC/CuF,EAAKmB,cAAcvK,EAAKpb,KAAMwkB,EAAKzG,OAAO/d,MAE9C,IAAXD,GAIJolB,EAActb,KAAK,CACf1I,MAAOia,EACPrb,OAAQA,KAtDmC,MAAAid,GAAAqI,GAAA,EAAAC,EAAAtI,EAAA,YAAAoI,GAAA,MAAAI,EAAAvI,QAAAuI,EAAAvI,SAAA,WAAAoI,EAAA,MAAAC,GA0DnDnc,EAAOU,KAAK,CAAEwU,OAAMve,MAAOqlB,KA/B/BS,EAAmBnB,EAAnB5H,OAAAC,cAAA6H,GAAAG,EAAAc,EAAAnQ,QAAAsH,MAAA4H,GAAA,EAA6BI,IA3B0B,MAAA/H,GAAA4H,GAAA,EAAAC,EAAA7H,EAAA,YAAA2H,GAAA,MAAAiB,EAAA3I,QAAA2I,EAAA3I,SAAA,WAAA2H,EAAA,MAAAC,GA6DvD,OAAO1b,IAtdf,CAAA1H,IAAA,qBAAAN,MAAA,SAyd8B0kB,GACtB,IAAMC,EAAc,IAAI1c,MAClB6L,EAAM,IAAID,KACZ7L,EAASxH,KAAKoc,OAAOzC,WAEpBlV,KAAE2Z,SAAS8F,EAAQ,cAAgB5Q,EAAI8Q,WAAa,IAAM9Q,EAAI8Q,WAAa,KAC5E5c,IACA2c,EAAYjc,KAAK,aAGrB,IAAMmc,EAAcrkB,KAAKoc,OAAOoG,cAAc3a,OAC9C,GAAIwc,EAAc,KAAO,GAAqB,IAAhBA,EAAmB,CAC7C,IAAM3mB,EAAK2mB,EAAc,GACpB5f,KAAE2Z,SAAS8F,EAAX,UAAA7Y,OAA6B3N,MAC9B8J,IACA2c,EAAYjc,KAAZ,UAAAmD,OAA2B3N,KAQnC,OAJI8J,EAAS,IACTA,EAAS,GAGN,CAAEmS,UAAWnS,EAAQ0c,OAAQC,KAhf5C,CAAArkB,IAAA,gBAAAN,MAAA,SAmf4BnB,EAAgBimB,GACpC,IAAM3b,EAAUtK,EACXhB,IAAI,SAAAwE,GAAC,OAAIyiB,EAAWtf,KAAK,SAAAK,GAAC,OAAIA,EAAE7F,QAAUqC,MAC1C+C,OAAO,SAAA/C,GAAC,YAAU3D,IAAN2D,IACZxE,IAAI,SAAAwE,GAAC,OAAIA,EAAGzD,SACjB,OAAIuK,EAAQd,OAAS,EACVG,KAAKnB,IAAL0N,MAAAvM,KAAI9D,OAAAyY,GAAA,EAAAzY,CAAQyE,IAEhB,KA3ff,CAAA7I,IAAA,mBAAAN,MAAA,SA+f+B9B,EAAYyR,EAAoBmO,GACvD,IAAMiH,EAAkBpV,EAAQvN,UAAU,SAAAC,GAAC,OAAIA,EAAE4X,KAAK/b,KAAOA,IAC7D,OAAyB,IAArB6mB,EACO,EAGPA,EAAkBjH,EACX,EAGJiH,EAAkBjH,IAzgBjC,CAAAxd,IAAA,gBAAAN,MAAA,SA6gB4BglB,EAAmC7K,GACvD,QAAsBzb,IAAlBsmB,EACA,MAAO,IAMX,GAAIA,IAAkB7K,EAClB,OAAO,EAGX,GAAI6K,EAAgB7K,EAAW,CAC3B,IAAMnS,EAAS,IAAqC,IAA7Bgd,EAAgB7K,GACvC,OAAOnS,EAAS,EAAI,EAAIA,EAG5B,MAAO,KA9hBf,CAAA1H,IAAA,cAAAN,MAAA,SAiiB0BkJ,GAClB,IAAM+b,EAA4B,GADeC,GAAA,EAAAC,GAAA,EAAAC,OAAA1mB,EAAA,IAGjD,QAAA2mB,EAAAC,EAAmBpc,EAAnBwS,OAAAC,cAAAuJ,GAAAG,EAAAC,EAAAhR,QAAAsH,MAAAsJ,GAAA,EAA0B,KAAfhI,EAAemI,EAAArlB,MAEtB,KAAIkd,EAAKte,QAAU,GAAnB,CAIA,IAAMD,EAAgB,GANA4mB,GAAA,EAAAC,GAAA,EAAAC,OAAA/mB,EAAA,IAOtB,QAAAgnB,EAAAC,EAAmBzI,EAAKve,MAAxB+c,OAAAC,cAAA4J,GAAAG,EAAAC,EAAArR,QAAAsH,MAAA2J,GAAA,EAA+B,KAApBtL,EAAoByL,EAAA1lB,MAC3B,GAAKQ,KAAKolB,0BAA0BplB,KAAKoc,OAAO/a,QAASoY,EAAKpY,SAA9D,CAIA,IAAIgkB,GAAe,EALQC,GAAA,EAAAC,GAAA,EAAAC,OAAAtnB,EAAA,IAM3B,QAAAunB,EAAAC,EAAkBjM,EAAKpb,KAAvB6c,OAAAC,cAAAmK,GAAAG,EAAAC,EAAA5R,QAAAsH,MAAAkK,GAAA,EAA6B,KAAlBK,EAAkBF,EAAAjmB,MACzB,GAAIQ,KAAK4lB,oBAAoBD,EAAK3lB,KAAKoc,OAAO/d,MAAO,CACjDgnB,GAAe,EACf,QATmB,MAAAhK,GAAAkK,GAAA,EAAAC,EAAAnK,EAAA,YAAAiK,GAAA,MAAAI,EAAApK,QAAAoK,EAAApK,SAAA,WAAAiK,EAAA,MAAAC,GAavBH,GAIC5L,EAAKoM,UAAU7lB,KAAKoc,SAIzBje,EAAM+J,KAAKuR,KA5BO,MAAA4B,GAAA2J,GAAA,EAAAC,EAAA5J,EAAA,YAAA0J,GAAA,MAAAI,EAAA7J,QAAA6J,EAAA7J,SAAA,WAAA0J,EAAA,MAAAC,GA+BlB9mB,EAAM0J,OAAS,GACf4c,EAAcvc,KAAK,CAAE/J,QAAOC,OAAQse,EAAKte,OAAQL,IAAK2e,EAAK3e,QAnClB,MAAAsd,GAAAsJ,GAAA,EAAAC,EAAAvJ,EAAA,YAAAqJ,GAAA,MAAAI,EAAAxJ,QAAAwJ,EAAAxJ,SAAA,WAAAqJ,EAAA,MAAAC,GAuCjD,OAAOH,IAxkBf,CAAA3kB,IAAA,sBAAAN,MAAA,SA2kBqCA,EAAUmJ,GACvC,OAAOA,EAAQ/G,UAAU,SAAAC,GAAC,OAAIA,EAAErC,QAAUA,GAASqC,EAAEzD,QAAU,KAAM,IA5kB7E,CAAA0B,IAAA,4BAAAN,MAAA,SAglBQ6B,EACAykB,GAEA,GAAIA,EAAcje,OAASxG,EAAQwG,OAC/B,OAAO,EAGX,IAAMke,EAAqBD,EAAclhB,OAAO,SAAA/C,GAAC,MAAiB,SAAbA,EAAEpE,SAAmBoK,OACpEme,EAAc3kB,EAAQuD,OAAO,SAAA/C,GAAC,MAAiB,SAAbA,EAAEpE,SAAmBoK,OAE7D,GAAIke,EAAqBC,EACrB,OAAO,EAGX,IAAMC,EAAuBH,EAAclhB,OAAO,SAAA/C,GAAC,MAAiB,WAAbA,EAAEpE,SAAqBoK,OACxEqe,EAAgB7kB,EAAQuD,OAAO,SAAA/C,GAAC,MAAiB,WAAbA,EAAEpE,SAAqBoK,OACjE,QAAIoe,EAAuBC,OAIGJ,EAAclhB,OAAO,SAAA/C,GAAC,MAAiB,aAAbA,EAAEpE,SAAuBoK,OACrDG,KAAKnB,IAAIqf,EAAeF,OAI1BF,EAAclhB,OAAO,SAAA/C,GAAC,MAAiB,SAAbA,EAAEpE,SAAmBoK,OACjD,EAAIG,KAAKpB,IAAIsf,EAAeF,SA1mB5DvK,EAAA,CDFA,WAGI,SAAA0K,EAA+B/J,EAAoB3B,GAAcvW,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAmmB,GAAAnmB,KAAAoc,SAAApc,KAF9Cya,YAE6C,EAC5Dza,KAAKya,OAASA,EAJtB,OAAAvW,OAAAmR,EAAA,EAAAnR,CAAAiiB,EAAA,EAAArmB,IAAA,YAAAN,MAAA,WAkBQ,OAAOQ,KAAKya,WAlBpB,CAAA3a,IAAA,uBAAAN,MAAA,SAqBmCgH,EAAYmU,GAA+C,IAAAtb,EAAAW,KACtF,OAAO0a,GAAqBlU,EAAOmU,EAAW,kBAAMtb,EAAKob,aAtBjE,CAAA3a,IAAA,+BAAAN,MAAA,SAyB8CgH,GAAqC,IAAA1E,EAAA9B,KAC3E,ODED,SACHwG,GAEa,IACPgB,EAASkT,GAAqBlU,EAAO,SAAA1D,GAAI,OAAIA,EAAK1E,QAD3CoW,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GADCgG,IAGd,QAAetc,IAAXsJ,EAIJ,OAAOA,EAAOhI,MCXH4mB,CAA6B5f,EAAO,kBAAM1E,EAAK2Y,eA1B9D0L,EAAA,wDEPaE,GAAb,WAGI,SAAAA,EACYC,EACAC,GACTriB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAqmB,GAAArmB,KAAAsmB,cAAAtmB,KAAAumB,gBAAAvmB,KALcwmB,UAAY,IAAIC,UADrC,OAAAviB,OAAAmR,EAAA,EAAAnR,CAAAmiB,EAAA,EAAAvmB,IAAA,cAAAN,MAAA,eAAAknB,EAAAxiB,OAAAwP,GAAA,EAAAxP,CAAAyP,GAAApT,EAAAqT,KAAA,SAAAC,EAQ6B9V,GAR7B,IAAAyJ,EAAA,OAAAmM,GAAApT,EAAAwT,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAF,MAAA,cASctM,EAAiB,GAT/BwM,EAAAF,KAAA,EAWc9T,KAAK2mB,SAAS5oB,EAAKyJ,OAAQtJ,GAXzC,cAAA8V,EAAA4S,OAAA,SAYepf,GAZf,wBAAAwM,EAAAK,SAAAR,EAAA7T,SAAA,gBAAAsU,GAAA,OAAAoS,EAAAnS,MAAAvU,KAAAwU,YAAA,KAAA1U,IAAA,WAAAN,MAAA,eAAAqnB,EAAA3iB,OAAAwP,GAAA,EAAAxP,CAAAyP,GAAApT,EAAAqT,KAAA,SAAAkT,EAe2B/oB,EAAayJ,EAAgB0Z,GAfxD,IAAA6F,EAAAC,EAAAC,EAAArf,EAAAsf,EAAAC,EAAA1N,EAAA,OAAA9F,GAAApT,EAAAwT,KAAA,SAAAqT,GAAA,cAAAA,EAAAnT,KAAAmT,EAAAtT,MAAA,cAAAsT,EAAAtT,KAAA,EAgB0B9T,KAAKsmB,YAAYvoB,GAhB3C,OAgBcgpB,EAhBdK,EAAAC,KAmBcL,EAAShnB,KAAKwmB,UAAUc,gBAAgB,SAAWP,EAAM,UAAW,YAEpEE,EAAeD,EAAOO,qBAAqB,KACxC3f,EAAI,EAtBrB,YAsBwBA,EAAIqf,EAAapf,QAtBzC,CAAAuf,EAAAtT,KAAA,aAuBkBoT,EAAaD,EAAarf,IAEjB4f,gBAAkBR,EAAO1P,gBAzBpD,CAAA8P,EAAAtT,KAAA,gBAAAsT,EAAAR,OAAA,0BA6BwC,kBAAxBM,EAAWO,SA7B3B,CAAAL,EAAAtT,KAAA,gBAAAsT,EAAAtT,KAAA,GA8BsB9T,KAAK0nB,mBAAmBR,EAAY1f,EAAQ0Z,GA9BlE,eAAAkG,EAAAR,OAAA,+BAmC2B1oB,KADTipB,EAASnnB,KAAKumB,cAAcoB,aAAaT,EAAWO,WAlCtE,CAAAL,EAAAtT,KAAA,gBAoCgB6L,QAAQ3d,MAAR,YAAAqJ,OACgB6b,EAAWO,SAD3B,2CApChBL,EAAAR,OAAA,0BA0CkBnN,EAAO0N,EAAOS,YAAYV,QACThpB,IAAnBgjB,IAAqE,IAArCA,EAAe2G,QAAQpO,EAAK/b,IA3C5E,CAAA0pB,EAAAtT,KAAA,gBAAAsT,EAAAR,OAAA,uBA+CYpf,EAAOU,KAAKuR,GA/CxB,QAsBiD7R,IAtBjDwf,EAAAtT,KAAA,iCAAAsT,EAAA/S,SAAAyS,EAAA9mB,SAAA,gBAAA8nB,EAAAC,EAAAC,GAAA,OAAAnB,EAAAtS,MAAAvU,KAAAwU,YAAA,KAAA1U,IAAA,qBAAAN,MAAA,SAoDQ0nB,EACA1f,EACA0Z,GAEA,IAAMnjB,EAAMmpB,EAAWe,aAAa,OACpC,GAAY,OAARlqB,EACA,MAAM,IAAI0X,MAAM,iDAMpB,IAHA,IAcIyS,EAdEC,EAA8B,GAE9BC,EAAWlB,EAAWK,qBAAqB,WACxC3f,EAAI,EAAGA,EAAIwgB,EAASvgB,OAAQD,IAAK,CACtC,IAEMygB,EAFUD,EAASxgB,GAEFqgB,aAAa,MACrB,OAAXI,GAIJF,EAAkBjgB,KAAKmgB,GAI3B,GAAiC,IAA7BF,EAAkBtgB,OAClBqgB,EAAgBhH,OAEhB,QAAuBhjB,IAAnBgjB,EAA8B,CAC9BgH,EAAgB,GADc,IAAArN,GAAA,EAAAC,GAAA,EAAAC,OAAA7c,EAAA,IAI9B,QAAA8c,EAAAC,EAAqBiG,EAArBhG,OAAAC,cAAAN,GAAAG,EAAAC,EAAAnH,QAAAsH,MAAAP,GAAA,EAAqC,KAA1ByN,EAA0BtN,EAAAxb,MAC7B2oB,EAAkBN,QAAQS,IAAW,GACrCJ,EAAchgB,KAAKogB,IANG,MAAAjN,GAAAP,GAAA,EAAAC,EAAAM,EAAA,YAAAR,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,SAU9BmN,EAAgBC,EAIxB,OAAOnoB,KAAK2mB,SAAS5oB,EAAKyJ,EAAQ0gB,OA7F1C7B,EAAA,YCHakC,GACT,SAAAA,EAAmBC,GAAgE,IAApC/qB,EAAoC+W,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAR,OAAQtQ,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAuoB,GAAAvoB,KAAAwoB,cAAAxoB,KAAAvC,UCC1EgrB,GAAb,oBAAAA,IAAAvkB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAyoB,GAAA,OAAAvkB,OAAAmR,EAAA,EAAAnR,CAAAukB,EAAA,OAAA3oB,IAAA,iBAAAN,MAAA,SAEiCkpB,GAGzB,GAAKA,EAAEC,WAFS,UAEhB,CAIA,GAAID,EAAE7gB,OANU,SAMOA,OAAQ,CAC3B,IAAMqF,EAAQmQ,OAAOqL,EAAEE,UAPX,SAO6B/gB,SACzC,OAAOghB,MAAM3b,QAAShP,EAAYgP,EAGtC,OAAO,KAdf,CAAApN,IAAA,yBAAAN,MAAA,SAkByCkpB,GAGjC,IAFAA,EAAIA,EAAE/R,iBAEG3W,KAAK8oB,qBACV,OAAO9oB,KAAK8oB,qBAAqBJ,KAtB7C,CAAA5oB,IAAA,+BAAAN,MAAA,SA6B+CkpB,GACvC,IAAMnoB,EAAImoB,EAAEK,MAAM,KAElB,KAAIxoB,EAAEsH,OAAS,GAAf,CAMA,IAFA,IAAIL,EAAS,EAEJI,EAAI,EAAGA,EAAIrH,EAAEsH,OAAQD,IAAK,CAC/B,IAAM6J,EAAI4L,OAAO9c,EAAEqH,IACnB,GAAIihB,MAAMpX,GACN,OAGJjK,GAAUiK,EAAIzJ,KAAKub,IAAI,GAAKhjB,EAAEsH,OAASD,EAAI,GAG/C,OAAOJ,OA/CfihB,EAAA,GAAaA,GAkDMK,qBAA4D,CACvEE,EAAG,OACHC,KAAM,OACNC,EAAG,SACHC,OAAQ,SACRC,EAAG,WACHC,SAAU,WACVX,EAAG,OACHY,KAAM,QCtDP,IAAeC,GAAtB,oBAAAA,IAAArlB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAupB,GAAA,OAAArlB,OAAAmR,EAAA,EAAAnR,CAAAqlB,EAAA,EAAAzpB,IAAA,cAAAN,MAAA,SACuBunB,GACf,IAAMtN,EAAOzZ,KAAKwpB,aAEZnB,EAAStB,EAAIkB,aAAa,MAChC,GAAe,OAAXI,EACA,MAAM,IAAI5S,MAAM,qCAEpBgE,EAAK/b,GAAK2qB,EAEV5O,EAAKE,UAAY0D,OAAO0J,EAAIkB,aAAa,eACrCxO,EAAKE,UAAY,GAAKF,EAAKE,UAAY,MACvCF,EAAKE,eAAYzb,GAGrB,IAAMG,EAAO0oB,EAAIkB,aAAa,QAE9BxO,EAAKpb,KAAOA,EAAI,GAAAgN,OAAAnH,OAAAyY,GAAA,EAAAzY,CACNlE,KAAKypB,wBADCvlB,OAAAyY,GAAA,EAAAzY,CAC0B7F,EAAK0qB,MAAM,OAC/C/oB,KAAKypB,uBAEXzpB,KAAK0pB,gBAAgB3C,EAAKtN,GAG1B,IADA,IAAMkQ,EAAc5C,EAAIQ,qBAAqB,KACpC3f,EAAI,EAAGA,EAAI+hB,EAAY9hB,OAAQD,IAAK,CACzC,IAAM4O,EAAUmT,EAAY/hB,GAExB4O,EAAQgR,gBAAkBT,IAI1BvQ,EAAQoT,UAAR,GAAAve,OAAuB0b,EAAI6C,QAA3B,YAKJ5pB,KAAK6pB,aAAarT,EAASiD,GAJvBA,EAAKpY,QAAUrB,KAAK8pB,aAAatT,IAWzC,YAJqBtY,IAAjBub,EAAKpY,UACLoY,EAAKpY,QAAU,IAGZoY,IA3Cf,CAAA3Z,IAAA,uBAAAN,MAAA,WA+CQ,MAAO,KA/Cf,CAAAM,IAAA,eAAAN,MAAA,SAuDyBunB,GAIjB,IAHA,IAAM1lB,EAA2B,GAE3BsoB,EAAc5C,EAAIQ,qBAAqB,KACpC3f,EAAI,EAAGA,EAAI+hB,EAAY9hB,OAAQD,IAAK,CACzC,IAAM4O,EAAUmT,EAAY/hB,GAE5B,GAAI4O,EAAQgR,gBAAkBT,EAA9B,CAIA,IAAMliB,EAAS7E,KAAK+pB,YAAYvT,QACjBtY,IAAX2G,GACAxD,EAAQ6G,KAAKrD,IAIrB,OAAOxD,IAxEf,CAAAvB,IAAA,cAAAN,MAAA,SA2EwBunB,GAChB,IAAM7Z,EAAQub,GAAauB,eAAejD,EAAI6C,SAC9C,QAAc1rB,IAAVgP,EAAJ,CAIA,IAAI+c,EAAoC,OAElCC,EAAanD,EAAIkB,aAAa,UACpC,GAAIiC,EAAY,CACZ,IAAMC,EAAY1B,GAAa2B,uBAAuBF,QAEpChsB,IAAdisB,IACAF,EAAiBE,GAIzB,OAAO,IAAI5B,GAAcrb,EAAO+c,QA5FxCV,EAAA,GCJac,GAAb,SAAAA,IAAAnmB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAqqB,GAAArqB,KACW5B,OAAiB,EAD5B4B,KAEWsqB,kBAFX,GCFaC,GACT,SAAAA,EAAmB/mB,EAAqByP,GAAkB/O,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAuqB,GAAAvqB,KAAAwD,OAAAxD,KAAAiT,WCGjDuX,GAAb,WAKI,SAAAA,IAAetmB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAwqB,GAAAxqB,KAJRwH,YAIO,EAAAxH,KAFNyqB,0BAA4CvsB,EAGhD8B,KAAKwH,OAAS,GANtB,OAAAtD,OAAAmR,EAAA,EAAAnR,CAAAsmB,EAAA,EAAA1qB,IAAA,aAAAN,MAAA,SASsBunB,GACd,OAAQA,EAAI6C,SACR,IAAK,OACD,OAAkC,IAA9B5pB,KAAKyqB,uBAGTzqB,KAAKyqB,sBAAuB,EAE5BzqB,KAAKwH,OAAOU,KAAKlI,KAAK0qB,iBAAiB3D,KAChC,GACX,IAAK,OACD,OAAkC,IAA9B/mB,KAAKyqB,4BAEgCvsB,IAA9B8B,KAAKyqB,sBACZzqB,KAAKwH,OAAOU,KAAK,CAAEoiB,aAAc,GAAIlsB,OAAQ,IAGjD4B,KAAKyqB,sBAAuB,EAC5BzqB,KAAKwH,OAAO,GAAG8iB,aAAapiB,KAAKlI,KAAK2qB,iBAAiB5D,KAChD,GACX,QACI,OAAO,KA9BvB,CAAAjnB,IAAA,mBAAAN,MAAA,SAkC6BgX,GACrB,IAAM8T,EAAkC,GAClCM,EAAc,IAAIP,GAElBjsB,EAASoY,EAAQyR,aAAa,UACrB,OAAX7pB,GAAoByqB,MAAMxL,OAAOjf,IAGjCwsB,EAAYxsB,OAAS,EAFrBwsB,EAAYxsB,OAASif,OAAOjf,GAMhC,IADA,IAAMysB,EAAQrU,EAAQ+Q,qBAAqB,QAClC3f,EAAI,EAAGA,EAAIijB,EAAMhjB,OAAQD,IAAK,CACnC,IAAMkjB,EAAcD,EAAMjjB,GAC1B0iB,EAAapiB,KAAKlI,KAAK2qB,iBAAiBG,IAI5C,OADAF,EAAYN,aAAeA,EACpBM,IApDf,CAAA9qB,IAAA,mBAAAN,MAAA,SAuD6BgX,GACrB,IAAMhT,EAAOgT,EAAQyR,aAAa,QAClC,GAAa,OAATzkB,EACA,MAAM,IAAIiS,MAAM,uCAGpB,GAA4B,OAAxBe,EAAQuU,YACR,MAAM,IAAItV,MAAM,6CAGpB,OAAO,IAAI8U,GAAgB/mB,EAAMgT,EAAQuU,iBAjEjDP,EAAA,GCCsBQ,GAAtB,SAAAC,GAAA,SAAAD,IAAA,IAAArP,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAgrB,GAAA,QAAApP,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA8mB,IAAAhb,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACYqP,kBAAoB,IAAIV,GADpCnrB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA8mB,EAAAC,GAAA/mB,OAAAmR,EAAA,EAAAnR,CAAA8mB,EAAA,EAAAlrB,IAAA,kBAAAN,MAAA,SAG8B2rB,EAAkB1R,GACxC,IAAM2R,EAAeD,EAAQlD,aAAa,uBAC1C,GAAqB,OAAjBmD,EAAuB,CACvB,IAAMC,EAAsBhO,OAAO+N,GACnC,GAAIvC,MAAMwC,GACN,MAAM,IAAI5V,MAAJ,6BAAApK,OAC2B+f,EAD3B,4CAAA/f,OAEEoO,EAAK/b,GAFP,OAOV+b,EAAK6R,oBAAsBD,EAG/B,IAAME,EAAgBJ,EAAQlD,aAAa,iBAC3C,GAAsB,OAAlBsD,EAAwB,CACxB,IAAMC,EAAU/C,GAAagD,6BAA6BF,GAC1D,QAAgBrtB,IAAZstB,EACA,MAAM,IAAI/V,MAAJ,iCAAApK,OAC+BkgB,EAD/B,0BAAAlgB,OAEEoO,EAAK/b,GAFP,OAOV+b,EAAK8R,cAAgBC,OAErB/R,EAAK8R,cAAgB,IA/BjC,CAAAzrB,IAAA,eAAAN,MAAA,SAmC2BgX,EAAkBiD,GACrC,OAAQjD,EAAQoT,SACZ,IAAK,OACL,IAAK,OAED,OADAnQ,EAAKxG,QAAUjT,KAAKkrB,kBAAkB1jB,OAC/BxH,KAAKkrB,kBAAkBQ,WAAWlV,GAGjD,GAAIA,EAAQoT,UAAR,GAAAve,OAAuBoO,EAAKhZ,KAA5B,aAA6C,CAI7C,IAHA,IAAM0mB,EAAS,IAAIqD,GAEbb,EAAcnT,EAAQ+Q,qBAAqB,KACxC3f,EAAI,EAAGA,EAAI+hB,EAAY9hB,OAAQD,IAAK,CACzC,IAAM+jB,EAAahC,EAAY/hB,GAC3B+jB,EAAWnE,gBAAkBhR,GAIjC2Q,EAAOuE,WAAWC,GAItB,OADAlS,EAAKmS,SAAWzE,EAAO3f,QAChB,EAGX,OAAO,MA5DfwjB,EAAA,CAAqEzB,ICA/CsC,GAAtB,SAAAC,GAAA,SAAAD,IAAA,IAAAlQ,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA6rB,GAAA,QAAAjQ,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA2nB,IAAA7b,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MAEWyP,oBAA8B,EAFzCjsB,EAKWksB,mBALX,EAAAlsB,EAOW4T,aAPX,EAAA5T,EAQWusB,cARX,EAAAvsB,EAUWwmB,UAA6C,SAAAzJ,GAChD,OAAO3X,KAAE+Z,KAAKnf,EAAK4T,QAAS,SAAApR,GAAC,OAAI4C,KAAE+Z,KAAK3c,EAAEyoB,aAAc,SAAAjlB,GAAC,OAAIA,EAAE7B,OAAS4Y,EAAO2P,cAXvF1sB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA2nB,EAAAC,GAAAD,EAAA,CCAA,SAAAG,IAAA9nB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAgsB,GAAAhsB,KACStC,QADT,EAAAsC,KAES2Z,eAFT,EAAA3Z,KAGSqB,aAHT,EAAArB,KAIS3B,UAJT,EAAA2B,KAKS6lB,eALT,EAAA7lB,KAO2BS,UAP3B,ICHawrB,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAtQ,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAisB,GAAA,QAAArQ,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA+nB,IAAAjc,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,WADnCpB,EAEW8sB,YAAsB,EAFjC9sB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA+nB,EAAAC,GAAAD,EAAA,CAA8BJ,ICCjBO,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAloB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAosB,GAAAloB,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAkoB,GAAA7X,MAAAvU,KAAAwU,YAAA,OAAAtQ,OAAA8X,EAAA,EAAA9X,CAAAkoB,EAAAC,GAAAnoB,OAAAmR,EAAA,EAAAnR,CAAAkoB,EAAA,EAAAtsB,IAAA,aAAAN,MAAA,WAEQ,OAAO,IAAIysB,KAFnB,CAAAnsB,IAAA,kBAAAN,MAAA,SAK8B2rB,EAAkB1R,GACxCvV,OAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAAkoB,EAAAG,WAAA,kBAAAvsB,MAAAgQ,KAAAhQ,KAAsBmrB,EAAS1R,GAE/B,IAAM+S,EAAOrB,EAAQlD,aAAa,MAClCxO,EAAK0S,WAAsB,OAATK,GAAuBxsB,KAAKysB,OAAOD,KAT7D,CAAA1sB,IAAA,SAAAN,MAAA,SAYqBA,GACb,MAAc,SAAVA,QAIUtB,IAAVsB,MAIMA,MArBlB4sB,EAAA,CAAoCpB,ICDvB0B,GAAb,SAAAR,GAAA,SAAAQ,IAAA,IAAA/Q,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA0sB,GAAA,QAAA9Q,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAwoB,IAAA1c,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,YADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAwoB,EAAAR,GAAAQ,EAAA,CAA+Bb,ICClBc,GAAb,SAAAN,GAAA,SAAAM,IAAA,OAAAzoB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA2sB,GAAAzoB,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAyoB,GAAApY,MAAAvU,KAAAwU,YAAA,OAAAtQ,OAAA8X,EAAA,EAAA9X,CAAAyoB,EAAAN,GAAAnoB,OAAAmR,EAAA,EAAAnR,CAAAyoB,EAAA,EAAA7sB,IAAA,aAAAN,MAAA,WAEQ,OAAO,IAAIktB,KAFnB,CAAA5sB,IAAA,kBAAAN,MAAA,SAK8B2rB,EAAkB1R,GACxCvV,OAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAAyoB,EAAAJ,WAAA,kBAAAvsB,MAAAgQ,KAAAhQ,KAAsBmrB,EAAS1R,GAGT,OADA0R,EAAQlD,aAAa,mBAEvCxO,EAAK8R,cAAgB,SAVjCoB,EAAA,CAAqC3B,ICAxB4B,GAAb,SAAAP,GACI,SAAAO,EAAoBC,GAAsB,IAAAxtB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA4sB,IACtCvtB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA0oB,GAAA5c,KAAAhQ,QADsC6sB,UAAAxtB,EAD9C,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA0oB,EAAAP,GAAAnoB,OAAAmR,EAAA,EAAAnR,CAAA0oB,EAAA,EAAA9sB,IAAA,aAAAN,MAAA,WAMQ,OAAO,IAAIQ,KAAK6sB,YANxBD,EAAA,CAA+D5B,ICDlD8B,GAAb,SAAAZ,GAAA,SAAAY,IAAA,IAAAnR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA8sB,GAAA,QAAAlR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA4oB,IAAA9c,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,WADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA4oB,EAAAZ,GAAAY,EAAA,CAA8BjB,ICAjBkB,GAAb,SAAAb,GAAA,SAAAa,IAAA,IAAApR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA+sB,GAAA,QAAAnR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA6oB,IAAA/c,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,gBADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA6oB,EAAAb,GAAAa,EAAA,CAAmClB,ICAtBmB,GAAb,SAAAd,GAAA,SAAAc,IAAA,IAAArR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAgtB,GAAA,QAAApR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA8oB,IAAAhd,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,WADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA8oB,EAAAd,GAAAc,EAAA,CAA8BnB,ICAjBoB,GAAb,SAAAf,GAAA,SAAAe,IAAA,IAAAtR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAitB,GAAA,QAAArR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAA+oB,IAAAjd,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,eADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA+oB,EAAAf,GAAAe,EAAA,CAAkCpB,ICArBqB,GAAb,SAAAhB,GAAA,SAAAgB,IAAA,IAAAvR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAktB,GAAA,QAAAtR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAgpB,IAAAld,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,WADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAgpB,EAAAhB,GAAAgB,EAAA,CAA8BrB,ICAjBsB,GAAb,SAAAjB,GAAA,SAAAiB,IAAA,IAAAxR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAmtB,GAAA,QAAAvR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAipB,IAAAnd,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,UADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAipB,EAAAjB,GAAAiB,EAAA,CAAwCtB,ICA3BuB,GAAb,SAAAlB,GAAA,SAAAkB,IAAA,IAAAzR,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAotB,GAAA,QAAAxR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAkpB,IAAApd,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,YADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAkpB,EAAAlB,GAAAkB,EAAA,CAA+BvB,ICAlBwB,GAAb,SAAAnB,GAAA,SAAAmB,IAAA,IAAA1R,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAqtB,GAAA,QAAAzR,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAmpB,IAAArd,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,gBADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAmpB,EAAAnB,GAAAmB,EAAA,CAAmCxB,ICAtByB,GAAb,SAAApB,GAAA,SAAAoB,IAAA,IAAA3R,EAAAtc,EAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAstB,GAAA,QAAA1R,EAAApH,UAAA3M,OAAAgU,EAAA,IAAApU,MAAAmU,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtH,UAAAsH,GAAA,OAAAzc,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,MAAA2b,EAAAzX,OAAA6L,EAAA,EAAA7L,CAAAopB,IAAAtd,KAAAuE,MAAAoH,EAAA,CAAA3b,MAAAqL,OAAAwQ,MACoBpb,KAAe,kBADnCpB,EAAA,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAopB,EAAApB,GAAAoB,EAAA,CAAqCzB,ICcxB0B,GAA8B,CACvCtB,SAAU,kBAAM,IAAIG,IACpBM,UAAW,kBAAM,IAAIC,IACrBG,SAAU,kBAAM,IAAIF,GAAgCE,KACpDC,cAAe,kBAAM,IAAIH,GAAqCG,KAC9DC,SAAU,kBAAM,IAAIJ,GAAgCI,KACpDC,aAAc,kBAAM,IAAIL,GAAoCK,KAC5DC,SAAU,kBAAM,IAAIN,GAAgCM,KACpDM,QAAS,kBAAM,IAAIZ,GAA0CO,KAC7DC,UAAW,kBAAM,IAAIR,GAAiCQ,KACtDC,cAAe,kBAAM,IAAIT,GAAqCS,KAC9DC,gBAAiB,kBAAM,IAAIV,GAAuCU,MCrBhEG,GAAS,IAAIpH,gDADG,ICDtB,WAGI,SAAAqH,IAAexpB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA0tB,GAAA1tB,KAFPutB,aAEM,EACVvtB,KAAKutB,QAAUA,GAJvB,OAAArpB,OAAAmR,EAAA,EAAAnR,CAAAwpB,EAAA,EAAA5tB,IAAA,eAAAN,MAAA,SAOwByc,GAChB,GAAIA,KAAYjc,KAAKutB,QACjB,OAAOvtB,KAAKutB,QAAQtR,SAThCyR,EAAA,oDDIA,SAAA7Z,EAA2B9V,GAA3B,IAAA4vB,EAAA,OAAAha,GAAApT,EAAAwT,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAF,MAAA,cAAAE,EAAAF,KAAA,EAC2B8Z,KAAMtB,IAAIvuB,GADrC,cACU4vB,EADV3Z,EAAAqT,KAAArT,EAAA4S,OAAA,SAEW+G,EAASplB,MAFpB,wBAAAyL,EAAAK,SAAAR,6BAKO,SAAega,GAAtB/F,GAAA,OAAAgG,GAAAvZ,MAAAvU,KAAAwU,0DAAO,SAAAsS,EAAyB/oB,GAAzB,OAAA4V,GAAApT,EAAAwT,KAAA,SAAAqT,GAAA,cAAAA,EAAAnT,KAAAmT,EAAAtT,MAAA,cAAAsT,EAAAR,OAAA,SACI6G,GAAOM,YAAYhwB,IADvB,wBAAAqpB,EAAA/S,SAAAyS,6BEXQ,IAAAkH,GAAA,CACXC,IAAK,CACDC,sFCGKC,GAAoE,SAC7EC,EACAC,EAF6E9rB,GAAA,IAG3E0rB,EAH2E1rB,EAG3E0rB,IAH2E,OAK7EG,EAAQE,KACJ1pB,aAAO2pB,qBAAWhwB,EAAgBkD,UAClC+sB,aAAS,SAAA9hB,GAAM,OACXwH,aAAK+Z,EAAIC,YAAYL,UAAUnhB,EAAOnP,UAAU+wB,KAC5CjxB,aAAI,SAAAc,GAAK,OAAII,EAAgBkwB,QAAQ,CAAE1wB,IAAK2O,EAAOnP,QAASY,YAC5DuwB,aAAW,SAACC,GAAD,OACPC,aAAGrwB,EAAgBswB,QAAQ,CAAE9wB,IAAK2O,EAAOnP,QAASoxB,wCClBhDG,GAAtB,SAAAA,IAAA5qB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA8uB,ICEaC,GAAb,SAAAC,GACI,SAAAD,EAAmBE,GAAc,IAAA5vB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA+uB,IAC7B1vB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA6qB,GAAA/e,KAAAhQ,QAD6BivB,OAAA5vB,EADrC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA6qB,EAAAC,GAAAD,EAAA,CAAqCD,ICAfI,GAAtB,SAAAF,GAAA,SAAAE,IAAA,OAAAhrB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAkvB,GAAAhrB,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAgrB,GAAA3a,MAAAvU,KAAAwU,YAAA,OAAAtQ,OAAA8X,EAAA,EAAA9X,CAAAgrB,EAAAF,GAAAE,EAAA,CAA+CJ,ICClCK,GAAb,SAAAC,GACI,SAAAD,IAAuF,IAAA9vB,EAApEmpB,EAAoEhU,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAA9C,EAAU/W,EAAoC+W,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAR,OAAQ,OAAAtQ,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAmvB,IACnF9vB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAirB,GAAAnf,KAAAhQ,QADmFwoB,cAAAnpB,EAAA5B,SAAA4B,EAD3F,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAirB,EAAAC,GAAAD,EAAA,CAA6CD,ICDhCG,GAAb,SAAAD,GACI,SAAAC,IAAsE,IAAAhwB,EAAnDiwB,EAAmD9a,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjC,EAAU+a,EAAuB/a,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAH,EAAG,OAAAtQ,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAqvB,IAClEhwB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAmrB,GAAArf,KAAAhQ,QADkEsvB,UAAAjwB,EAAAkwB,YAAAlwB,EAD1E,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAmrB,EAAAD,GAAAC,EAAA,CAAkCH,ICArBM,GAAb,SAAAR,GACI,SAAAQ,EAAmBC,GAAyB,IAAApwB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAwvB,IACxCnwB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAsrB,GAAAxf,KAAAhQ,QADwCyvB,UAAApwB,EADhD,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAsrB,EAAAR,GAAAQ,EAAA,CAA0CV,IAU7BY,GAAb,WACI,SAAAA,EAAmB7oB,EAAoBD,GAAc1C,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA0vB,GAAA1vB,KAAA6G,MAAA7G,KAAA4G,MADzD,OAAA1C,OAAAmR,EAAA,EAAAnR,CAAAwrB,EAAA,EAAA5vB,IAAA,WAAAN,MAAA,WAIQ,OAAOQ,KAAK4G,IAAM5G,KAAK6G,QAJ/B6oB,EAAA,GAQaC,GAAb,WACI,SAAAA,EAAmB/nB,GAAY1D,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA2vB,GAAA3vB,KAAA4H,IADnC,OAAA1D,OAAAmR,EAAA,EAAAnR,CAAAyrB,EAAA,EAAA7vB,IAAA,WAAAN,MAAA,WAIQ,OAAO,MAJfmwB,EAAA,GClBaC,GAAb,SAAAZ,GACI,SAAAY,EAAmB/E,GAAiB,IAAAxrB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA4vB,IAChCvwB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA0rB,GAAA5f,KAAAhQ,QADgC6qB,QAAAxrB,EADxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA0rB,EAAAZ,GAAAY,EAAA,CAAwCd,ICA3Be,GAAb,SAAAb,GACI,SAAAa,EACWC,EACAC,EACAC,GACT,IAAA3wB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA6vB,IACExwB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA2rB,GAAA7f,KAAAhQ,QADF8vB,aAAAzwB,EAAA0wB,WAAA1wB,EAAA2wB,wBAAA3wB,EALN,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA2rB,EAAAb,GAAAa,EAAA,CAAkDf,ICArCmB,GAAb,SAAAb,GAAA,SAAAa,IAAA,OAAA/rB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAiwB,GAAA/rB,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA+rB,GAAA1b,MAAAvU,KAAAwU,YAAA,OAAAtQ,OAAA8X,EAAA,EAAA9X,CAAA+rB,EAAAb,GAAAa,EAAA,CAAiDf,ICepCgB,GAAb,oBAAAA,IAAAhsB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAkwB,GAAA,OAAAhsB,OAAAmR,EAAA,EAAAnR,CAAAgsB,EAAA,EAAApwB,IAAA,SAAAN,MAAA,SACWkpB,GACH,IAAMlhB,EAAyB,GAE3B0F,EAAQ,EACRijB,EAAiB,EAErB,EAAG,CACC,GCzBwB,KDyBpBzH,EAAExb,GAA+B,CAC7BijB,IAAmBjjB,GACnB1F,EAAOU,KAAK,IAAI6mB,GAAgBrG,EAAEE,UAAUuH,EAAgBjjB,KAGhE,IAAMkjB,EAAQpwB,KAAKqwB,UAAU3H,EAAGxb,EC7Bd,KD8BlBA,EAAQkjB,EAAMljB,MAEd1F,EAAOU,KAAKlI,KAAKswB,sBAAsBF,EAAM5wB,YAC1C,IC/BuB,MD+BnBkpB,EAAExb,GAwBT,SAvBA,GAAIA,EAAQ,GC/BsB,MD+BjBwb,EAAExb,EAAQ,GAA0C,CAG7DijB,MADJjjB,GAEI1F,EAAOU,KAAK,IAAI6mB,GAAgBrG,EAAEE,UAAUuH,EAAgBjjB,KAGhEA,IACA,IAAM+F,EAAUjT,KAAKqwB,UAAU3H,EAAGxb,ECtCd,KDuCpBA,EAAQ+F,EAAQ/F,MAEhB1F,EAAOU,KAAKlI,KAAKuwB,6BAA6Btd,EAAQzT,YACnD,CACC2wB,IAAmBjjB,GACnB1F,EAAOU,KAAK,IAAI6mB,GAAgBrG,EAAEE,UAAUuH,EAAgBjjB,KAGhE,IAAM+F,EAAUjT,KAAKqwB,UAAU3H,EAAGxb,EC/Cd,KDgDpBA,EAAQ+F,EAAQ/F,MAEhB1F,EAAOU,KAAKlI,KAAKwwB,6BAA6Bvd,EAAQzT,SAM9D2wB,EAAiBjjB,UACVA,EAAQwb,EAAE7gB,QAMrB,OAJIsoB,IAAmBzH,EAAE7gB,QACrBL,EAAOU,KAAK,IAAI6mB,GAAgBrG,EAAEE,UAAUuH,KAGzC3oB,IAnDf,CAAA1H,IAAA,wBAAAN,MAAA,SAsDiCyT,GAGzB,IAFAA,EAAUA,EAAQ0D,eAENgS,WCnEkB,UDmEiB,CAM3C,IAII8H,EAJEC,EAAY,IAAIvB,GAEhBwB,EAAiB1d,EAAQ4U,QCzEI,KD4EnC,IAAwB,IAApB8I,EACAF,EAAYxd,MACT,CACHwd,EAAYxd,EAAQ2V,UAAU,EAAG+H,GAEjC,IAAMC,EAAe3d,EAAQ2V,UAAU+H,EAAiB,GAClDlzB,EAASgrB,GAAa2B,uBAAuBwG,GACnD,QAAe1yB,IAAXT,EACA,MAAM,IAAIgY,MAAJ,uDAAApK,OACqD4H,IAI/Dyd,EAAUjzB,OAASA,EAIvB,OADAizB,EAAUlI,YAAcxoB,KAAK6wB,iBAAiBJ,GACvCC,EAGX,GAAIzd,EAAQ0V,WCjGgB,QDiGiB,CACzC,IAGImI,EAHEC,EAAe,IAAI1B,GACnBsB,EAAiB1d,EAAQ4U,QClGI,KDqGnC,IAAwB,IAApB8I,EACAG,EAAU7d,OAIV,GAFA6d,EAAU7d,EAAQ2V,UAAU,EAAG+H,GAC/BI,EAAazB,QAAUjS,OAAOpK,EAAQ2V,UAAU+H,EAAiB,IAC7D9H,MAAMkI,EAAazB,SACnB,MAAM,IAAI7Z,MAAJ,uBAAApK,OAAiCylB,EAAjC,2BAId,GAAIA,EAAQjpB,OChHY,ODgHiBA,SACrCkpB,EAAaxB,UAAYlS,OAAOyT,EAAQlI,UCjHpB,ODiHkD/gB,SAClEghB,MAAMkI,EAAaxB,YACnB,MAAM,IAAI9Z,MAAJ,sBAAApK,OAAgCylB,EAAhC,2BAId,OAAOC,EAGX,MCxHmC,wBDwH/B9d,EACO,IAAIgd,GAGR,IAAIlB,GAAgB9b,KArHnC,CAAAnT,IAAA,+BAAAN,MAAA,SAwHwCyT,GAMhC,GAD2B,aAAa+d,KAAK/d,GACrB,CACpB,IAAMwc,EAAUzvB,KAAKixB,iBAAiBhe,GACtC,OAAO,IAAIuc,GAAqBC,GAGpC,IAAM5E,EAAQ7qB,KAAKkxB,YAAYje,EAAS,KACxC,OAAO,IAAI2c,GAAmB/E,KApItC,CAAA/qB,IAAA,mBAAAN,MAAA,SAuI4ByT,GAQpB,IAPA,IAAMzL,EAAyB,GAC3B2pB,EAAqC,KAErCC,EAAc,EACdC,GAAe,EAEfzpB,EAAI,IACK,CACT,KAAOA,EAAIqL,EAAQpL,OAAQD,IAAK,CAC5B,IAAMlD,EAAIuO,EAAQrL,GAElB,GAAKihB,MAAMxL,OAAO3Y,IAAlB,CAIA,GAAU,MAANA,EAAJ,CAWA,GAAU,MAANA,EACA,MAGJ,MAAM,IAAI+Q,MAAM,4BAA8B/Q,GAd1C,GAAI2sB,EACA,MAAM,IAAI5b,MAAM,gDAEpB4b,GAAe,EAEfF,EAAgB,IAAIzB,GAAYrS,OAAOpK,EAAQ2V,UAAUwI,EAAaxpB,IAAK,GAC3EwpB,EAAcxpB,EAAI,GAW1B,GAAIA,IAAMwpB,EACN,MAAM,IAAI3b,MAAJ,qCAAApK,OAA+CzD,EAA/C,gBAAAyD,OAA+D4H,EAA/D,MAGV,IAAMqe,EAAMjU,OAAOpK,EAAQ2V,UAAUwI,EAAaxpB,IASlD,GARIypB,EACCF,EAA8BvqB,IAAM0qB,EAErCH,EAAgB,IAAIxB,GAAa2B,GAGrC9pB,EAAOU,KAAKipB,GAERvpB,IAAMqL,EAAQpL,OACd,MAGJspB,EAAgB,KAChBE,GAAe,EACfD,IAAgBxpB,EAGpB,OAAOJ,IA/Lf,CAAA1H,IAAA,cAAAN,MAAA,SAkMuBA,EAAe+xB,GAI9B,IAHA,IAAIC,EAAa,EACbhqB,EAAmB,GAEhBhI,EAAMqI,OAAS2pB,EAAa,GAAG,CAClC,IAAIC,GAAe,EAEO,MAAtBjyB,EAAMgyB,KACNC,GAAe,EACfD,KAGJ,IAAI5pB,EAAI4pB,EACR,EAAG,CACC,GAAIhyB,EAAMoI,KAAO2pB,EAAW,CACxB,GAAIE,EAAc,SAElBjqB,EAAOU,KAAK1I,EAAMopB,UAAU4I,EAAY5pB,IACxC4pB,EAAa5pB,EAAI,EACjB,MAGJ,GAAgB,KAAZpI,EAAMoI,GAAW,CACjB,IAAK6pB,EACD,SAGJ,GAAI7pB,GAAKpI,EAAMqI,OAAS,EAGpB,OADAL,EAAOU,KAAK1I,EAAMopB,UAAU4I,EAAY5pB,GAAG8pB,QAAQ,KAAM,MAClDlqB,EAGX,IAAMmqB,EAAWnyB,EAAMoI,EAAI,GAC3B,GAAgB,KAAZ+pB,EAAiB,CACjB/pB,IACA,SAGJ,GAAI+pB,GAAYJ,EACZ,MAAM,IAAI9b,MAAM,qDAEpBjO,EAAOU,KAAK1I,EAAMopB,UAAU4I,EAAY5pB,GAAG8pB,QAAQ,KAAM,MACzDF,EAAa5pB,EAAI,EACjB,MAGJ,GAAIA,GAAKpI,EAAMqI,OAAS,EAAG,CACvB,GAAI4pB,EACA,MAAM,IAAIhc,MAAM,kCAIpB,OADAjO,EAAOU,KAAK1I,EAAMopB,UAAU4I,EAAY5pB,EAAI,IACrCJ,WAEJI,EAAIpI,EAAMqI,QAGzB,OAAOL,IA5Pf,CAAA1H,IAAA,+BAAAN,MAAA,SA+PwCyT,GAChC,IAAM2e,EAAW,IAAI/B,GAA6B,IAE5CgC,EAAgB5e,EAAQ4U,QCvQO,KDwQ/BiK,EAAY7e,EAAQ4U,QCvQY,KDuRtC,OAdmB,IAAfiK,IACAF,EAAS5B,sBAAwBhwB,KAAK6wB,iBAClC5d,EAAQ2V,UAAUkJ,EAAY,IAElC7e,EAAUA,EAAQ2V,UAAU,EAAGkJ,KAGZ,IAAnBD,EACAD,EAAS9B,WAAa7c,GAEtB2e,EAAS7B,SAAW9c,EAAQ2V,UAAU,EAAGiJ,GACzCD,EAAS9B,WAAa7c,EAAQ2V,UAAUiJ,EAAgB,EAAG5e,EAAQpL,SAGhE+pB,IAnRf,CAAA9xB,IAAA,mBAAAN,MAAA,SAsR4BA,GACpB,GAAIA,EAAMqI,OCjSoB,SDiSWA,OAAQ,CAC7C,IAAMqF,EAAQmQ,OAAO7d,EAAMopB,UClSD,SDkSiC/gB,SAC3D,GAAIghB,MAAM3b,GACN,MAAM,IAAIuI,MAAJ,wBAAApK,OAAkC7L,EAAlC,2BAGV,OAAO0N,EAGX,OAAO,IAhSf,CAAApN,IAAA,YAAAN,MAAA,SAoSQA,EACA0N,EACA6kB,GAKA,IAHA,IAAMlqB,EAASrI,EAAMqI,OACf2pB,EAAatkB,IAEVA,EAAQrF,GAAQ,CACrB,IAAMmqB,EAAOxyB,EAAM0N,GAEnB,GC7TsB,OD6TlB8kB,GAKJ,GAAIA,IAASD,EAAS,CAClB7kB,IACA,YANAA,IAUR,MAAO,CAAEA,QAAO1N,MAAOA,EAAMopB,UAAU4I,EAAa,EAAGtkB,EAAQ,QAzTvEgjB,EAAA,GEJa+B,GAAb,oBAAAA,IAAA/tB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAiyB,GAAA,OAAA/tB,OAAAmR,EAAA,EAAAnR,CAAA+tB,EAAA,OAAAnyB,IAAA,qBAAAN,MAAA,SACqC0yB,EAA2B3U,GACxD,IAAM4U,EAAkB,IAAI1qB,MAEtBpG,EAAUoD,KAAE2tB,QACdF,EACKttB,OAAO,SAAA/C,GAAC,OAAIA,aAAastB,KACzB9xB,IAAI,SAAAwE,GAAC,OAAIA,IACd,eAGJ,IAAK,IAAM/B,KAAOuB,EACVA,EAAQgxB,eAAevyB,IAAM,WAC7B,IAAM+E,EAASxD,EAAQvB,GAAK,GAExBmqB,EAAiBplB,EAAOpH,OAE5B,GAAuB,SAAnBwsB,EAA2B,CAC3B,IAAMqI,EAAc/U,EAAevY,KAC/B,SAAAnD,GAAC,OAAIA,EAAE2mB,cAAgB3jB,EAAO2jB,mBAEdtqB,IAAhBo0B,IACArI,EAAiBqI,EAAY70B,QAIrC00B,EAAgBjqB,KAAK,CAAEsgB,YAAa3jB,EAAO2jB,YAAa/qB,OAAQwsB,IAdnC,GAkBrC,OAAOkI,IA9Bf,CAAAryB,IAAA,kBAAAN,MAAA,SAiCkC0yB,GAC1B,IAAMK,EAAO9tB,KAAE2tB,QACXF,EAAUttB,OAAO,SAAA/C,GAAC,OAAIA,aAAawtB,KAAchyB,IAAI,SAAAwE,GAAC,OAAIA,IAC1D,aAEJ,OAAOqC,OAAOgD,OAAOqrB,GAAMl1B,IAAI,SAAAwE,GAAC,OAAIA,EAAE,OAtC9C,CAAA/B,IAAA,SAAAN,MAAA,SA0CQ0yB,EACA7wB,EACAkxB,EACAnsB,EACAnG,EACAuyB,EACAxd,GAEA,IAAIxN,EAAS,GACTirB,EAAqD,KAFnD5X,GAAA,EAAAC,GAAA,EAAAC,OAAA7c,EAAA,IAIN,QAAA8c,EAAAC,EAAuBiX,EAAvBhX,OAAAC,cAAAN,GAAAG,EAAAC,EAAAnH,QAAAsH,MAAAP,GAAA,EAAkC,KAAvB+W,EAAuB5W,EAAAxb,MAC9B,GAAIoyB,aAAoB7C,GACpBvnB,GAAUoqB,EAAS3C,UAChB,GAAI2C,aAAoBzC,GACvBna,EAAQ0d,kBACRlrB,GAAU,MAEdA,GAAUnG,EAAQuwB,EAASpJ,aAAahrB,KACpCwX,EAAQ0d,kBACRlrB,GAAU,MAGdirB,EAAqBb,OAClB,GAAIA,aAAoBvC,GAAc,CACrCra,EAAQ2d,WACRnrB,GAAU,MAGd,IAAMorB,EAAML,EAAKX,EAASrC,WAEtB/nB,GADQ,IAARorB,EACU3yB,EAAU,UAEd,GAAAoL,OAAOunB,EAAP,KAAAvnB,OAAcpL,EAAU,SAG9B+U,EAAQ2d,WACRnrB,GAAU,WAEX,GAAIoqB,aAAoB/B,GAA8B,CACzD,IAAIgD,OAAwB,EAC5B,QAAuC30B,IAAnC0zB,EAAS5B,sBACT6C,EAAmBjB,EAAS5B,2BACzB,GAA2B,OAAvByC,EACPI,EAAmBJ,EAAmBjK,gBACnC,CACH,IAAMsK,EAAa5uB,OAAOoS,KAAKjV,GAC/B,GAA0B,IAAtByxB,EAAWjrB,OACX,SAGJgrB,EAAmBxV,OAAOyV,EAAW,IAGzC,IACM7D,EAAyB,WADhB5tB,EAAQwxB,GACHp1B,OAAsBm0B,EAAS9B,WAAa8B,EAAS7B,cAC5D7xB,IAAT+wB,IACAznB,GAAUynB,QAEX,GAAI2C,aAAoBhC,GAAoB,CAE/CpoB,GADagrB,EAAU9X,qBAAqBkX,EAAS/G,MAAO,kBAAM,SAE/D,GAAI+G,aAAoBpC,GAAsB,CACjD,IAAMvW,EAASuZ,EAAU9X,qBAAqBkX,EAASnC,QAAS,SAAA5tB,GAAC,OAAIA,EAAEkxB,aACvE,QAAe70B,IAAX+a,EACA,SAGJ,GAAIA,aAAkByW,GAGlBloB,GADIyR,EAAOpS,IAAMmB,KAAKC,OAAOgR,EAAOrS,IAAMqS,EAAOpS,KAAO2rB,EAAU5P,kBAE3D3J,aAAkB0W,KACzBnoB,GAAUyR,EAAOrR,QAEdgqB,aAAoB3B,KAC3BzoB,GAAUpB,IArEZ,MAAAiV,GAAAP,GAAA,EAAAC,EAAAM,EAAA,YAAAR,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAyEN,OAAOvT,MA1HfyqB,EAAA,GCMsBe,GAAtB,SAAAC,GAII,SAAAD,EAAsBE,EAAwBjX,EAAkB9G,GAAmB,IAAA9V,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAgzB,IAC/E3zB,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA8uB,GAAAhjB,KAAAhQ,KAAMic,EAAU9G,KAD+D+d,aAAA7zB,EAJvF,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA8uB,EAAAC,GAAA/uB,OAAAmR,EAAA,EAAAnR,CAAA8uB,EAAA,EAAAlzB,IAAA,iBAAAN,MAAA,SAQ6Bia,EAAaD,GAClC,IAAMgZ,EAAYW,KACZ3rB,EAAS,IAAIC,MAEbwnB,EAAOjvB,KAAKozB,WAAWZ,EAAW/Y,GAJ0B4Z,EAKnCrzB,KAAKszB,WAAWrE,EAAMxV,EAAM,KAAM+Y,GAAzDe,EAL0DF,EAK1DE,UAAWlyB,EAL+CgyB,EAK/ChyB,QAEbnC,EAAQc,KAAKwzB,gBAAgBD,EAAW9Z,EAAMpY,EAASmxB,GAQ7D,GAPAhrB,EAAOU,KACHoK,GAAsB,CAClBpT,QACAwW,SAAW8c,EAA8B9c,SAAS6E,mBAItD9V,KAAE+Z,KAAK/E,EAAKmS,WAER5jB,KAAKyS,UAAYhB,EAAK6R,oBAAqB,CAC3C,IAAMmI,EAAM,IAAIpgB,KAChBogB,EAAIle,WAAWke,EAAIje,aAAeiE,EAAK8R,eAEvC/jB,EAAOU,KAAKoK,GAAwBtS,KAAK0zB,eAAela,EAASnY,EAASoyB,KAIlF,OAAOjsB,IAjCf,CAAA1H,IAAA,yBAAAN,MAAA,SAoCqCia,EAAaka,GAC1C,IAAMnB,EAAYW,KAElB,IAAI,IAAAS,EAC0B5zB,KAAK6zB,mBAAmBrB,EAAW/Y,EAAMka,GAA3D1E,EADR2E,EACQ3E,KAAM5tB,EADduyB,EACcvyB,QACNkyB,EAAcvzB,KAAKszB,WAAWrE,EAAMxV,EAAMpY,GAAW,GAAImxB,GAAzDe,UAEFr0B,EAAQc,KAAK8zB,wBAAwBP,EAAW9Z,EAAM+Y,EAAWmB,GACvE,MAAO,CACHrhB,GAAsB,CAClBpT,QACAwW,SAAW8c,EAA8B9c,SAAS6E,mBAG5D,MAAOvY,GAEL,MAAO,CAACsQ,GAA0B7Q,QAAQzB,KAAKkzB,gBApD3D,CAAApzB,IAAA,iBAAAN,MAAA,SAsE6Bga,EAAkBnY,EAA2BoyB,GAClE,MAAO,CACHA,IAAKA,EACLte,UAAWnV,KAAKmV,UAChBsC,aAAc+B,EACdma,MAAO,CAAEnW,eAAgBnc,MA3ErC,CAAAvB,IAAA,aAAAN,MAAA,SA+EyBgzB,EAA+B/a,GAChD,OAAO2b,GAAWZ,EAAW/a,EAAczX,KAAKkzB,cAhFxD,CAAApzB,IAAA,aAAAN,MAAA,SAoFQyvB,EACAxV,EACA+D,EACAgV,GAEA,OAAOc,GAAWrE,EAAMxV,EAAM+D,EAAgBgV,EAAWxyB,KAAKkzB,cAzFtE,CAAApzB,IAAA,qBAAAN,MAAA,SA6FQgzB,EACA/a,EACAkc,GAEA,IASItyB,EATEmC,EAAOxD,KAAKkzB,WAAWliB,aAEvB+iB,EAAYtc,EAAamU,SAAShnB,OAAO,SAAA/C,GAAC,OAC5C4C,KAAE+Z,KAAK3c,EAAEyoB,aAAc,SAAAjlB,GAAC,OAAIA,EAAE7B,KAAKmT,gBAAkBnT,MAEzD,GAAyB,IAArBuwB,EAAUlsB,OACV,MAAM,IAAI4N,MAAM,uBAYpB,OAPIpU,EADA,mBAAoBsyB,EACVA,EAAMnW,oBAENtf,EAKP,CAAE+wB,KAFOuD,EAAU9X,qBAAqBqZ,EAAW,SAAAlyB,GAAC,OAAIA,EAAEzD,SAC5CksB,aAAatlB,KAAK,SAAAnD,GAAC,OAAIA,EAAE2B,OAASA,IAAOyP,QAC/C5R,eAnHvB2xB,EAAA,CCXA,WAII,SAAAgB,EAAsB/X,EAAyB9G,GAAoBjR,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAg0B,GAAAh0B,KAAAic,WAAAjc,KAAAmV,YAAAnV,KAH1DyL,qBAGyD,EAAAzL,KAFlEoV,mBAEkE,EAC9DpV,KAAKoV,cAAgB,CAAC6G,GAL9B,OAAA/X,OAAAmR,EAAA,EAAAnR,CAAA8vB,EAAA,EAAAl0B,IAAA,aAAAN,MAAA,WASQ,IACMga,EADY2Z,KACQc,WAAWj0B,KAAKic,UAE1C,OAAQ3J,GAAkBkH,IAA1BnO,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAuClE,KAAKk0B,eAAe1a,EAAQC,KAAeD,OAZ1F,CAAA1Z,IAAA,qBAAAN,MAAA,SAeuBia,EAAsBka,GACrC,OAAO3zB,KAAKm0B,uBAAuB1a,EAAMA,KAAeka,EAAOla,OAhBvEua,EAAA,IDkIO,SAASV,GACZrE,EACAxV,EACA+D,EACAgV,EACAU,GAEA,IAAMhB,GAAY,IAAIhC,IAAqBkE,OAAOnF,GAG5C5tB,EAAU8xB,GACZX,EAHuBP,GAAcoC,mBAAmBnC,EAAWzY,EAAKpY,SAKxEmc,GAAkB,GAClB/D,EAAKpb,MAGHi2B,EAAerC,GAAcsC,gBAAgBrC,GAE7CsC,EAAkD,GAbR3Z,GAAA,EAAAC,GAAA,EAAAC,OAAA7c,EAAA,IAchD,QAAA8c,EAAAC,EAAqB5Z,EAArB6Z,OAAAC,cAAAN,GAAAG,EAAAC,EAAAnH,QAAAsH,MAAAP,GAAA,EAA8B,KAAnBhW,EAAmBmW,EAAAxb,MAC1Bg1B,EAAe3vB,EAAOqI,OAASrI,EAAOA,QAfM,MAAAwW,GAAAP,GAAA,EAAAC,EAAAM,EAAA,YAAAR,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAkBhD,IAAMwX,EAAoC,GAlBM1V,GAAA,EAAAC,GAAA,EAAAC,OAAA7e,EAAA,IAmBhD,QAAA8e,EAAAC,EAAsBqX,EAAtBpZ,OAAAC,cAAA0B,GAAAG,EAAAC,EAAAnJ,QAAAsH,MAAAyB,GAAA,EAAoC,KAAzB4X,EAAyBzX,EAAAxd,MAChC+yB,EAAKkC,EAAQlF,WAAaiD,EAAUkC,QAAQD,EAAQnF,UApBR,MAAAjU,GAAAyB,GAAA,EAAAC,EAAA1B,EAAA,YAAAwB,GAAA,MAAAI,EAAA3B,QAAA2B,EAAA3B,SAAA,WAAAwB,EAAA,MAAAC,GAuBhD,IAAM3W,EAAsBuuB,GAAMC,WAAW1yB,SAASkE,oBAYtD,MAAO,CAAEmtB,UAVStB,GAAc4C,OAC5B3C,EACAsC,EACAjC,EACAnsB,EACA,SAAAvE,GAAC,OAAIqxB,EAAWjzB,UAAX,sBAAAoL,OAA2CxJ,KAChD2wB,EACA,CAAEE,iBAAiB,EAAMC,UAAU,IAGRtxB,WAG5B,SAAS+xB,GACZZ,EACA/a,EACAyb,GAEA,IAAM1vB,EAAO0vB,EAAWliB,aAElB8jB,EAAiBrd,EAAaxE,QAAQrO,OAAO,SAAA/C,GAAC,OAChD4C,KAAE+Z,KAAK3c,EAAEyoB,aAAc,SAAAjlB,GAAC,OAAIA,EAAE7B,KAAKuxB,sBAAwBvxB,MAG/D,OADgBgvB,EAAU9X,qBAAqBoa,EAAgB,SAAAjzB,GAAC,OAAIA,EAAEzD,SACvDksB,aAAatlB,KAAK,SAAAnD,GAAC,OAAIA,EAAE2B,OAASA,IAAOyP,QEjM7C,IAAA+hB,GAAA,CACX3wB,KAAM,UACN4wB,MAAO,UACPC,KAAM,UACNC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,YAAa,UACbC,MAAO,WACPC,eAAgB,UAChBC,KAAM,YC2BJz2B,GAAgB,CAClBqT,UAAWC,GAA0B7Q,QACrCnC,SAAUgT,GACV7D,UAAW6D,IAuJf,IAAMzB,GAAYnB,aACdxO,YAhKoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,WAClBnR,QAASnC,EAAMgD,SAASb,UAgKpBrC,IAEJmD,qBAzJW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KAAK6B,OAAAkG,GAAA,EAAAlG,CAAA,GtDvCF,CACHuH,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0BsD8B3B,CAEAD,OAAQ,YAEZgjB,cAAcxxB,OAAAkG,GAAA,EAAAlG,CAAA,GtD3CX,CACHuH,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,2BsDqC/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAC,EAAA,EAAAD,CAAA,CACH4E,MAAO,QACPI,aAAc,IACbvF,EAAMS,YAAYC,KAAK,MAAQ,CAC5BwG,SAAU,WAGlB8qB,YAAa,CACTtkB,WAAY,SACZxN,UAAW,IAEf+xB,cAAc1xB,OAAAC,EAAA,EAAAD,CAAA,CACV4C,QAA8B,EAArBnD,EAAMqF,QAAQ6sB,MACtBlyB,EAAMS,YAAY+M,GAAG,MAAQ,CAC1BrK,QAA8B,EAArBnD,EAAMqF,QAAQ6sB,KACvBvzB,MAA4B,GAArBqB,EAAMqF,QAAQ6sB,OAG7BC,yBAA0B,CACtBz1B,QAAS,OACToS,eAAgB,WAChB5O,UAAWF,EAAMqF,QAAQ6sB,UA2HjC10B,IANcuO,CAjBlB,SAA8B/P,GAAc,IAChCgD,EAAmBhD,EAAnBgD,QAASzD,EAAUS,EAAVT,MACjB,OAAc,OAAVA,EACOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAG/BnD,EAAM62B,WACC71B,EAAA,qBAAKiD,UAAWR,EAAQN,MAhGvC,SAA2B1C,GAAc,IAC7BT,EAAuCS,EAAvCT,MAAOmC,EAAgC1B,EAAhC0B,QAASgR,EAAuB1S,EAAvB0S,UAAW1P,EAAYhD,EAAZgD,QAC7BkC,EAASxD,EAAQ2D,KAAK,SAAAnD,GAAC,OAAIA,EAAEnE,KAAOwB,EAAM82B,iBAChD,QAAe93B,IAAX2G,EAEA,OADAwN,EAAUvB,GAAanR,IAChBO,EAAA,0BAGX,IAAM+1B,EAAS,SAACC,GAAD,OACX,IAAIvwB,GAAiBmL,GAAanR,IAAQs2B,OAAOC,EAAUv2B,EAAOkF,IAEhEsxB,EAAczhB,aAAU,CAC1BhO,QAAS,EACT0vB,UAAW,cACXliB,KAAM,CAAExN,QAAS,EAAG0vB,UAAW,qBAGnC,OACIl2B,EAAA,cAAC+U,GAAA,EAASH,IAAV,CAAc1U,MAAO+1B,GACjBj2B,EAAA,cAAC0C,EAAA,EAAD,CAAOO,UAAWR,EAAQizB,eACtB11B,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,KAAK8G,UAAU,MAC/BlL,EAAA,cAACc,EAAA,EAAD,CACItD,GAAG,uCACH6K,KAAM,CAAE/K,KAAMqH,EAAOrH,SAG7B0C,EAAA,qBAAKiD,UAAWR,EAAQmzB,0BACpB51B,EAAA,cAAC0C,EAAA,EAAD,CACI0B,QAAQ,YACRwE,MAAM,UACN1I,MAAO,CAAEiK,YAAa,IACtBtJ,QAAS,kBAAMk1B,EAAO,WAEtB/1B,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,8BAElBwC,EAAA,cAAC0C,EAAA,EAAD,CAAQ0B,QAAQ,YAAYwE,MAAM,YAAY/H,QAAS,kBAAMk1B,EAAO,UAChE/1B,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,gCA4DQ24B,CAAkB12B,IAGrC,SAAnBT,EAAMg3B,SAvDd,SAAuBv2B,GAAc,IACzBgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAEtB0Q,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,6BADlB,IACgDwC,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,0BAA2B,IACrFwC,EAAA,uBACIA,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,8BAK1B,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQ+yB,cAAe30B,QAAS,kBAAMsR,EAAUvB,GAAanR,MACzEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAkBthB,QAASzD,KACrDrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,KAuCvC2mB,CAAc52B,GAjC7B,SAAwBA,GAAc,IAC1BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MACtB0Q,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,uBACIA,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,8BACb,IACLwC,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,0BAJlB,IAI6CwC,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,6BAI/D,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQ+yB,cAAe30B,QAAS,kBAAMsR,EAAUvB,GAAanR,MACzEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAkBthB,QAASzD,KACrDrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,KAmBvC4mB,CAAe72B,KAsBjBgG,GAAb,WAGI,SAAAA,EAAoButB,GAAyBhvB,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA2F,GAAA3F,KAAAkzB,aAAAlzB,KAF7CyL,gBAAkBupB,GAAOM,YAEmBt1B,KAErCmV,UAAY,mBAFyBnV,KAGrCoV,cAAgB,CAAC,WAAY,gBANxC,OAAAlR,OAAAmR,EAAA,EAAAnR,CAAAyB,EAAA,EAAA7F,IAAA,SAAAN,MAAA,SAQkB02B,EAAuB5jB,EAAwBzN,GACzD,IAAM2tB,EAAYW,KACZlX,EAAwB,SAAbia,EAAsB,WAAa,eAC9C1c,EAAUgZ,EAAUyB,WAAWhY,GAC/BxC,EAAOD,EAAQC,KAEfgd,EAAerD,GAAWZ,EAAW/Y,EAAMzZ,KAAKkzB,YAK9CK,EAAcD,GAJZ,QAAAjoB,OAAWrL,KAAKkzB,WAAWjzB,UACjC,kCADM,MAAAoL,OAEJorB,GAIFhd,EACA,CAAC,CAAEvM,MAAO,GAAIrI,WACd2tB,EACAxyB,KAAKkzB,YALDK,UAQRjhB,EAAQ7D,UAAU+K,GAElB,IAAMta,EAA+B,CACjC62B,YAAY,EACZC,eAAgBnxB,EAAOnH,GACvB44B,gBAAiB/C,EACjB2C,YAEJ5jB,EAAQhT,SAAS,CAAEJ,QAAOwW,SAAU8c,EAAU9c,SAAS6E,oBAnC/D,CAAAza,IAAA,aAAAN,MAAA,WAuCQ,IAAMgzB,EAAYkE,KACZ7xB,EAASsuB,GACXX,EACA,CAAC,IAAIjK,GAAc,EAAG,SACtB,GACA,IACF,GAAG1jB,OAEL,MAAO,CACH7E,KAAKV,SACD,CAAEy2B,YAAY,EAAMC,eAAgBnxB,EAAOnH,IAC3C80B,EAAU9c,SAAS6E,oBAlDnC,CAAAza,IAAA,WAAAN,MAAA,SAwDQN,GAEU,IADVwW,EACUlB,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GADiC,KAE3C,OAAOlC,GAAsB,CAAEpT,QAAOwW,eA3D9C,CAAA5V,IAAA,qBAAAN,MAAA,WA+DQ,MAAM,IAAIiW,MAAM,2BA/DxB,CAAA3V,IAAA,SAAAN,MAAA,WAmEQ,OAAOU,EAAA,cAACy2B,GAAD,UAnEfhxB,EAAA,GCtLM3G,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SAuDjC,IAAMoP,GAAYnB,aACdxO,YA7DoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aA8DdxT,IAEJmD,qBAzDW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KvD3BG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0BuDmB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBysB,YAAavkB,GAAkBzN,OAkDnCxC,IANcuO,CApClB,SAA4B/P,GAAc,IAC9BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,uBAItB,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACpB/S,EAAA,cAAC2U,GAAA,OAAD,CACIV,OAAQA,UAAOyiB,OACf1iB,KAAM,CAAEkiB,UAAW,0BACnBS,GAAI,CAAET,UAAW,wBAEhB,SAAAz2B,GAAK,OACFO,EAAA,qBAAKE,MAAOT,GACPiQ,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CACIpD,SAAUzS,EAAMo3B,gBAChBthB,QAASzD,KAEbrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,UAmBrDnK,GAAb,SAAAqxB,GAGI,SAAArxB,EAAYytB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAyF,IAChCpG,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAuB,GAAAuK,KAAAhQ,KAAMkzB,EAAY,WAAY,eAHlCznB,gBAAkBupB,GAAO3wB,KAEWhF,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAuB,EAAAqxB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAAuB,EAAA,EAAA3F,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAAC62B,GAAD,QARf,CAAAj3B,IAAA,kBAAAN,MAAA,SAW8B82B,GACtB,MAAO,CACHA,gBAAiBA,KAb7B,CAAAx2B,IAAA,0BAAAN,MAAA,SAiBsC82B,GAC9B,MAAO,CACHA,gBAAiBA,OAnB7B7wB,EAAA,CAA+ButB,ICrEzBh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SAgDjC,IAAMoP,GAAYnB,aACdxO,YAtDoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAuDdxT,IAEJmD,qBAlDW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KxDxBG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0BwDgB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBysB,YAAavkB,GAAkBzN,OA2CnCxC,IANcuO,CA7BlB,SAA4B/P,GAAc,IAC9BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAE,oBAAA2N,OAAsBnM,EAAM83B,WAAc93B,EAAM+3B,OAAS,QAAU,SAAY,OAIpG,OACI/2B,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,KACpDrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,OAsBhDsnB,GAA2C,CAAC,eAAgB,eAQrD1xB,GAAb,SAAAsxB,GAKI,SAAAtxB,EAAY0tB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAwF,IAChCnG,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAsB,GAAAwK,KAAAhQ,KAAMkzB,EAAY,WAAY,eAL1BiE,kBAI4B,EAAA93B,EAH5BgC,aAG4B,EAAAhC,EAFpCoM,gBAAkBupB,GAAOE,KAKrB71B,EAAK83B,aACDD,GAAwBlvB,KAAK2a,MAAMuU,GAAwBrvB,OAASG,KAAKyS,WAJ7Cpb,EALxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAsB,EAAAsxB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAAsB,EAAA,EAAA1F,IAAA,SAAAN,MAAA,WAaQ,OAAOU,EAAA,cAACk3B,GAAD,QAbf,CAAAt3B,IAAA,aAAAN,MAAA,SAgBegzB,EAA+B/a,GACtC,IAAM4f,EAAQnzB,OAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAAsB,EAAA+mB,WAAA,aAAAvsB,MAAAgQ,KAAAhQ,KAAoBwyB,EAAW/a,GACvC6f,EAAct3B,KAAKkzB,WAAWjzB,UAAhB,eAAAoL,OAAyCrL,KAAKm3B,eAElE,cAAA9rB,OAAeisB,EAAf,MAAAjsB,OAA+BgsB,KApBvC,CAAAv3B,IAAA,qBAAAN,MAAA,SAwBQ+3B,EACA9f,EACAkc,GAC4C,IAAApxB,EAClBoxB,EAAlB6D,EADoCj1B,EACpCi1B,KAAMn2B,EAD8BkB,EAC9BlB,QACN8qB,EAAe1U,EAAf0U,WAGR,MAAO,CAAE8C,KADIjvB,KAAKkzB,WAAWjzB,UAAhB,eAAAoL,OAAyCmsB,EAAzC,KAAAnsB,OAAiD8gB,IAC/C9qB,aAhCvB,CAAAvB,IAAA,kBAAAN,MAAA,SAoCQ82B,EACA7c,EACApY,GAIA,OAFArB,KAAKqB,QAAUA,EAER,CACH21B,YAAY,EACZV,gBAAiBA,EACjBkB,KAAMx3B,KAAKm3B,aACXF,OAAQxd,EAAK0S,cA9CzB,CAAArsB,IAAA,0BAAAN,MAAA,SAkDsC82B,EAAyB7c,EAAiBka,GAExE,MAAO,CACHqD,YAAY,EACZV,gBAAiBA,EACjBkB,KAJa7D,EAAT6D,KAKJP,OAAQxd,EAAK0S,cAxDzB,CAAArsB,IAAA,iBAAAN,MAAA,SA4D6Bia,EAAgBD,GACrC,SAAAnO,OAAAnH,OAAAyY,GAAA,EAAAzY,QAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAAsB,EAAA+mB,WAAA,iBAAAvsB,MAAAgQ,KAAAhQ,KAAgCyZ,EAAMD,IAAtC,CAAgDlH,GAAwB,CACpEmhB,IAAK,IAAIpgB,KACToE,aAAc+B,EACdrE,UAAW,YACXwe,MAAO,CACH6D,KAAMx3B,KAAKm3B,aACX91B,QAASrB,KAAKqB,iBAnE9BmE,EAAA,CAA+BwtB,IC9DzBh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SA6DjC,IAAMoP,GAAYnB,aACdxO,YAnEoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAoEdxT,IAEJmD,qBA/DW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,KzD7BG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0ByDqB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBouB,YAAa,CACTxuB,MAAO,SAEX6sB,YAAavkB,GAAkBzN,OAqDnCxC,IANcuO,CAvClB,SAA4B/P,GAAc,IAC9BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,4BAIhBy4B,EAAczhB,aAAU,CAC1BhO,QAAS,EACT0vB,UAAW,eACXliB,KAAM,CAAExN,QAAS,EAAG0vB,UAAW,mBAGnC,OACIl2B,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,cAAC+U,GAAA,EAASH,IAAV,CAAc1U,MAAO+1B,EAAahzB,UAAWR,EAAQsQ,SAChDrD,EACD1P,EAAA,cAAC0C,EAAA,EAAD,CAAY0B,QAAQ,KAAKnB,UAAWR,EAAQ20B,aACxCp3B,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,MAExDrR,EAAA,qBAAKE,MAAO,CAAE+M,SAAU,aACpBjN,EAAA,cAAC0C,EAAA,EAAD,CACIxC,MAAO,CAAEyD,UAAW,IACpBV,UAAWR,EAAQ20B,YACnBhzB,QAAQ,MAERpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,+BAA+B6K,KAAM,CAAEgqB,KAAMrzB,EAAMqzB,cAqB5E7sB,GAAb,SAAAoxB,GAGI,SAAApxB,EAAYwtB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA0F,IAChCrG,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAAwB,GAAAsK,KAAAhQ,KAAMkzB,EAAY,gBAAiB,oBAHvCznB,gBAAkBupB,GAAOI,UAEW/1B,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAAwB,EAAAoxB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAAwB,EAAA,EAAA5F,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAACu3B,GAAD,QARf,CAAA33B,IAAA,kBAAAN,MAAA,SAYQ82B,EACAoB,EACAC,EACAnF,GAEA,MAAO,CACH8D,gBAAiBA,EACjB/D,KAAMC,EAAUkC,QAAQ,MAnBpC,CAAA50B,IAAA,aAAAN,MAAA,SAuBegzB,EAA+B/a,GACtC,MAAO,MAAAvT,OAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAAwB,EAAA6mB,WAAA,aAAAvsB,MAAAgQ,KAAAhQ,KAAyBwyB,EAAW/a,KAxBnD,CAAA3X,IAAA,0BAAAN,MAAA,SA2BsC82B,GAC9B,MAAO,CACHA,gBAAiBA,EACjB/D,KAAM,OA9BlB7sB,EAAA,CAAoCstB,IC5E9Bh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SAqDjC,IAAMoP,GAAYnB,aACdxO,YA3DoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aA4DdxT,IAEJmD,qBAvDW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,K1D5BG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0B0DoB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBysB,YAAavkB,GAAkBzN,GAC/B2zB,YAAa,CACTxuB,MAAO,aA8Cf3H,IANcuO,CA/BlB,SAAsC/P,GAAc,IACxCgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,iCAItB,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,KACpDrR,EAAA,qBAAKE,MAAO,CAAE+M,SAAU,aACpBjN,EAAA,cAAC0C,EAAA,EAAD,CACIxC,MAAO,CAAEyD,UAAW,IACpBV,UAAWR,EAAQ20B,YACnBhzB,QAAQ,MAERpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,oCAAoC6K,KAAM,CAAEgqB,KAAMrzB,EAAMqzB,cAqBjF3sB,GAAb,SAAAkxB,GAKI,SAAAlxB,EAAYstB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA4F,IAChCvG,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA0B,GAAAoK,KAAAhQ,KAAMkzB,EAAY,UAAW,yBAFjCznB,gBAAkBupB,GAAOQ,eACWn2B,EALxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA0B,EAAAkxB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAA0B,EAAA,EAAA9F,IAAA,SAAAN,MAAA,WAUQ,OAAOU,EAAA,cAAC03B,GAAD,QAVf,CAAA93B,IAAA,aAAAN,MAAA,SAaegzB,EAA+B/a,GACtC,MAAO,MAAAvT,OAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAA0B,EAAA2mB,WAAA,aAAAvsB,MAAAgQ,KAAAhQ,KAAyBwyB,EAAW/a,KAdnD,CAAA3X,IAAA,kBAAAN,MAAA,SAkBQ82B,EACAoB,EACAC,EACAnF,GAEA,MAAO,CACH8D,gBAAiBA,EACjB/D,KAAMC,EAAUkC,QAAQ,MAzBpC,CAAA50B,IAAA,0BAAAN,MAAA,SA6BsC82B,GAC9B,MAAO,CACHA,gBAAiBA,EACjB/D,KAAM,OAhClB3sB,EAAA,CAAyCotB,IC3EnCh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SA6BjC,IAAMoP,GAAYnB,aACdxO,YAnCoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAoCdxT,IAEJmD,qBA/BW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,K3DpBG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0B2DY/BM,QAAShC,GAAiBtN,OA6B9BxC,IANcuO,CAflB,SAA6B/P,GAAc,IAC/BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,OAAc,OAAVA,EACOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAI/BnC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACpB/S,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,SAgBvD1L,GAAb,SAAAixB,GAGI,SAAAjxB,EAAYqtB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA6F,IAChCxG,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA2B,GAAAmK,KAAAhQ,KAAMkzB,EAAY,YAAa,gBAHnCznB,gBAAkBupB,GAAOC,MAEW51B,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA2B,EAAAixB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAA2B,EAAA,EAAA/F,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAAC23B,GAAD,QARf,CAAA/3B,IAAA,kBAAAN,MAAA,SAW8B82B,GACtB,MAAO,CACHA,gBAAiBA,KAb7B,CAAAx2B,IAAA,0BAAAN,MAAA,SAiBsC82B,GAC9B,MAAO,CACHA,gBAAiBA,OAnB7BzwB,EAAA,CAAgCmtB,IClC1Bh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SA0CjC,IAAMoP,GAAYnB,aACdxO,YAhDoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAiDdxT,IAEJmD,qBA5CW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,K5D1BG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0B4DkB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBysB,YAAavkB,GAAkBzN,OAqCnCxC,IANcuO,CAvBlB,SAA6B/P,GAAc,IAC/BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,wBAItB,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,KACpDrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,OAgBzC9J,GAAb,SAAAgxB,GAGI,SAAAhxB,EAAYotB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA8F,IAChCzG,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA4B,GAAAkK,KAAAhQ,KAAMkzB,EAAY,YAAa,gBAHnCznB,gBAAkBupB,GAAOO,MAEWl2B,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA4B,EAAAgxB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAA4B,EAAA,EAAAhG,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAAC43B,GAAD,QARf,CAAAh4B,IAAA,kBAAAN,MAAA,SAW8B82B,GACtB,MAAO,CACHA,gBAAiBA,KAb7B,CAAAx2B,IAAA,0BAAAN,MAAA,SAiBsC82B,GAC9B,MAAO,CACHA,gBAAiBA,OAnB7BxwB,EAAA,CAAgCktB,IC3D1Bh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SA6BjC,IAAMoP,GAAYnB,aACdxO,YAnCoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAoCdxT,IAEJmD,qBA/BW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,K7DpBG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0B6DY/BM,QAAShC,GAAiBtN,OA6B9BxC,IANcuO,CAflB,SAAmC/P,GAAc,IACrCgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,OAAc,OAAVA,EACOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAI/BnC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACpB/S,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,SAgBvDxL,GAAb,SAAA+wB,GAGI,SAAA/wB,EAAYmtB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAA+F,IAChC1G,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA6B,GAAAiK,KAAAhQ,KAAMkzB,EAAY,kBAAmB,sBAHzCznB,gBAAkBupB,GAAOK,YAEWh2B,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA6B,EAAA+wB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAA6B,EAAA,EAAAjG,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAAC63B,GAAD,QARf,CAAAj4B,IAAA,kBAAAN,MAAA,SAW8B82B,GACtB,MAAO,CACHA,gBAAiBA,KAb7B,CAAAx2B,IAAA,0BAAAN,MAAA,SAiBsC82B,GAC9B,MAAO,CACHA,gBAAiBA,OAnB7BvwB,EAAA,CAAsCitB,IClChCh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SA0CjC,IAAMoP,GAAYnB,aACdxO,YAhDoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAiDdxT,IAEJmD,qBA5CW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,K9D1BG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0B8DkB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBysB,YAAavkB,GAAkBzN,OAqCnCxC,IANcuO,CAvBlB,SAAiC/P,GAAc,IACnCgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,4BAItB,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,KACpDrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,OAgBzC5J,GAAb,SAAA8wB,GAGI,SAAA9wB,EAAYktB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAgG,IAChC3G,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA8B,GAAAgK,KAAAhQ,KAAMkzB,EAAY,gBAAiB,oBAHvCznB,gBAAkBupB,GAAOG,UAEW91B,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA8B,EAAA8wB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAA8B,EAAA,EAAAlG,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAAC83B,GAAD,QARf,CAAAl4B,IAAA,kBAAAN,MAAA,SAW8B82B,GACtB,MAAO,CACHA,gBAAiBA,KAb7B,CAAAx2B,IAAA,0BAAAN,MAAA,SAiBsC82B,GAC9B,MAAO,CACHA,gBAAiBA,OAnB7BtwB,EAAA,CAAoCgtB,ICnD9Bh0B,GAAgB,CAClBqT,UAAW7D,GAAkB/M,SA0CjC,IAAMoP,GAAYnB,aACdxO,YAhDoB,SAAChC,GAAD,MAAuB,CAC3CA,MAAOA,EAAMqT,KAAKC,aAiDdxT,IAEJmD,qBA5CW,SAACwB,GAAD,OACXvB,uBAAa,CACTC,K/D5BG,CACHoJ,gBAAiB,cACjB7B,OAAQ,OACRiB,SAAU,GACVxK,QAAS,OACT8E,WAAY,SACZsN,eAAgB,SAChB3J,MAAO,QACP4J,OAAQ,UACRC,8BAA+B,0B+DoB/BM,QAAShC,GAAiBtN,GAC1BiM,OAAO1L,OAAAkG,GAAA,EAAAlG,CAAA,GACAoN,GAAgB3N,GADjB,CAEFuF,aAAc,KAElBysB,YAAavkB,GAAkBzN,OAqCnCxC,IANcuO,CAvBlB,SAA4B/P,GAAc,IAC9BgD,EAA8BhD,EAA9BgD,QAAS0P,EAAqB1S,EAArB0S,UAAWnT,EAAUS,EAAVT,MAC5B,GAAc,OAAVA,EACA,OAAOgB,EAAA,qBAAKiD,UAAWR,EAAQN,OAGnC,IAAMuN,EACF1P,EAAA,cAAC0C,EAAA,EAAD,CAAYO,UAAWR,EAAQiN,OAAQtL,QAAQ,MAC3CpE,EAAA,cAACc,EAAA,EAAD,CAAWtD,GAAG,uBAItB,OACIwC,EAAA,qBAAKiD,UAAWR,EAAQN,KAAMtB,QAAS,kBAAMsR,EAAUvB,GAAanR,MAChEO,EAAA,qBAAKiD,UAAWR,EAAQsQ,SACnBrD,EACD1P,EAAA,cAAC6U,GAAA,EAAD,CAAUpD,SAAUzS,EAAMo3B,gBAAiBthB,QAASzD,KACpDrR,EAAA,qBAAKiD,UAAWR,EAAQgzB,aAAc/lB,OCjDzCqoB,GAAmC,CAC5CxyB,aACAD,aACAE,kBACAC,oBACAC,uBACAC,cACAC,cACAC,oBACAC,kBACAC,UDuDJ,SAAA6wB,GAGI,SAAA7wB,EAAYitB,GAAwB,IAAA7zB,EAAA,OAAA6E,OAAAuF,EAAA,EAAAvF,CAAAlE,KAAAiG,IAChC5G,EAAA6E,OAAA4L,EAAA,EAAA5L,CAAAlE,KAAAkE,OAAA6L,EAAA,EAAA7L,CAAA+B,GAAA+J,KAAAhQ,KAAMkzB,EAAY,WAAY,eAHlCznB,gBAAkBupB,GAAOS,KAEWp2B,EAHxC,OAAA6E,OAAA8X,EAAA,EAAA9X,CAAA+B,EAAA6wB,GAAA5yB,OAAAmR,EAAA,EAAAnR,CAAA+B,EAAA,EAAAnG,IAAA,SAAAN,MAAA,WAQQ,OAAOU,EAAA,cAACg4B,GAAD,QARf,CAAAp4B,IAAA,aAAAN,MAAA,SAWegzB,EAA+B/a,GACtC,IAAIge,EAAIvxB,OAAAooB,GAAA,EAAApoB,QAAA6L,EAAA,EAAA7L,CAAA+B,EAAAsmB,WAAA,aAAAvsB,MAAAgQ,KAAAhQ,KAAoBwyB,EAAW/a,GAKvC,MAJI,cAAcuZ,KAAKyE,KACnBA,GAAc,KAGX,eAAiBA,EAAO,IAAMz1B,KAAKkzB,WAAWjzB,UAAU,6BAjBvE,CAAAH,IAAA,kBAAAN,MAAA,SAoB8B82B,GACtB,MAAO,CACHA,gBAAiBA,KAtB7B,CAAAx2B,IAAA,0BAAAN,MAAA,SA0BsC82B,GAC9B,MAAO,CACHA,gBAAiBA,OA5B7BrwB,EAAA,CAA+B+sB,ICtD3B9d,iBCZG,IAAMijB,GAAmE,SAAA/J,GAAO,OACnFA,EAAQE,KACJ1pB,aAAO2pB,qBAAWjc,GAA0B7Q,UAC5C+sB,aAAS,SAAA3sB,GAAC,OAAI+sB,KAAEra,WAAF,EAAArQ,OAAAyY,GAAA,EAAAzY,CAgBtB,SAAmBgvB,GACf,IAAM5f,EAAM,IAAID,KACZnU,EAAQy1B,GAAMC,WAEZwD,EAAel5B,EAAMqT,KAAKqZ,SAAShnB,OAAO,SAAA/C,GAAC,OAAIA,EAAE4xB,IAAMngB,IAC7D,GAAI8kB,EAAavwB,OAAS,EAAG,CACzB,IAAM+jB,EAAWnnB,KAAE4zB,OAAOD,EAAc,SAAAv2B,GAAC,OAAIA,EAAE4xB,IAAIje,eAAc,GAE3DqX,EAAUoL,GAAgBrM,EAASzW,WACnCmjB,EAAkB,IAAIzL,EAAQqG,GAC9BqF,EAAeD,EAAgBE,mBACjC5M,EAASnU,aACTmU,EAAS+H,OAGb,OAAQrhB,GAAyBsZ,IAAjCvgB,OAAAnH,OAAAyY,GAAA,EAAAzY,CAA+Cq0B,IAGnD,IAAI/F,EAAYkE,GAA4Bx3B,GACtCkJ,EClDH,SAA+BqwB,GAClC,IAAMjxB,EAAS,IAAIC,MAEnB,IAAK,IAAM2D,KAAaqtB,EACpB,GAAIA,EAAWpG,eAAejnB,GAAY,CACtC,IACMyO,EAAQ,IAAIrD,EADFiiB,EAAWrtB,IACD,CAAE4F,aAAc,KAAM/Q,UAAW,iBAAM,MACjEuH,EAAOU,KAAK,CAAEiN,UAAW0E,EAAM1E,UAAW+L,eAAgBrH,EAAMzE,gBAIxE,OAAO5N,EDuCQkxB,CAAsBT,IAnBgBU,EAqBvBnG,EAAUoG,mBAAmB15B,EAAMqT,KAAKsmB,iBAA9Dlf,EArB6Cgf,EAqB7Chf,UAAWuK,EArBkCyU,EAqBlCzU,OACb4U,EAAmB,IAAIrxB,MAEzBkS,IAAcza,EAAMqT,KAAK0H,mBACpB/a,EAAMqT,KAAK4H,oBACZ2e,EAAiB5wB,KAAKoK,GAAqBqH,IAC3Cza,EAAKgF,OAAAkG,GAAA,EAAAlG,CAAA,GAAQhF,EAAR,CAAeqT,KAAKrO,OAAAkG,GAAA,EAAAlG,CAAA,GAAMhF,EAAMqT,KAAb,CAAmB0H,iBAAkBN,MAC7D6Y,EAAYkE,GAA4Bx3B,KAI5CglB,EAAOrc,OAAS,GAChBixB,EAAiB5wB,KAAKoK,GAA2B4R,IAGrD,IAAM/O,EAAYqd,EAAUuG,gBAAgB3wB,GAC5C,QAAkBlK,IAAdiX,EAEA,MAAM,IAAIM,MAAM,iBAGpB,IAEM8iB,EADkB,IAAI1L,EADZoL,GAAgB9iB,IACI+d,GACC8F,aAErC,OACI1mB,GAA0Bmc,QAAQ,CAC9B5U,MAAO1E,EACPO,SAAW8c,EAA8B9c,SAASnQ,gBAH1D8F,OAAAnH,OAAAyY,GAAA,EAAAzY,CAKOq0B,GACAO,GApEiBzmB,CAAUxQ,EAAEtE,eAG3B07B,GAKT,SAAA7K,GAAO,OACPA,EAAQE,KACJ1pB,aAAO2pB,qBAAWjc,KAClB4mB,aAAI,SAAAxsB,GAAM,OAAIA,EAAOnP,QAAQ2K,KAAK,WAClCgxB,aAAI,kBAAM3iB,GAAWV,kBAAkB3F,OAAOkG,SAASkB,mBACvD6hB,iBE3BOC,YAAY7kB,WAAZ,EAAArQ,OAAAyY,GAAA,EAAAzY,CAAgBA,OAAOgD,OAAOmyB,IAA9BhuB,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAiDA,OAAOgD,OAAOoyB,MCDjEC,GAIT7pB,KC0BW8pB,gBAAuC,CAClDha,aAAc,WAAwB,IAAvBtgB,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAClC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,IACT,OAAQ5F,EAAOnP,SAAf8N,OAAAnH,OAAAyY,GAAA,EAAAzY,CAA2BhF,IAC/B,QACI,OAAOA,IAGnBsjB,cAAe,WAAwB,IAAvBtjB,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACnC,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,GAA0Bmc,SAClD,CAAQ/hB,EAAOnP,QAAQsc,OAAvBxO,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAiChF,IAE9BA,GAEXw6B,UAAW,WAA2B,IAA1Bx6B,EAA0BsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,IAAAA,UAAA,GAClC,QADkCA,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,GACnBuC,MACX,KAAKg5B,kBAAQnnB,IACT,OAAO,EACX,KAAKmnB,kBAAQnnB,IACT,OAAO,EACX,QACI,OAAOpT,IAGnBuY,aAAc,WAA0B,IAAzBvY,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAAM9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACpC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,IACT,OAAO5F,EAAOnP,QAClB,KAAKk8B,kBAAQnnB,GAA0Bmc,SACnC,OAAO,KACX,KAAKgL,kBAAQnnB,IACT,OAAO5F,EAAOnP,QAAQka,aAE9B,OAAOvY,GAEXmZ,cAAe,WAA0B,IAAzBnZ,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAAM9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACrC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GAA0Bmc,SACnC,OAAO/hB,EAAOnP,QAAQsc,MAC1B,KAAK4f,kBAAQnnB,IACT,OAAO5F,EAAOnP,QAAQ4X,UAC1B,QACI,OAAOjW,IAGnBsT,WAAY,WAA0B,IAAzBtT,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAAM9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAClC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GAA0Bmc,SACvC,KAAKgL,kBAAQnnB,IACT,OAAO,KACX,KAAKmnB,kBAAQnnB,IACT,OAAO5F,EAAOnP,QAAQ2B,MAC1B,QACI,OAAOA,IAGnB0sB,SAAU,WAAwB,IAAvB1sB,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAC9B,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,IACT,SAAAjH,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWhF,GAAX,CAAkBwN,EAAOnP,UAC7B,KAAKk8B,kBAAQnnB,IACT,OAAOpT,EAAM0F,OAAO,SAAA/C,GAAC,OAAIA,EAAE4xB,MAAQ/mB,EAAOnP,QAAQk2B,MACtD,QACI,OAAOv0B,IAGnBoZ,eAAgB,WAA0B,IAAzBpZ,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAAM9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACtC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GAA0Bmc,SACnC,OAAO,KACX,KAAKgL,kBAAQnnB,IACT,OAAO5F,EAAOnP,QAClB,QACI,OAAO2B,IAGnBy6B,UAAW,WAA0B,IAAzBz6B,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAChB,OADiCA,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,GACtBuC,OAASg5B,kBAAQnnB,IACjB,IAAIe,KAERnU,GAEXib,kBAAmB,WAA2B,IAA1Bjb,EAA0BsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,IAAAA,UAAA,GAAX9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAC1C,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,IACjB5F,EAAOnP,QAGX2B,GAEX+a,iBAAkB,WAAuB,IAAtB/a,EAAsBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAd,EAAG9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACrC,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,IACjB5F,EAAOnP,QAGX2B,GAEX25B,gBAAiB,WAAwB,IAAvB35B,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACrC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,IACT,SAAAjH,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWhF,GAAXgF,OAAAyY,GAAA,EAAAzY,CAAqBwI,EAAOnP,UAChC,KAAKk8B,kBAAQnnB,IACT,MAAO,GACX,QACI,OAAOpT,IAGnByZ,eAAgB,WAA0B,IAAzBzZ,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAAM9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACtC,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,IACjB5F,EAAOnP,QAAQmY,SAGnBxW,GAEX4a,cAAe,WAA0B,IAAzB5a,EAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAjB,KAAM9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACrC,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,GAA0Bmc,SAC3C/hB,EAAOnP,QAAQmY,SAGnBxW,GAEX06B,mBAAoB,WAAwB,IAAvB16B,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GACzB,OADwCA,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,GAC7BuC,OAASg5B,kBAAQnnB,GAA0Bmc,SAC3C9wB,MAGJuB,KC1IAs6B,gBAA2C,CACtDn4B,QAAS,WAAwB,IAAvBnC,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAC7B,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GACT,SAAAjH,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWhF,GAAX,CAAkBwN,EAAOnP,UAC7B,KAAKk8B,kBAAQnnB,GACT,OAAOpT,EAAM0F,OAAO,SAAA/C,GAAC,OAAIA,EAAEnE,KAAOgP,EAAOnP,UAC7C,KAAKk8B,kBAAQnnB,GACT,OAAOpT,EAAM7B,IAAI,SAAAwH,GAAM,OACnBA,EAAOnH,KAAOgP,EAAOnP,QAAQG,GAAKgP,EAAOnP,QAAUsH,IAE3D,QACI,OAAO3F,IAGnBqC,QAAS,WAAwB,IAAvBrC,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAC7B,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GACT,SAAAjH,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWhF,GAAX,CAAkBwN,EAAOnP,UAC7B,KAAKk8B,kBAAQnnB,GACT,OAAOpT,EAAM0F,OAAO,SAAA/C,GAAC,OAAIA,EAAE9D,MAAQ2O,EAAOnP,UAC9C,KAAKk8B,kBAAQnnB,EAAwB7Q,SACjC,OAAOvC,EAAM7B,IAAI,SAAAyF,GAAI,OACjBA,EAAK/E,MAAQ2O,EAAOnP,QAApB2G,OAAAkG,GAAA,EAAAlG,CAAA,GAAmCpB,EAAnC,CAAyC9E,WAAW,IAAS8E,IAErE,KAAK22B,kBAAQnnB,EAAwBmc,SACjC,OAAOvvB,EAAM7B,IAAI,SAAAyF,GAAI,OACjBA,EAAK/E,MAAQ2O,EAAOnP,QAAQQ,IAA5BmG,OAAAkG,GAAA,EAAAlG,CAAA,GAEapB,EAFb,CAGU3E,MAAOuO,EAAOnP,QAAQY,MACtBF,kBAAcC,EACdF,WAAW,EACXK,KAAMoG,KAAEmE,KAAKnE,KAAEo1B,QAAQntB,EAAOnP,QAAQY,MAAMd,IAAI,SAAAwE,GAAC,OAAIA,EAAExD,QAAOhB,IAAI,SAAAwE,GAAC,OAAKA,EAAa8U,mBAEzF7T,IAEd,KAAK22B,kBAAQnnB,EAAwBuc,SACjC,OAAO3vB,EAAM7B,IAAI,SAAAyF,GAAI,OACjBA,EAAK/E,MAAQ2O,EAAOnP,QAAQQ,IAA5BmG,OAAAkG,GAAA,EAAAlG,CAAA,GACWpB,EADX,CACiB9E,WAAW,EAAOC,aAAcyO,EAAOnP,QAAQoxB,UAC1D7rB,IAEd,KAAK22B,kBAAQnnB,GACT,OAAOpT,EAAM7B,IAAI,SAAAyF,GAAI,OACjBA,EAAK/E,MAAQ2O,EAAOnP,QAAQiC,MAA5B0E,OAAAkG,GAAA,EAAAlG,CAAA,GACWpB,EADX,CACiB1E,OAAQsO,EAAOnP,QAAQa,SAClC0E,IAEd,QACI,OAAO5D,IAGnBwE,aAAc,WAAwB,IAAvBxE,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAClC,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GACT,SAAAjH,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWhF,GAAX,CAAkBwN,EAAOnP,UAC7B,KAAKk8B,kBAAQnnB,GACT,OAAOpT,EAAM0F,OAAO,SAAA/C,GAAC,OAAIA,EAAEoD,KAAOyH,EAAOnP,UAC7C,QACI,OAAO2B,IAGnBuE,sBAAuB,WAA0B,IAAzBvE,IAAyBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,KAAAA,UAAA,GAAX9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAC7C,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,GACjB5F,EAAOnP,QAEX2B,GAEXkJ,OAAQ,WAA6C,IAA5ClJ,EAA4CsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GA8BzD,WACI,IAAMslB,EAAkC,GACxC,IAAK,IAAMh6B,KAAOyF,GACd,GAAIA,GAAa8sB,eAAevyB,GAAM,CAClC,IAAM0W,EAAUjR,GAAazF,GAC7Bg6B,EAAY5xB,KAAK,CAAE1I,MAAOM,EAAK1B,OAAQoY,IAI/C,OAAOsjB,EAvCUC,GAAyBrtB,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACjD,OAAQwO,EAAOjM,MACX,KAAKg5B,kBAAQnnB,GACT,OAAOpT,EAAM7B,IAAI,SAAAwE,GAAC,OAAKA,EAAErC,QAAUkN,EAAOnP,QAAQiC,MAAQkN,EAAOnP,QAAUsE,IAC/E,QACI,OAAO3C,IAGnBkH,oBAAqB,WAAgC,IAA/BlH,EAA+BsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAvB,WAAY9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EACjD,OAAIwO,EAAOjM,OAASg5B,kBAAQnnB,GACjB5F,EAAOnP,QAGX2B,GAEXb,KAAM,WAAwB,IAAvBa,EAAuBsV,UAAA3M,OAAA,QAAA3J,IAAAsW,UAAA,GAAAA,UAAA,GAAf,GAAI9H,EAAW8H,UAAA3M,OAAA,EAAA2M,UAAA,QAAAtW,EAC1B,GAAIwO,EAAOjM,OAASg5B,kBAAQnnB,GAAuB,CAC/C,IAAM9S,EAAQkN,EAAOnP,QAAQiC,MAAMmX,cAEnC,YAAoBzY,IADAgB,EAAM8F,KAAK,SAAAnD,GAAC,OAAIA,EAAErC,QAAUA,IAErCN,EAAM7B,IAAI,SAAAwE,GAAC,OAAIA,EAAErC,QAAUA,EAAQ,CAACA,QAAOpB,OAAQsO,EAAOnP,QAAQa,QAAUyD,IAEnF,GAAAwJ,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWhF,GAAX,CAAkBwN,EAAOnP,UAIjC,OAAO2B,KC/Gf,IAMe86B,GANKR,aAAgB,CAChCjnB,KAAM0nB,GACN/3B,SAAUg4B,GACVnpB,SAAUopB,MCADC,GAAiBC,aAAkE,CAC5FC,aAActM,KAIZuM,GAAc,CAACH,IAGfI,GAAWjB,GAAiBkB,KAAelmB,WAAf,EAAmBgmB,KAM/C5F,GAAQ+F,aAAYV,GAHL,GAGgCQ,IAErDJ,GAAeO,IAAIC,IAGJjG,UCjBR,SAASkG,GACZrI,EACAnxB,EACAuX,EACAva,GAgBA,OAdem0B,EAAUqI,cACrBx5B,EAAQhE,IAAI,SAAAwE,GAAC,OAAIA,EAAEpE,SACnB4D,EAAQhE,IAAI,SAAAwE,GACR,IAAM4P,EAAImH,EAAW5T,KAAK,SAAAK,GAAC,OAAIA,EAAE6H,QAAUrL,EAAE2mB,cAC7C,YAAUtqB,IAANuT,EACO,KAGJA,EAAE5M,SAEbxG,GAEoBhB,IAAI,SAACwE,EAAG+F,GAAJ,MAAW,CAAEsF,MAAO7L,EAAQuG,GAAG4gB,YAAa3jB,OAAQhD,KAK7E,SAAS60B,GAA4Bx3B,QAC1BhB,IAAVgB,IACAA,EAAQy1B,GAAMC,YAGlB,IAAMna,EAASqgB,OACf,OAAO,IAAIrf,GAGf,SAA2Bvc,GAoBvB,MAnBkC,CAC9BwJ,MAAOxJ,EAAMgD,SAASX,QACjBqD,OAAO,SAAA/C,GAAC,YAAgB3D,IAAZ2D,EAAE1D,QACdd,IAAI,SAAAyF,GACD,IAAM0E,EAAgBtD,OAAAkG,GAAA,EAAAlG,CAAA,GAAQpB,EAAR,CAAc3E,MAAO2E,EAAK3E,OAAS,KACzD,OAAOqJ,IAEfgY,aAActgB,EAAMqT,KAAKiN,aACzBuM,SAAU7sB,EAAM6R,SAAStO,UAAUuC,KAAK,SAAAnD,GAAC,OAAIA,EAAEk5B,SAASz3B,KACxDjC,QAASnC,EAAMgD,SAASb,QACxB+G,OAAQlJ,EAAMgD,SAASkG,OACvB/J,KAAMa,EAAMgD,SAAS7D,KACrBqF,aAAcxE,EAAMgD,SAASwB,aAC7BD,sBAAuBvE,EAAMgD,SAASuB,sBACtC+e,cAAetjB,EAAMqT,KAAKiQ,cAC1BmX,UAAWz6B,EAAMqT,KAAKonB,UACtBhgB,UAAWza,EAAMqT,KAAK0H,kBApBC+gB,CAAkB97B,GAAQub,GCPzD,IAIMzL,GAAS5M,uBAAa,CACxB64B,MAAO,CACH34B,MAAO,IACPsH,OAAQ,OAOVsxB,8MACOh8B,MAAQ,CAAEi8B,iBAAkB,QAErCC,oBAAsB,SAAC36B,GACnBpB,EAAKC,SAAS,CAAE67B,iBAA2B,KAAT16B,EAAc,KAAOA,6EAGlD,IAAAqB,EAAA9B,KAAAuG,EACmCvG,KAAKL,MAArCM,EADHsG,EACGtG,UAAWga,EADd1T,EACc0T,iBACXkhB,EAAqBn7B,KAAKd,MAA1Bi8B,iBAEFE,EAAS,CAAI,IAAJhwB,OAAAnH,OAAAyY,GAAA,EAAAzY,CAAWA,OAAOoS,KAAKiX,MAGhC7X,EADYghB,KACS4E,yBAAyBH,GAE9CI,EAAkBt0B,GAAqByO,EAAShN,MAAO,SAAA7G,GAAC,OAAIA,EAAEzD,QAAQ,KAAMf,IAC9E,SAAAwE,GAAC,MAAK,CACFrC,MAAOqC,EAAEsG,KAAO,GAChB3K,KAAMqE,EAAErC,MAAMA,MAAMzB,OAItBy9B,EAAsBv0B,GACxByO,EAASiE,UACT,SAAA9X,GAAC,OAAIA,EAAEzD,QACP,KACFf,IAAI,SAAAwE,GAAC,MAAK,CACRrC,MAAOqC,EAAEsG,KAAO,GAChB3K,KAAMqE,EAAErC,MAAMA,MAAMma,WAAa1Z,EAAU,sBAC3Cw7B,KAAM55B,EAAErC,MAAMA,SAGlB,OACIwK,EAAAzJ,EAAA0J,cAAA,WACID,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,MAChB0F,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,wBAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAMC,WAAS,EAACsC,WAAW,WAAW6D,QAAS,IAC3CgB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,GACNkH,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CACIxC,MAAO,CAAEkC,MAAO,IAAKuB,UAAW,IAChCrE,MAAO27B,GAAoB,GAC3BO,cAAc,EACdC,YAAa,SAAA95B,GAAC,OAAIA,GAAK5B,EAAU,sBACjCU,SAAU,SAAAvB,GAAE,OAAI0C,EAAKs5B,oBAAoBh8B,EAAGmE,OAAO/D,QACnD4F,MAAO4E,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,OAENy4B,EAAUh+B,IAAI,SAAAwE,GAAC,OACZmI,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAU9C,IAAK+B,EAAGrC,MAAOqC,GACpBA,GAAK5B,EAAU,2BAMpC+J,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,GACNkH,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,QAAAyI,OAAgBpL,EAAU,kBAA1B,MAAAoL,OAAgDqK,EAAS4H,eAGjEtT,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAqBt5B,MAAM,OAAOsH,OAAQ,KACtCI,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAUrzB,KAAMgzB,GACZvxB,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,MACA5xB,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAOC,QAAQ,OAAOC,cAAe,SAAAj6B,GAAC,OC9GxBgG,ED8G0C,KC9GrD6gB,ED8GkD7mB,GC7G1DgG,OACJ6gB,EAGJ,KAAOA,EAAEE,UAAUF,EAAE7gB,OAASA,EAAS,EAAG6gB,EAAE7gB,QALhD,IAAoB6gB,EAAW7gB,KD+GdmC,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAOE,cAAe,SAAAj6B,GAAC,OAAIA,EAAI,OAC/BmI,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CACIG,UAAW,SAAAl6B,GAAC,OAAIA,EAAI,KACpBm6B,eAAgB,SAAAj+B,GAAG,OACfkC,EAAU,wBAAyB,CAC/BlC,MACAI,MAAOuX,EAAShN,MAAM1D,KAAK,SAAAnD,GAAC,OAAIA,EAAErC,MAAMzB,MAAQA,IAAMyB,MACjDrB,MAAM0J,YAIvBmC,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CACIp+B,KAAMyC,EAAU,iBAChB47B,QAAQ,QACRI,KAAK,UACLC,WAAY,OAIxBlyB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,MAChB0F,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,4BAElBsM,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAqBt5B,MAAM,OAAOsH,OAAQ,KACtCI,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAUrzB,KAAMizB,GACZxxB,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,MACA5xB,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAOC,QAAQ,SACf7xB,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CAAOE,cAAe,SAAAj6B,GAAC,OAAIA,EAAI,OAC/BmI,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CACIG,UAAW,SAACl6B,EAAG4C,EAAG5E,GAAP,SAAAwL,OACJxJ,EADI,OAAAwJ,OACGxL,EAAEtC,QAAQk+B,KAAKjzB,MADlB,KAAA6C,OAC2BpL,EAAU,kBADrC,QAIf+J,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CACIC,QAAQ,QACRK,WAAY,GACZ1+B,KAAMyC,EAAU,kBAEfu7B,EAAoBn+B,IAAI,SAAC8+B,EAAOjvB,GAAR,OACrBlD,EAAAzJ,EAAA0J,cAAC2xB,GAAA,EAAD,CACIK,KACIE,EAAMV,KAAK9hB,YAAcM,EACnB,UACA,UAEVna,IAAKoN,iBA7Gb2D,aAwHbnB,gBACXxO,YAvIoB,SAAChC,GAAD,MAAuB,CAC3C+a,iBAAkB/a,EAAMqT,KAAK0H,oBAuI7B9X,qBAAW6M,IACX7N,IAHWuO,CAIbwrB,IEpKmBkB,oLAEb,OACIpyB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAMC,WAAS,GACXmH,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACXiH,EAAAzJ,EAAA0J,cAACoyB,GAAD,OAEJryB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI3C,MAAO,CAACyD,UAAW,KAClCmG,EAAAzJ,EAAA0J,cAACqyB,GAAD,OAEJtyB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI3C,MAAO,CAACyD,UAAW,KAClCmG,EAAAzJ,EAAA0J,cAACsyB,GAAD,eAXsB1rB,aCc1C,SAAS2rB,GAAW78B,GAChB,OAAOqK,EAAAzJ,EAAA0J,cAACrH,EAAA,EAADsB,OAAA2N,OAAA,CAAO5I,UAAU,MAAStJ,IAsDtB+P,oBACX+sB,KAAiB,CAAEC,WAAY,OAC/Bv6B,qBArDW,SAACwB,GAAD,OAAkBvB,uBAAa,CAC1Cu6B,OAAQ,CACJxvB,SAAU,YAEdyvB,KAAM,CACFA,KAAM,GAEV3pB,QAAS,CACLzS,SAAU,EACVmJ,OAAQhG,EAAMqF,QAAQ6sB,KACtBgH,UAAW,OACX9uB,UAAW,cA2Cf5M,IACAwO,KAJWD,CA7Bf,SAAAnN,GAAiE,IAAvCu6B,EAAuCv6B,EAAvCu6B,WAAYn6B,EAA2BJ,EAA3BI,QAASwM,EAAkB5M,EAAlB4M,QAC3C,OACInF,EAAAzJ,EAAA0J,cAAA,WACID,EAAAzJ,EAAA0J,cAAC8yB,GAAAx8B,EAAD,CACIu8B,WAAYA,EACZjlB,MAAM,EACNC,QAAS,kBAAM3I,EAAQjH,KAAK,UAC5B80B,oBAAqBR,GACrBvwB,WAAW,EACXgxB,SAAS,MAETjzB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAQO,UAAWR,EAAQg6B,QACvB3yB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,KAAKwE,MAAM,UAAU3F,UAAWR,EAAQi6B,MACxD5yB,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,2BAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAQkG,MAAM,UAAU/H,QAAS,kBAAMoO,EAAQjH,KAAK,WAChD8B,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,kBAI1BsM,EAAAzJ,EAAA0J,cAAA,OAAK9G,UAAWR,EAAQsQ,SACpBjJ,EAAAzJ,EAAA0J,cAACizB,GAAD,WC1DpB,SAASV,GAAW78B,GAChB,OAAOqK,EAAAzJ,EAAA0J,cAACrH,EAAA,EAADsB,OAAA2N,OAAA,CAAO5I,UAAU,MAAStJ,IAGrC,IAAMqP,GAAS5M,uBAAa,CACxBu6B,OAAQ,CACJxvB,SAAU,YAEdyvB,KAAM,CACFA,KAAM,GAEV3pB,QAAS,CACLzS,SAAU,GAEd28B,YAAa,CACTvzB,OAAQ,QAEZwzB,gBAAiB,CACbxzB,OAAQ,WAyCD8F,oBACX+sB,KAAiB,CAAEC,WAAY,OAC/Bv6B,qBAAW6M,IACX7N,IACAwO,KAJWD,CA9Bf,SAAAnN,GAAiE,IAAvCu6B,EAAuCv6B,EAAvCu6B,WAAYn6B,EAA2BJ,EAA3BI,QAASwM,EAAkB5M,EAAlB4M,QAC3C,OACInF,EAAAzJ,EAAA0J,cAAA,WACID,EAAAzJ,EAAA0J,cAAC8yB,GAAAx8B,EAAD,CACIu8B,WAAYA,EACZjlB,MAAM,EACNC,QAAS,kBAAM3I,EAAQjH,KAAK,UAC5B80B,oBAAqBR,GACrBvwB,WAAW,EACXgxB,SAAS,KACTt6B,QAAS,CAAC06B,iBAAkB16B,EAAQw6B,YAAaG,gBAAiB36B,EAAQy6B,kBAE1EpzB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAQO,UAAWR,EAAQg6B,QACvB3yB,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,KACIoH,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,KAAKwE,MAAM,UAAU3F,UAAWR,EAAQi6B,MACxD5yB,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,2BAElBsM,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAQkG,MAAM,UAAU/H,QAAS,kBAAMoO,EAAQjH,KAAK,WAChD8B,EAAAzJ,EAAA0J,cAACjJ,EAAA,EAAD,CAAWtD,GAAG,kBAI1BsM,EAAAzJ,EAAA0J,cAAA,OAAK9G,UAAWR,EAAQsQ,SACpBjJ,EAAAzJ,EAAA0J,cAAC0G,GAAD,WChCLjB,oBACXxO,YArBoB,SAAChC,GAAD,MAAuB,CAC3CmZ,cAAenZ,EAAMqT,KAAK8F,iBAqB1BlX,IAFWuO,CAdf,SAAsB/P,GAAc,IACxB0Y,EAAkB1Y,EAAlB0Y,cAER,GAAsB,OAAlBA,EACA,OAAOrO,EAAAzJ,EAAA0J,cAACrH,EAAA,EAAD,CAAY0B,QAAQ,MAApB,mBAGX,IACMg0B,EAAkB,IAAIzL,EADZoL,GAAgB5f,IACIvH,GAAanR,IAC3Cw2B,EAAczhB,aAAU,CAACjJ,gBAAiB6sB,EAAgB7sB,gBAAiB7B,OAAQ,SAEzF,OAAOI,EAAAzJ,EAAA0J,cAACgL,GAAA,EAASH,IAAV,CAAc1U,MAAO+1B,GAAcmC,EAAgBiF,YCRxDC,+LAEE,IAAMC,EAAe,IAAIvoB,GACnBqjB,EAAekF,EAAazE,aAElCh5B,KAAKL,MAAM+9B,SACPprB,GAA0Bmc,QAAQ,CAC9B5U,MAAO4jB,EAAatoB,UACpBO,SAAU,QAPK,IAAAmF,GAAA,EAAAC,GAAA,EAAAC,OAAA7c,EAAA,IAWvB,QAAA8c,EAAAC,EAAqBsd,EAArBrd,OAAAC,cAAAN,GAAAG,EAAAC,EAAAnH,QAAAsH,MAAAP,GAAA,EAAmC,KAAxBnO,EAAwBsO,EAAAxb,MAC/BQ,KAAKL,MAAM+9B,SAAShxB,IAZD,MAAA2O,GAAAP,GAAA,EAAAC,EAAAM,EAAA,YAAAR,GAAA,MAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,qCAiBvB,OACI/Q,EAAAzJ,EAAA0J,cAAA,OACI7J,MAAO,CAAEkC,MAAO,OAAQsH,OAAQ,OAAQuD,SAAU,WAAYnB,SAAU,WAExEhC,EAAAzJ,EAAA0J,cAAC0zB,GAAD,MACA3zB,EAAAzJ,EAAA0J,cAAA,OAAK7J,MAAO,CAAEyS,IAAK,GAAI+qB,MAAO,GAAIzwB,SAAU,aACxCnD,EAAAzJ,EAAA0J,cAAC4zB,GAAD,OAEJ7zB,EAAAzJ,EAAA0J,cAAC6zB,EAAA,EAAD,KACI9zB,EAAAzJ,EAAA0J,cAAC8zB,EAAA,EAAD,CAAO3mB,KAAK,iBAAiBhM,UAAW4yB,KACxCh0B,EAAAzJ,EAAA0J,cAAC8zB,EAAA,EAAD,CAAO3mB,KAAK,iBAAiBhM,UAAW6yB,cA5BhCptB,aAmCbnB,gBACXC,KACAzO,YA3CoB,SAAChC,GAAD,MAAuB,CAC3Cg/B,QAASh/B,EAAMqT,KAAKqnB,sBA2CpBz4B,IAHWuO,CAIb8tB,IC/Bat8B,mBApBS,SAAChC,GAAD,MAAuB,CAC3Cw6B,UAAWx6B,EAAMqT,KAAKmnB,YAmBXx4B,CAdf,SAAAqB,GAAmC,IAApBm3B,EAAoBn3B,EAApBm3B,UACX,OACI1vB,EAAAzJ,EAAA0J,cAACk0B,EAAA,EAAD,CAAeC,SAAUnhC,aACrB+M,EAAAzJ,EAAA0J,cAAC6zB,EAAA,EAAD,KACI9zB,EAAAzJ,EAAA0J,cAAC8zB,EAAA,EAAD,CAAOM,OAAK,EAACjnB,KAAK,IAAIhM,UAAWyE,KACjC7F,EAAAzJ,EAAA0J,cAAC8zB,EAAA,EAAD,CACI3mB,KAAK,QACLmmB,OAAQ,kBAAQ7D,EAAmC1vB,EAAAzJ,EAAA0J,cAACq0B,GAAD,MAAvBt0B,EAAAzJ,EAAA0J,cAACs0B,EAAA,EAAD,CAAU1H,GAAG,iDCRvD2H,GAAc9nB,QACW,cAA7BxG,OAAOuuB,SAASC,UAEe,UAA7BxuB,OAAOuuB,SAASC,UAEhBxuB,OAAOuuB,SAASC,SAASC,MACvB,2DA8CN,SAASC,GAAgBC,EAAe1qB,GACtC2qB,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlgC,QACf4/B,UAAUC,cAAcQ,YAI1B5f,QAAQC,IACN,iHAKEzL,GAAUA,EAAOqrB,UACnBrrB,EAAOqrB,SAASN,KAMlBvf,QAAQC,IAAI,sCAGRzL,GAAUA,EAAOsrB,WACnBtrB,EAAOsrB,UAAUP,UAO5BQ,MAAM,SAAA19B,GACL2d,QAAQ3d,MAAM,4CAA6CA,mCCxFjE,QAAA29B,GAAAC,GrGd8B,CAC1B,yBACA,6BACA,qDACA,kBACA,sDACA,uDACA,0CACA,mBACA,0BACA,iCqGIJ1kB,OAAAC,cAAA0kB,IAAAF,GAAAC,GAAA9rB,QAAAsH,MAAAykB,IAAA,EAAkC,KAAvBC,GAAuBH,GAAAngC,MAC9Bm1B,GAAM+I,SAAS5/B,EAAUgiC,KACzBnL,GAAM+I,SAASn/B,EAAgBkD,QAAQq+B,iGAY3C,IAAIC,IAAYjB,UAAU/S,UAAc+S,UAAkBkB,cAA2B,MAAMjX,MACvF,KACF,GAMF4L,GAAM+I,SACF1E,YAAW,CACPv2B,UAN2B,CAC/B,CAAEa,KAAM,KAAM9F,KAAM,WACpB,CAAE8F,KAAM,KAAM9F,KAAM,YAKhByiC,YAAaC,GACblrB,QAAS,CAAEmrB,6CAAsBC,gBAAiBL,OAc1DxC,iBAAOr9B,EAAA,cAVM,kBACTA,EAAA,qBAAKE,MAAO,CAAEwJ,OAAQ,SAClB1J,EAAA,cAACmgC,EAAA,EAAD,CAAU1L,MAAOA,IACbz0B,EAAA,cAACc,EAAA,EAAD,CAAkB2zB,MAAOA,IACrBz0B,EAAA,cAACogC,GAAD,UAMT,MAAUlqB,SAASmqB,eAAe,SD7BlC,SAAkBpsB,GACvB,GAA6C,kBAAmB2qB,UAAW,CAMzE,GAJkB,IAAI0B,IACnBvjC,YACDiT,OAAOuuB,SAASgC,MAEJC,SAAWxwB,OAAOuuB,SAASiC,OAIvC,OAGFxwB,OAAOK,iBAAiB,OAAQ,WAC9B,IAAMsuB,EAAK,GAAAxzB,OAAMpO,YAAN,sBAEPuhC,IAgEV,SAAiCK,EAAe1qB,GAE9CwsB,MAAM9B,GACHI,KAAK,SAAAtR,GAEJ,IAAMiT,EAAcjT,EAASkT,QAAQvU,IAAI,gBAEnB,MAApBqB,EAASvR,QACO,MAAfwkB,IAA8D,IAAvCA,EAAY/Y,QAAQ,cAG5CiX,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7B/uB,OAAOuuB,SAASuC,aAKpBpC,GAAgBC,EAAO1qB,KAG1BurB,MAAM,WACL/f,QAAQC,IACN,mEArFAqhB,CAAwBpC,EAAO1qB,GAI/B2qB,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCtf,QAAQC,IACN,gHAMJgf,GAAgBC,EAAO1qB,MCC/B4qB","file":"static/js/main.1c5b317b.chunk.js","sourcesContent":["// @ts-ignore\r\nprocess.env.LOCAL_STORAGE_VERSION = 1;","import { PlayerArrangement } from './../../core/player-arrangement';\r\nimport { Weighted } from \"@core/weighted\";\r\nimport cuid from \"cuid\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { createAsyncAction, createStandardAction } from \"typesafe-actions\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport { Gender, PlayerInfo } from \"@core/player-info\";\r\n\r\nexport const addPlayer = createStandardAction(\"ADD_PLAYER\").map(\r\n    (playerInfo: { name: string; gender: Gender }): { payload: PlayerInfo } => ({\r\n        payload: {\r\n            name: playerInfo.name,\r\n            gender: playerInfo.gender,\r\n            id: cuid(),\r\n        },\r\n    }),\r\n);\r\nexport const updatePlayer = createStandardAction(\"UPDATE_PLAYER\")<PlayerInfo>();\r\nexport const removePlayer = createStandardAction(\"REMOVE_PLAYER\")<string>();\r\n\r\nexport const addSource = createStandardAction(\"ADD_SOURCE\").map(\r\n    (url: string): { payload: SourceInfo } => ({\r\n        payload: {\r\n            url,\r\n            isLoading: false,\r\n            errorMessage: undefined,\r\n            cards: undefined,\r\n            weight: 0.5,\r\n            tags: []\r\n        },\r\n    }),\r\n);\r\nexport const removeSource = createStandardAction(\"REMOVE_SOURCE\")<string>();\r\n\r\nexport const loadSourceAsync = createAsyncAction(\r\n    \"LOAD_SOURCE_REQUEST\",\r\n    \"LOAD_SOURCE_SUCCESS\",\r\n    \"LOAD_SOURCE_FAILURE\",\r\n)<string, { url: string; cards: Card[] }, { url: string; message: string }>();\r\n\r\nexport const setSourceWeight = createStandardAction(\"SET_SOURCE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setPreferOppositeGenders = createStandardAction(\"SET_PREFER_OPPOSITE_GENDERS\")<\r\n    boolean\r\n>();\r\n\r\nexport const addPlayerArrangment = createStandardAction(\"ADD_PLAYER_ARRANGEMENT\")<PlayerArrangement>();\r\nexport const removePlayerArrangment = createStandardAction(\"REMOVE_PLAYER_ARRANGEMENT\")<string>();\r\n\r\nexport const setSocialMediaPlatform = createStandardAction(\"SET_SOCIAL_MEDIA_PLATFORM\")<string>();\r\n\r\nexport const setSlideWeight = createStandardAction(\"SET_SLIDE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setTagWeight = createStandardAction(\"SET_TAG_WEIGHT\")<Weighted<string>>();\r\n","import * as React from \"react\";\r\nimport { addPlayer } from \"../actions\";\r\nimport { Gender } from \"../../../core/player-info\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\n\r\nconst dispatchProps = {\r\n    addPlayer,\r\n};\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    name: string;\r\n};\r\n\r\nclass AddPlayerForm extends React.Component<Props, State> {\r\n    readonly state = { name: \"\" };\r\n\r\n    handlePlayerNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ name: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        let gender: Gender = \"Male\";\r\n        if (this.state.name.endsWith(\"a\"))\r\n            //sorry Luca\r\n            gender = \"Female\";\r\n\r\n        this.props.addPlayer({ name: this.state.name, gender });\r\n        this.setState({ name: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.name) this.handleAddClick();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { name } = this.state;\r\n        const { translate } = this.props;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        placeholder={translate(\"settings.players.playerName\") as string}\r\n                        onChange={this.handlePlayerNameChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!name}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    dispatchProps,\r\n)(withLocalize(AddPlayerForm));\r\n","import {SettingsState} from \"./reducer\";\r\n\r\nexport const getPlayers = (state: SettingsState) => state.players;\r\n\r\nexport const getSources = (state: SettingsState) => state.sources;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addSource, loadSourceAsync } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    addSource,\r\n    loadSource: loadSourceAsync.request,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    url: string;\r\n};\r\n\r\nclass AddSourceForm extends React.Component<Props, State> {\r\n    readonly state = { url: \"\" };\r\n\r\n    handleUrlChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ url: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        if (!this.state.url || this.props.sources.findIndex(x => x.url === this.state.url) > -1) {\r\n            return;\r\n        }\r\n\r\n        this.props.addSource(this.state.url);\r\n        this.props.loadSource(this.state.url);\r\n        this.setState({ url: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.url) {\r\n                this.handleAddClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { url } = this.state;\r\n        const { translate } = this.props;\r\n        const sourceExists = this.props.sources.findIndex(x => x.url === this.state.url) > -1;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={url}\r\n                        placeholder={translate(\"settings.sources.sourceUrl\") as string}\r\n                        error={sourceExists}\r\n                        onChange={this.handleUrlChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!url || sourceExists}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(AddSourceForm));\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\n\r\nconst styles = () =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ntype Props = LocalizeContextProps & WithStyles<typeof styles>;\r\n\r\nfunction ChangeLanguage({ activeLanguage, languages, setActiveLanguage, classes }: Props) {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12} sm={10} md={8} lg={6}>\r\n                <FormControl className={classes.root}>\r\n                    <InputLabel htmlFor=\"language-input\">\r\n                        <Translate id=\"settings.configuration.language\" />\r\n                    </InputLabel>\r\n                    <Select\r\n                        inputProps={{\r\n                            id: \"language-input\",\r\n                        }}\r\n                        style={{ width: \"100%\" }}\r\n                        value={activeLanguage.code}\r\n                        onChange={ev => setActiveLanguage(ev.target.value)}\r\n                    >\r\n                        {languages.map(lang => (\r\n                            <MenuItem key={lang.code} value={lang.code}>{lang.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(withLocalize(ChangeLanguage));\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    Typography,\r\n    Switch,\r\n    FormControlLabel,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Theme,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n} from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    preferOppositeGenders: state.settings.preferOppositeGenders,\r\n    players: state.settings.players,\r\n    arrangements: state.settings.arrangements,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        section: {\r\n            marginTop: 10,\r\n        },\r\n        arrangmentItem: {\r\n            borderBottom: \"1px solid #d8d8d8\",\r\n            paddingBottom: 5,\r\n        },\r\n        arrangementSelect: {\r\n            width: 200,\r\n            [theme.breakpoints.down(\"xs\")]: {\r\n                width: \"100%\",\r\n            },\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles>;\r\n\r\nfunction PlayerSettings({\r\n    preferOppositeGenders,\r\n    setPreferOppositeGenders,\r\n    classes,\r\n    players,\r\n    arrangements,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.playerSettings\" />\r\n            </Typography>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={preferOppositeGenders}\r\n                        onChange={(_, c) => setPreferOppositeGenders(c)}\r\n                    />\r\n                }\r\n                label={<Translate id=\"settings.configuration.playerSettings.pairOppositeGenders\" />}\r\n            />\r\n            <Typography className={classes.section} variant=\"subtitle2\">\r\n                <Translate id=\"settings.configuration.arrangements\" />\r\n            </Typography>\r\n            <Typography>\r\n                <Translate id=\"settings.configuration.arrangements.description\" />\r\n            </Typography>\r\n            <Grid container>\r\n                {players\r\n                    .filter(player => arrangements.findIndex(x => x.p2 === player.id) === -1)\r\n                    .map(player => {\r\n                        const arrangment = arrangements.find(x => x.p1 === player.id);\r\n                        const arrangedPlayerId = arrangment === undefined ? \"\" : arrangment.p2;\r\n                        return (\r\n                            <Grid\r\n                                item\r\n                                container\r\n                                alignItems=\"flex-end\"\r\n                                className={classes.arrangmentItem}\r\n                                key={player.id}\r\n                            >\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <Typography variant=\"subtitle1\">{player.name}</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <FormControl className={classes.arrangementSelect}>\r\n                                        <InputLabel htmlFor=\"player-selection\">\r\n                                            <Translate id=\"settings.configuration.arrangements.pairWith\" />\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            value={arrangedPlayerId}\r\n                                            onChange={ev => {\r\n                                                const value = ev.target.value;\r\n                                                if (value === \"\") {\r\n                                                    removePlayerArrangment(player.id);\r\n                                                } else {\r\n                                                    addPlayerArrangment({\r\n                                                        p1: player.id,\r\n                                                        p2: value,\r\n                                                    });\r\n                                                }\r\n                                            }}\r\n                                            input={<Input id=\"player-selection\" />}\r\n                                        >\r\n                                            <MenuItem value=\"\">\r\n                                                <em>\r\n                                                    <Translate id=\"settings.configuration.arrangements.none\" />\r\n                                                </em>\r\n                                            </MenuItem>\r\n                                            {players\r\n                                                .filter(\r\n                                                    x =>\r\n                                                        x.id !== player.id &&\r\n                                                        arrangements.findIndex(\r\n                                                            y =>\r\n                                                                (y.p1 === x.id || y.p2 === x.id) &&\r\n                                                                y.p1 !== player.id,\r\n                                                        ) === -1,\r\n                                                )\r\n                                                .map(x => (\r\n                                                    <MenuItem key={x.id} value={x.id}>\r\n                                                        {x.name}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withStyles(styles)(withLocalize(PlayerSettings)));\r\n","export const socialMediaPlatforms = [\"Snapchat\", \"Instagram\", \"Facebook\"];\r\n\r\nexport const defaultSources = [\r\n    \"cards/bullshitfact.xml\",\r\n    \"cards/ichundderalkohol.xml\",\r\n    \"cards/ConversationStartersWorld.NeverHaveIEver.xml\",\r\n    \"cards/Bevil.xml\",\r\n    \"cards/ConversationStartersWorld.TruthOrDareDare.xml\",\r\n    \"cards/ConversationStartersWorld.TruthOrDareTruth.xml\",\r\n    \"cards/ConversationStartersWorld.Wyr.xml\",\r\n    \"cards/common.xml\",\r\n    \"cards/Picolo/Picolo.xml\",\r\n    \"cards/Picolo/Picolo.Silly.xml\",\r\n];\r\n\r\nexport const slideWeights: { [key: string]: number } = {\r\n    FactSlide: 0.4,\r\n    DownSlide: 0.2,\r\n    NeverEverSlide: 0.5,\r\n    TruthOrDareSlide: 0.35,\r\n    WouldYouRatherSlide: 0.5,\r\n    DrinkSlide: 0.5,\r\n    VirusSlide: 0.25,\r\n    NoIdeaLosesSlide: 0.5,\r\n    GroupGameSlide: 0.4,\r\n    TaskSlide: 0.2,\r\n};\r\n\r\n// if a card has one of these tags and an arranged player is selected\r\n// the propability that their counterpart is selected is increased further\r\nexport const higherArrangementPropabilityTags = [\"sexual\"];\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport * as React from \"react\";\r\nimport { Typography, FormControl, Select, Input, MenuItem } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { setSocialMediaPlatform } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { socialMediaPlatforms } from \"../../../../preferences\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    platform: state.settings.socialMediaPlatform,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSocialMediaPlatform,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction ChangeLanguage({ platform, setSocialMediaPlatform }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.socialMediaPlatform\" />\r\n            </Typography>\r\n            <Typography gutterBottom>\r\n                <Translate id=\"settings.configuration.socialMediaPlatform.description\" />\r\n            </Typography>\r\n            <FormControl>\r\n                <Select style={{width: 200, marginTop: 10}}\r\n                    value={platform}\r\n                    onChange={ev => setSocialMediaPlatform(ev.target.value)}\r\n                    input={<Input />}\r\n                >\r\n                    {socialMediaPlatforms.map(x => (\r\n                        <MenuItem key={x} value={x}>\r\n                            {x}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(ChangeLanguage));\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface Props {\r\n    items: Weighted<string>[];\r\n    onChangeWeight: (item: Weighted<string>) => void;\r\n}\r\n\r\nclass ItemPreferences extends React.Component<Props> {\r\n    render() {\r\n        const { items, onChangeWeight } = this.props;\r\n\r\n        return (\r\n            <Grid container>\r\n                {items.map(x => (\r\n                    <Grid key={x.value} item container alignItems=\"center\">\r\n                        <Grid item xs={4} lg={3}>\r\n                            <Typography\r\n                                style={{\r\n                                    opacity: x.weight === 0 ? 0.5 : 1,\r\n                                }}\r\n                            >\r\n                                {x.value}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8} lg={9}>\r\n                            <Slider\r\n                                max={1}\r\n                                min={0}\r\n                                style={{ padding: \"20px 0\"}}\r\n                                step={0.05}\r\n                                value={x.weight}\r\n                                onChange={(_, v) => onChangeWeight({ value: x.value, weight: v })}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemPreferences;\r\n","export function percentageFixedTotal<T>(\r\n    values: T[],\r\n    getPercentage: (x: T) => number,\r\n    target: number,\r\n): Array<{ value: T; part: number }> {\r\n    // https://stackoverflow.com/a/13483486\r\n    const percentageValues = values.map(value => ({ value, percent: getPercentage(value) }));\r\n    const total = percentageValues.reduce((x, y) => x + y.percent, 0);\r\n\r\n    const result = new Array<{ value: T; part: number }>();\r\n    let sum = 0;\r\n    let prevBaseline = 0;\r\n\r\n    for (let i = 0; i < percentageValues.length; i++) {\r\n        const {value, percent} = percentageValues[i];\r\n\r\n        sum += percent / total * target;\r\n        const sumRounded = Math.round(sum);\r\n\r\n        result.push({ value, part: sumRounded - prevBaseline });\r\n        prevBaseline = sumRounded;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setSlideWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slides: state.settings.slides,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSlideWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SlidePreferences({ slides, setSlideWeight }: Props) {\r\n    const totalCards = 50;\r\n    const slidePercentages = percentageFixedTotal(slides, x => x.weight, totalCards);\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.slides\" />\r\n            </Typography>\r\n            <ItemPreferences items={slides} onChangeWeight={x => setSlideWeight(x)} />\r\n            <Typography>\r\n                <Translate\r\n                    id=\"settings.configuration.slidesProjection\"\r\n                    data={{ count: totalCards }}\r\n                />\r\n                {slidePercentages.map((x, i) => (\r\n                    <React.Fragment key={x.value.value}>\r\n                        <b style={{fontWeight: \"bolder\"}}>{x.value.value}</b>: {x.part}\r\n                        {i < slidePercentages.length - 1 ? \", \" : null}\r\n                    </React.Fragment>\r\n                ))}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(SlidePreferences));\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setTagWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tags: state.settings.tags,\r\n    decks: state.settings.sources,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setTagWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction TagPreferences({ tags, decks, setTagWeight }: Props) {\r\n    const allTags = _.uniq(decks.flatMap(x => x.tags));\r\n    const weights = allTags.map(x => tags.find(y => y.value === x) || { value: x, weight: 0.5 });\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.tags\" />\r\n            </Typography>\r\n            <ItemPreferences items={weights} onChangeWeight={x => setTagWeight(x)} />\r\n            {weights.length === 0 ? (\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    <Translate id=\"settings.configuration.tags.none\" />\r\n                </Typography>\r\n            ) : (\r\n                undefined\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(TagPreferences));\r\n","import * as React from \"react\";\r\nimport ChangeLanguage from \"./configuration/ChangeLanguage\";\r\nimport PlayerSettings from \"./configuration/PlayerSettings\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport SocialMediaPlatform from \"./configuration/SocialMediaPlatform\";\r\nimport SlidePreferences from \"./configuration/SlidePreferences\";\r\nimport TagsPerferences from \"./configuration/TagsPerferences\";\r\n\r\nclass Configuration extends React.Component {\r\n    render() {\r\n        return (\r\n            <Grid style={{ padding: 24 }}>\r\n                <Grid container spacing={32} direction=\"column\">\r\n                    <Grid item style={{ marginBottom: 20 }}>\r\n                        <ChangeLanguage />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <PlayerSettings />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SocialMediaPlatform />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SlidePreferences />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TagsPerferences />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configuration;\r\n","export class PlayerInfo {\r\n    constructor(public id: string, public name: string, public gender: Gender) {}\r\n}\r\n\r\nexport type Gender = \"Male\" | \"Female\";\r\n","import { Gender } from \"../../../core/player-info\";\r\nimport React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVenus, faMars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\n\r\ninterface Props extends LocalizeContextProps {\r\n    name: string;\r\n    gender: Gender;\r\n    onRemoveClick: () => void;\r\n    onSwapGenderClick: () => void;\r\n    onNameChanged: (name: string) => void;\r\n}\r\n\r\nconst getIconButtonStyle = (): React.CSSProperties => ({\r\n    margin: -10,\r\n    width: 48,\r\n    height: 48,\r\n});\r\n\r\nfunction PlayerListItem({ name, gender, onRemoveClick, onSwapGenderClick, onNameChanged, translate }: Props) {\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <IconButton\r\n                aria-label=\"Swap Gender\"\r\n                onClick={onSwapGenderClick}\r\n                style={{ ...getIconButtonStyle(), marginRight: 0 }}\r\n            >\r\n                <Icon>\r\n                    <FontAwesomeIcon icon={gender === \"Male\" ? faMars : faVenus} />\r\n                </Icon>\r\n            </IconButton>\r\n            <Input\r\n                error={!name}\r\n                onBlur={() => {\r\n                    if (!name) onRemoveClick();\r\n                }}\r\n                style={{ flexGrow: 1, marginLeft: 5, marginRight: 5 }}\r\n                placeholder={translate(\"settings.willBeRemoved\") as string}\r\n                value={name}\r\n                onChange={ev => onNameChanged(ev.currentTarget.value)}\r\n            />\r\n            <IconButton\r\n                aria-label=\"Delete\"\r\n                onClick={onRemoveClick}\r\n                style={{ ...getIconButtonStyle(), marginLeft: 0 }}\r\n                tabIndex={-1}\r\n            >\r\n                <DeleteIcon fontSize=\"default\" />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withLocalize(PlayerListItem);\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlayerInfo } from \"../../../core/player-info\";\r\nimport { removePlayer, updatePlayer } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport PlayerListItem from \"./PlayerListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  players: selectors.getPlayers(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n  removePlayer,\r\n  updatePlayer,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction PlayerList({ players, removePlayer, updatePlayer }: Props) {\r\n  return (\r\n    <List>\r\n      {players.map(player => (\r\n        <ListItem key={player.id}>\r\n          <ListItemText>\r\n            <PlayerListItem\r\n              name={player.name}\r\n              gender={player.gender}\r\n              onRemoveClick={() => removePlayer(player.id)}\r\n              onNameChanged={name =>\r\n                updatePlayer(new PlayerInfo(player.id, name, player.gender))\r\n              }\r\n              onSwapGenderClick={() =>\r\n                updatePlayer(\r\n                  new PlayerInfo(\r\n                    player.id,\r\n                    player.name,\r\n                    player.gender === \"Female\" ? \"Male\" : \"Female\",\r\n                  ),\r\n                )\r\n              }\r\n            />\r\n          </ListItemText>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(PlayerList);\r\n","import {\r\n    Card,\r\n    CardHeader,\r\n    Typography,\r\n    Link,\r\n    Checkbox,\r\n    withStyles,\r\n    Theme,\r\n    createStyles,\r\n    LinearProgress,\r\n    Badge,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface LoadingFailedItemProps {\r\n    errorMessage: string | undefined;\r\n    onReloadClick: () => void;\r\n}\r\n\r\ninterface WeightProps {\r\n    weight: number;\r\n    onChangeWeight: (value: number) => void;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n        },\r\n        title: {\r\n            textOverflow: \"elipsis\",\r\n            wordBreak: \"break-all\",\r\n            overflow: \"hidden\",\r\n        },\r\n        fullWidth: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LoadingFailedItemProps, WeightProps, WithStyles<typeof styles> {\r\n    url: string;\r\n    isLoading: boolean;\r\n    cardsCount: number;\r\n    weight: number;\r\n    onRemoveClick: () => void;\r\n}\r\n\r\nfunction LoadingItem() {\r\n    return <LinearProgress />;\r\n}\r\n\r\nfunction LoadingFailedItem({ errorMessage, onReloadClick }: LoadingFailedItemProps) {\r\n    return (\r\n        <Typography color=\"secondary\" variant=\"body1\" component=\"small\">\r\n            {`${errorMessage}`}\r\n            <Link\r\n                style={{ marginLeft: 15 }}\r\n                component=\"button\"\r\n                variant=\"body1\"\r\n                onClick={onReloadClick}\r\n            >\r\n                Reload\r\n            </Link>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nfunction WeightSlider({ weight, onChangeWeight }: WeightProps) {\r\n    return (\r\n        <Slider\r\n            max={1}\r\n            min={0}\r\n            step={0.05}\r\n            style={{ margin: 10, padding: '4px 0px' }}\r\n            value={weight}\r\n            onChange={(_, n) => onChangeWeight(n)}\r\n        />\r\n    );\r\n}\r\n\r\nfunction SourcesListItem({\r\n    url,\r\n    classes,\r\n    isLoading,\r\n    errorMessage,\r\n    cardsCount,\r\n    weight,\r\n    onRemoveClick,\r\n    onReloadClick,\r\n    onChangeWeight,\r\n}: Props) {\r\n    return (\r\n        <Badge\r\n            badgeContent={cardsCount}\r\n            color=\"primary\"\r\n            max={9999}\r\n            className={classes.fullWidth}\r\n            showZero={false}\r\n        >\r\n            <Card className={classes.fullWidth}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Checkbox\r\n                            checked={weight !== 0}\r\n                            style={{ margin: -10 }}\r\n                            onChange={(_, b) => (b ? onChangeWeight(0.5) : onChangeWeight(0))}\r\n                        />\r\n                    }\r\n                    titleTypographyProps={{ className: classes.title }}\r\n                    title={url}\r\n                    action={\r\n                        <IconButton onClick={onRemoveClick}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    subheader={\r\n                        isLoading ? (\r\n                            <LoadingItem />\r\n                        ) : errorMessage ? (\r\n                            <LoadingFailedItem\r\n                                errorMessage={errorMessage}\r\n                                onReloadClick={onReloadClick}\r\n                            />\r\n                        ) : (\r\n                            <WeightSlider weight={weight} onChangeWeight={onChangeWeight} />\r\n                        )\r\n                    }\r\n                />\r\n            </Card>\r\n        </Badge>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(SourcesListItem);\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadSourceAsync, removeSource, setSourceWeight } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport SourcesListItem from \"./SourcesListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    loadSource: loadSourceAsync.request,\r\n    removeSource,\r\n    setSourceWeight,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SourcesList({ sources, removeSource, loadSource, setSourceWeight }: Props) {\r\n    return (\r\n        <List>\r\n            {sources.map(source => (\r\n                <ListItem key={source.url}>\r\n                    <ListItemText>\r\n                        <SourcesListItem\r\n                            url={source.url}\r\n                            isLoading={source.isLoading}\r\n                            errorMessage={source.errorMessage}\r\n                            cardsCount={(source.cards && source.cards.length) || 0}\r\n                            weight={source.weight}\r\n                            onChangeWeight={weight =>\r\n                                setSourceWeight({ value: source.url, weight })\r\n                            }\r\n                            onRemoveClick={() => removeSource(source.url)}\r\n                            onReloadClick={() => loadSource(source.url)}\r\n                        />\r\n                    </ListItemText>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(SourcesList);\r\n","import { AppBar, Grid, Tab, Tabs, Theme } from \"@material-ui/core\";\r\nimport { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";\r\nimport * as React from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport AddPlayerForm from \"./AddPlayerForm\";\r\nimport AddSourceForm from \"./AddSourceForm\";\r\nimport Configuration from \"./Configuration\";\r\nimport PlayerList from \"./PlayerList\";\r\nimport SourcesList from \"./SourcesList\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n        },\r\n        tabContainer: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            height: \"100%\",\r\n        },\r\n        firstChildMargins: {\r\n            marginTop: 24,\r\n            marginLeft: 24,\r\n            marginRight: 24,\r\n        },\r\n        fillRemaining: {\r\n            flexGrow: 1,\r\n            height: 0,\r\n        },\r\n    });\r\n\r\ninterface Props extends LocalizeContextProps, WithStyles<typeof styles> {\r\n    theme: Theme;\r\n}\r\n\r\ninterface State {\r\n    value: number;\r\n}\r\n\r\nfunction PlayersTab({ classes }: Props) {\r\n    return (\r\n        <Grid className={classes.tabContainer}>\r\n            <div className={classes.firstChildMargins}>\r\n                <AddPlayerForm />\r\n            </div>\r\n            <div\r\n                className={classes.fillRemaining}\r\n                style={{\r\n                    overflow: \"auto\",\r\n                    margin: \"24px 24px 0 24px\",\r\n                }}\r\n            >\r\n                <PlayerList />\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction SourcesTab({ classes }: Props) {\r\n    return (\r\n        <Grid className={classes.tabContainer}>\r\n            <div className={classes.firstChildMargins}>\r\n                <AddSourceForm />\r\n            </div>\r\n            <div className={classes.fillRemaining} style={{ overflow: \"auto\" }}>\r\n                <SourcesList />\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction SettingsTab({ classes }: Props) {\r\n    return (\r\n        <Grid className={classes.tabContainer}>\r\n            <div className={classes.fillRemaining} style={{ overflowX: \"hidden\" }}>\r\n                <Configuration />\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nclass SettingsView extends React.Component<Props, State> {\r\n    readonly state = {\r\n        value: 0,\r\n    };\r\n\r\n    handleChange = (_event: any, value: number) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    handleChangeIndex = (index: number) => {\r\n        this.setState({ value: index });\r\n    };\r\n\r\n    render() {\r\n        const { classes, translate } = this.props;\r\n        const { value } = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={value}\r\n                        onChange={this.handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                    >\r\n                        <Tab label={translate(\"settings.players\")} />\r\n                        <Tab label={translate(\"settings.sources\")} />\r\n                        <Tab label={translate(\"settings.configuration\")} />\r\n                    </Tabs>\r\n                </AppBar>\r\n                {value === 0 && PlayersTab(this.props)}\r\n                {value === 1 && SourcesTab(this.props)}\r\n                {value === 2 && SettingsTab(this.props)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLocalize(withStyles(styles, { withTheme: true })(SettingsView));\r\n","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        responsiveHeader: {\r\n            fontSize: \"4rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"2rem\",\r\n            },\r\n        },\r\n        responsiveSubTitle: {\r\n            fontSize: \"1.5rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1rem\",\r\n            },\r\n        },\r\n    });\r\n\r\nfunction DrinctetHeader({ classes }: WithStyles<typeof styles>) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\" className={classes.responsiveHeader}>\r\n                Drinctet\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.responsiveSubTitle}>\r\n                The goal is to drink that!\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(DrinctetHeader);\r\n","import { PlayerSelectionInsights } from './../../core/selection/insights';\r\nimport { createStandardAction, createAsyncAction } from \"typesafe-actions\";\r\nimport { FollowUpSlide, Translator } from 'GameModels';\r\nimport { History } from 'history';\r\nimport { SlideSelectionInsights } from '@core/selection/insights';\r\nimport { CardRef } from '@core/cards/card-ref';\r\n\r\nexport const startGame = createStandardAction(\"START_GAME\")<History>();\r\n\r\nexport const cancelGame = createStandardAction(\"CANCEL_GAME\")();\r\n\r\nexport const requestSlideAsync = createAsyncAction(\r\n    \"NEXT_SLIDE_REQUEST\",\r\n    \"NEXT_SLIDE_SUCCESS\",\r\n    \"NEXT_SLIDE_FAILURE\",\r\n)<Translator, {slide: string, insights: SlideSelectionInsights | null}, string>();\r\n\r\nexport const applyCard = createStandardAction(\"APPLY_CARD\")<CardRef>();\r\n\r\nexport const setSlideState = createStandardAction(\"SET_SLIDE_STATE\")<{state: any, insights: PlayerSelectionInsights | null}>();\r\n\r\nexport const enqueueFollowUp = createStandardAction(\"ADD_FOLLOW_UP\")<FollowUpSlide>();\r\nexport const activateFollowUp = createStandardAction(\"ACTIVATE_FOLLOW_UP\")<FollowUpSlide>();\r\n\r\nexport const setWillPowerLocked = createStandardAction(\"SET_WILL_POWER_LOCKED\")<boolean>();\r\nexport const setWillPower = createStandardAction(\"SET_WILL_POWER\")<number>();\r\nexport const addWillPowerMemory = createStandardAction(\"ADD_WILL_POWER_MEMORY\")<string[]>();\r\n","import { createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { startGame } from \"../../game/actions\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        color: \"white\",\r\n        width: \"100%\",\r\n        backgroundColor: \"#e74c3c\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#c0392b\",\r\n        },\r\n    },\r\n});\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    settings: state.settings,\r\n});\r\n\r\nconst dispatchProps = {\r\n    startGame,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps &\r\n    RouteComponentProps;\r\n\r\nclass StartButton extends React.Component<Props> {\r\n    startGame = () => {\r\n        const { startGame, history } = this.props;\r\n\r\n        startGame(history);\r\n    };\r\n\r\n    render() {\r\n        const { classes, settings } = this.props;\r\n\r\n        const arePlayersSelected = settings.players.length > 0;\r\n        const areSourcesAdded = settings.sources.filter(x => x.cards !== undefined).length > 0;\r\n        const areSourcesLoading = settings.sources.filter(x => x.isLoading).length > 0;\r\n\r\n        return (\r\n            <Fab\r\n                variant=\"extended\"\r\n                size=\"large\"\r\n                disabled={!arePlayersSelected || !areSourcesAdded || areSourcesLoading}\r\n                classes={{ root: classes.root }}\r\n                onClick={this.startGame}\r\n            >\r\n                <Translate id=\"welcome.startGame\" />\r\n            </Fab>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withRouter,\r\n)(StartButton) as React.ComponentType;\r\n","import { Grid, createStyles, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\nimport DrinctetHeader from \"./DrinctetHeader\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    header: {\r\n        margin: 20,\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ntype Props = WithStyles<typeof styles>;\r\n\r\ninterface State {\r\n    viewportHeight: number;\r\n}\r\n\r\nclass WelcomeView extends Component<Props, State> {\r\n    readonly state = {\r\n        viewportHeight: window.innerHeight,\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.updateHeight = this.updateHeight.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    updateHeight(): void {\r\n        this.setState({ viewportHeight: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { viewportHeight } = this.state;\r\n        return (\r\n            <div className={classes.root}>\r\n                {viewportHeight > 500 ? (\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12} md={6} className={classes.header}>\r\n                            <DrinctetHeader />\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : null}\r\n                <div style={{ flexGrow: 1, height: 0 }}>\r\n                    <Grid container justify=\"center\" style={{ height: \"100%\" }}>\r\n                        <Grid item xs={12} md={6}>\r\n                            <SettingsView />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Grid container justify=\"center\">\r\n                    <Grid item xs={12} md={6} container justify=\"center\">\r\n                        <Grid item xs={10} lg={8} style={{ padding: \"10px 20px 20px 20px\" }}>\r\n                            <StartButton />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(WelcomeView);\r\n","import { LocalizeContextProps } from \"react-localize-redux\";\r\nimport { Translator } from \"GameModels\";\r\n\r\nexport function toTranslator(localize: LocalizeContextProps): Translator {\r\n    return {\r\n        languageCode: localize.activeLanguage.code,\r\n        translate: x => localize.translate(x) as string,\r\n    }\r\n}","import { ParsingOptions } from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { Theme, Typography } from \"@material-ui/core\";\r\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\r\n\r\nexport function getRootStyles(): CSSProperties {\r\n    return {\r\n        backgroundColor: \"transparent\",\r\n        height: \"100%\",\r\n        fontSize: 25,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        color: \"white\",\r\n        cursor: \"pointer\",\r\n        \"-webkit-tap-highlight-color\": \"rgba(255, 255, 255, 0)\"\r\n    };\r\n}\r\n\r\nexport function getContentStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        textAlign: \"center\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            width: \"100%\",\r\n            marginLeft: 30,\r\n            marginRight: 30,\r\n            fontSize: 20,\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"80%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"60%\",\r\n        },\r\n    }\r\n}\r\n\r\nexport function spaceHeaderStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        visibility: \"hidden\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: \"2rem\",\r\n        }\r\n    };\r\n}\r\n\r\nexport function getHeaderStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        color: \"white\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: \"2rem\",\r\n        }\r\n    }\r\n}\r\n\r\nfunction MyParagaph({ children, ...props }: any) {\r\n    return (\r\n        <Typography {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5, color: \"white\", fontSize: \"1.2rem\" }}>\r\n            {children}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nfunction MyH3({ children, ...props }: any) {\r\n    return (\r\n        <h3 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h3>\r\n    );\r\n}\r\n\r\nfunction MyH4({ children, ...props }: any) {\r\n    return (\r\n        <h4 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h4>\r\n    );\r\n}\r\n\r\nexport const defaultMarkdownOptions: ParsingOptions = {\r\n    overrides: {\r\n        p: {\r\n            component: MyParagaph,\r\n            props: {},\r\n        },\r\n        h3: {\r\n            component: MyH3,\r\n            props: {},\r\n        },\r\n        h4: {\r\n            component: MyH4,\r\n            props: {},\r\n        },\r\n    },\r\n};\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState, RootAction } from \"DrinctetTypes\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport * as actions from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { SlidePresenter } from \"./base/slide-presenter\";\r\nimport { Keyframes, animated } from \"react-spring/renderprops\";\r\nimport { useSpring, animated as animatedDom } from \"react-spring\";\r\n\r\nconst color = \"#2980b9\";\r\nconst progressColor = \"#3498db\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as OpeningSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: actions.requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            backgroundColor: color,\r\n            position: \"relative\",\r\n        },\r\n        rootProgress: {\r\n            height: \"100%\",\r\n            backgroundColor: progressColor,\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            bottom: 0,\r\n            zIndex: 5,\r\n        },\r\n        content: {\r\n            ...getContentStyles(theme),\r\n            zIndex: 10,\r\n        },\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 20,\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction OpeningSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state, translate } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const { continuationDate } = state;\r\n    const remaining = Math.abs(+continuationDate - Date.now());\r\n\r\n    const Container = Keyframes.Spring(async (next: any) => {\r\n        await next({\r\n            from: { width: \"0%\" },\r\n            width: \"100%\",\r\n            config: {\r\n                duration: remaining,\r\n            },\r\n        });\r\n        await next({\r\n            from: { backgroundColor: progressColor },\r\n            backgroundColor: color,\r\n            config: { duration: 200 },\r\n        });\r\n        await next({\r\n            from: { backgroundColor: color },\r\n            backgroundColor: progressColor,\r\n            config: { duration: 200 },\r\n        });\r\n    }) as any;\r\n\r\n    const tapToContinueProps = useSpring({\r\n        opacity: 1,\r\n        from: { opacity: 0 },\r\n        delay: remaining,\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={classes.root}\r\n            onClick={() => new Date() > continuationDate && nextSlide(toTranslator(props))}\r\n        >\r\n            <Container native>\r\n                {(props: any) => <animated.div className={classes.rootProgress} style={props} />}\r\n            </Container>\r\n            <div className={classes.content}>\r\n                <Typography variant=\"h5\" className={classes.header} gutterBottom>\r\n                    <Translate id=\"game.welcome\" />\r\n                </Typography>\r\n                <Markdown\r\n                    children={translate(\"game.openingInfo\") as string}\r\n                    options={defaultMarkdownOptions}\r\n                />\r\n                <animatedDom.div style={tapToContinueProps}>\r\n                    <Typography style={{ color: \"white\", marginTop: 20 }} variant=\"h6\">\r\n                        <Translate id=\"game.tapToContinue\" />\r\n                    </Typography>\r\n                </animatedDom.div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(OpeningSlideComponent) as React.ComponentType;\r\n\r\ninterface OpeningSlideState {\r\n    continuationDate: Date;\r\n}\r\n\r\nexport class OpeningSlide implements SlidePresenter {\r\n    slideType = \"OpeningSlide\";\r\n    requiredCards = [];\r\n    backgroundColor = color;\r\n\r\n    initialize(): RootAction[] {\r\n        const date = new Date();\r\n        date.setSeconds(date.getSeconds() + 5);\r\n\r\n        return [\r\n            this.setSlideState({\r\n                continuationDate: date,\r\n            }),\r\n        ];\r\n    }\r\n\r\n    initializeFollowUp(): RootAction[] {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    setSlideState(state: OpeningSlideState): RootAction {\r\n        return actions.setSlideState({ state, insights: null });\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return <Component />;\r\n    }\r\n}\r\n","// Source: https://github.com/vasilevich/react-fullscreen-crossbrowser (MIT)\r\n\r\nconst key: any = {\r\n    fullscreenEnabled: 0,\r\n    fullscreenElement: 1,\r\n    requestFullscreen: 2,\r\n    exitFullscreen: 3,\r\n    fullscreenchange: 4,\r\n    fullscreenerror: 5,\r\n};\r\n\r\nconst webkit = [\r\n    \"webkitFullscreenEnabled\",\r\n    \"webkitFullscreenElement\",\r\n    \"webkitRequestFullscreen\",\r\n    \"webkitExitFullscreen\",\r\n    \"webkitfullscreenchange\",\r\n    \"webkitfullscreenerror\",\r\n];\r\n\r\nconst moz = [\r\n    \"mozFullScreenEnabled\",\r\n    \"mozFullScreenElement\",\r\n    \"mozRequestFullScreen\",\r\n    \"mozCancelFullScreen\",\r\n    \"mozfullscreenchange\",\r\n    \"mozfullscreenerror\",\r\n];\r\n\r\nconst ms = [\r\n    \"msFullscreenEnabled\",\r\n    \"msFullscreenElement\",\r\n    \"msRequestFullscreen\",\r\n    \"msExitFullscreen\",\r\n    \"MSFullscreenChange\",\r\n    \"MSFullscreenError\",\r\n];\r\n\r\n// so it doesn't throw if no window or document\r\nconst document: any =\r\n    typeof window !== \"undefined\" && typeof window.document !== \"undefined\" ? window.document : {};\r\n\r\nconst vendor =\r\n    (\"fullscreenEnabled\" in document && Object.keys(key)) ||\r\n    (webkit[0] in document && webkit) ||\r\n    (moz[0] in document && moz) ||\r\n    (ms[0] in document && ms) ||\r\n    [];\r\n\r\nexport default class Fullscreen {\r\n    static requestFullscreen(element: any) {\r\n        return element[vendor[key.requestFullscreen]]();\r\n    }\r\n    static requestFullscreenFunction(element: any) {\r\n        return element[vendor[key.requestFullscreen]];\r\n    }\r\n    static get exitFullscreen() {\r\n        return document[vendor[key.exitFullscreen]].bind(document);\r\n    };\r\n    static addEventListener(type: any, handler: any, options: any) {\r\n        return document.addEventListener(vendor[key[type]], handler, options);\r\n    }\r\n    static removeEventListener(type: any, handler: any, options: any) {\r\n        return document.removeEventListener(vendor[key[type]], handler, options);\r\n    }\r\n    static get fullscreenEnabled() {\r\n        return Boolean(document[vendor[key.fullscreenEnabled]]);\r\n    }\r\n    static get fullscreenElement() {\r\n        return document[vendor[key.fullscreenElement]];\r\n    }\r\n    static get onfullscreenchange() {\r\n        return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()];\r\n    }\r\n    static set onfullscreenchange(handler) {\r\n        document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler;\r\n    }\r\n    static get onfullscreenerror() {\r\n        return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()];\r\n    }\r\n    static set onfullscreenerror(handler) {\r\n        document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler;\r\n    }\r\n}\r\n","import {\r\n    createStyles,\r\n    IconButton,\r\n    ListItemIcon,\r\n    Menu,\r\n    MenuItem,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport FeedbackIcon from \"@material-ui/icons/Feedback\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport FullscreenIcon from \"@material-ui/icons/Fullscreen\";\r\nimport FullscreenExitIcon from \"@material-ui/icons/FullscreenExit\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component, ComponentType } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\nimport Fullscreen from \"@utils/fullscreen\";\r\n\r\nconst styles = createStyles({\r\n    button: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles> &\r\n    RouterProps;\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n    activeFollowUp: state.game.activeFollowUp,\r\n    selectedCard: state.game.selectedCard,\r\n});\r\n\r\nconst dispatchProps = {};\r\n\r\ninterface State {\r\n    anchorEl: HTMLElement | null;\r\n    isFullscreen: boolean;\r\n}\r\n\r\nclass GameOptions extends Component<Props, State> {\r\n    readonly state: State = {\r\n        anchorEl: null,\r\n        isFullscreen: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        Fullscreen.onfullscreenchange = () => {\r\n            this.setState(state => ({ ...state, isFullscreen: Fullscreen.fullscreenElement }));\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Fullscreen.onfullscreenchange = null;\r\n    }\r\n\r\n    handleMenuOpenClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    handleNavigate = (path: string) => {\r\n        this.handleClose();\r\n        this.props.history.push(`/game/${path}`);\r\n    };\r\n\r\n    toggleFullscreen = () => {\r\n        const { isFullscreen } = this.state;\r\n        if (isFullscreen) {\r\n            Fullscreen.exitFullscreen();\r\n        } else {\r\n            Fullscreen.requestFullscreen(window.document.documentElement);\r\n        }\r\n\r\n        this.handleClose();\r\n    };\r\n\r\n    render() {\r\n        const { classes, selectedCard } = this.props;\r\n        const { anchorEl, isFullscreen } = this.state;\r\n        const isOpen = anchorEl !== null;\r\n\r\n        return (\r\n            <div>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={this.handleMenuOpenClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={isOpen}\r\n                    onClose={this.handleClose}\r\n                    PaperProps={{\r\n                        style: {\r\n                            width: 200,\r\n                        },\r\n                    }}\r\n                >\r\n                    <MenuItem onClick={() => this.handleNavigate(\"settings\")}>\r\n                        <ListItemIcon>\r\n                            <SettingsIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.settings\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => this.handleNavigate(\"insights\")}>\r\n                        <ListItemIcon>\r\n                            <DonutLargeIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.insights\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.handleClose} disabled={selectedCard === null}>\r\n                        <ListItemIcon>\r\n                            <FeedbackIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.reportCard\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.toggleFullscreen}>\r\n                        <ListItemIcon>\r\n                            {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\r\n                        </ListItemIcon>\r\n                        <Translate id={isFullscreen ? \"game.options.exitFullscreen\" : \"game.options.fullscreen\"} />\r\n                    </MenuItem>\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    withLocalize,\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withRouter,\r\n)(GameOptions) as ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slide: state.game.selectedSlide,\r\n    slideInsights: state.game.slideInsights,\r\n    playerInsights: state.game.playerInsights,\r\n    players: state.settings.players,\r\n    cardRef: state.game.selectedCard,\r\n});\r\n\r\nconst styles = createStyles({\r\n    section: {\r\n        marginTop: 10,\r\n    },\r\n    scrollableTable: {\r\n        overflow: \"auto\",\r\n        width: \"100%\",\r\n    },\r\n    tableCellNoBreak: {\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles>;\r\n\r\nfunction renderPredefinedPlayers({ playerInsights, players }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography>\r\n                <Translate id=\"insights.predefinedPlayers\" />\r\n                {\": \"}\r\n                {playerInsights!.predefined\r\n                    .map(x => players.find(y => y.id === x))\r\n                    .filter(x => x != null)\r\n                    .map(x => x!.name)\r\n                    .join(\", \")}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderPlayerInsights(props: Props) {\r\n    const { playerInsights, players, classes } = props;\r\n    return (\r\n        <div className={classes.scrollableTable}>\r\n            {playerInsights!.predefined.length > 0 ? renderPredefinedPlayers(props) : null}\r\n            {playerInsights!.rounds.map((x, i) => {\r\n                const statistics = percentageFixedTotal(x, x => x.weight, 1000);\r\n                return (\r\n                    <table key={i}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className={classes.tableCellNoBreak}>\r\n                                    <Typography>\r\n                                        <Translate id=\"insights.player\" data={{ number: i + 1 }} />:\r\n                                    </Typography>\r\n                                </td>\r\n                                {statistics.map(y => {\r\n                                    const player = players.find(p => p.id === y.value.playerId);\r\n                                    let element: JSX.Element;\r\n                                    if (player === undefined) {\r\n                                        element = (\r\n                                            <span>\r\n                                                <i>\r\n                                                    <Translate id=\"insights.playerRemoved\" />\r\n                                                </i>{\" \"}\r\n                                                ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    } else {\r\n                                        element = (\r\n                                            <span>\r\n                                                {player.name} ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <td key={y.value.playerId} style={{ paddingLeft: 10 }}>\r\n                                            <Typography>\r\n                                                {conditionalBold(element, y.value.chosen)}\r\n                                            </Typography>\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction conditionalBold(element: JSX.Element, isBold: boolean): JSX.Element {\r\n    if (isBold) {\r\n        return <b>{element}</b>;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nfunction renderSlideWeights({ slide, slideInsights }: Props) {\r\n    const slides = slideInsights!.weights;\r\n    const statistics = percentageFixedTotal(slides, x => x.weight, 1000);\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {statistics.map(x => (\r\n                    <tr key={x.value.value}>\r\n                        <td>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.value.value}</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                        <td style={{ paddingLeft: 10 }}>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.part / 10}%</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nclass InsightsCurrentSlide extends Component<Props> {\r\n    render() {\r\n        const { playerInsights, classes, cardRef } = this.props;\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.currentSlide\" />\r\n                </Typography>\r\n                <Typography>\r\n                    <Translate id=\"insights.currentCard\" />\r\n                    {\": \"}\r\n                    {cardRef === null ? (\r\n                        <i>\r\n                            <Translate id=\"insights.noCard\" />\r\n                        </i>\r\n                    ) : (\r\n                        <span>\r\n                            <Translate\r\n                                id=\"insights.cardInfo\"\r\n                                data={{\r\n                                    name: cardRef.card.type,\r\n                                    id: cardRef.card.id,\r\n                                    wp: cardRef.card.willPower === undefined ? <Translate id=\"insights.universal\"/> : cardRef.card.willPower,\r\n                                    url: cardRef.deckUrl\r\n                                }}\r\n                            />\r\n                        </span>\r\n                    )}\r\n                </Typography>\r\n                {renderSlideWeights(this.props)}\r\n\r\n                <Typography variant=\"h6\" className={classes.section}>\r\n                    <Translate id=\"insights.playerSelection\" />\r\n                </Typography>\r\n                {playerInsights === null ? (\r\n                    <Typography>\r\n                        <i>\r\n                            <Translate id=\"insights.noPlayers\" />\r\n                        </i>\r\n                    </Typography>\r\n                ) : (\r\n                    renderPlayerInsights(this.props)\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsCurrentSlide) as React.ComponentType;\r\n","import { createStyles, FormControlLabel, FormGroup, Switch, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { setWillPower, setWillPowerLocked } from \"../actions\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n    isLocked: state.game.isWillPowerLocked,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n};\r\n\r\nconst styles = \r\n    createStyles({\r\n        toggleContainer: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & WithStyles<typeof styles>;\r\n\r\nfunction InsightsWillPowerView({\r\n    currentWillPower,\r\n    isLocked,\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n    classes,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                <Translate id=\"insights.willPower\" />\r\n            </Typography>\r\n            <div className={classes.toggleContainer}>\r\n                <ToggleButtonGroup\r\n                    exclusive\r\n                    value={currentWillPower}\r\n                    onChange={(_, y) => setWillPower(y)}\r\n                    children={[1, 2, 3, 4, 5].map(x => (\r\n                        <ToggleButton key={x} value={x}>\r\n                            {x}\r\n                        </ToggleButton>\r\n                    ))}\r\n                />\r\n            </div>\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch checked={isLocked} onChange={(_, x) => setWillPowerLocked(x)} />\r\n                    }\r\n                    label={<Translate id=\"insights.lockWillPower\" />}\r\n                />\r\n            </FormGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsWillPowerView) as React.ComponentType;\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { CardDeck } from \"@core/card-deck\";\r\n\r\nexport class Insights {\r\n    public playerSelection: PlayerSelectionInsights | null = null;\r\n    public slideWeights: SlideSelectionInsights | null  = null;\r\n}\r\n\r\nexport interface PlayerSelectionInsights {\r\n    predefined: string[];\r\n    rounds: Array<PlayerSelection[]>;\r\n}\r\n\r\nexport interface SlideSelectionInsights {\r\n    weights: Weighted<string>[];\r\n}\r\n\r\nexport interface PlayerSelection {\r\n    chosen: boolean;\r\n    weight: number;\r\n    playerId: string;\r\n}\r\n\r\nexport interface CardsInsight {\r\n    decks: Weighted<CardDeck>[];\r\n    willPower: Weighted<{willPower: number | null, count: number}>[];\r\n    totalCards: number;\r\n}\r\n","import { Weighted } from \"./../weighted\";\r\n\r\nexport type RNG = () => number;\r\nconst defaultRandomGenerator: RNG = () => Math.random();\r\n\r\nexport function selectRandomWeighted<T>(\r\n    items: T[],\r\n    getWeight: (item: T) => number,\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    if (items.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const weights: Array<{ item: T; weight: number }> = [];\r\n    let totalWeight: number = 0;\r\n    for (const item of items) {\r\n        const weight = getWeight(item);\r\n        weights.push({ item, weight });\r\n\r\n        totalWeight += weight;\r\n    }\r\n\r\n    let randomWeight = totalWeight * random();\r\n    for (const { item, weight } of weights) {\r\n        if (weight === 0) {\r\n            continue;\r\n        }\r\n        randomWeight -= weight;\r\n\r\n        if (randomWeight <= 0) {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function selectRandomFromWeightedList<T>(\r\n    items: Weighted<T>[],\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    const result = selectRandomWeighted(items, item => item.weight, random);\r\n    if (result === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    return result.value;\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { Weighted } from \"@core/weighted\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { SelectionAlgorithm } from \"./selection-algorithm\";\r\nimport { RNG, selectRandomFromWeightedList, selectRandomWeighted } from \"./utils\";\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport abstract class SelectionAlgorithmBase implements SelectionAlgorithm {\r\n    protected readonly random: RNG;\r\n\r\n    constructor(protected readonly status: GameStatus, random: RNG) {\r\n        this.random = random;\r\n    }\r\n\r\n    public abstract selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[];\r\n    public abstract selectNextSlide(availableSlides: SlideRegistration[]): string | undefined;\r\n    public abstract selectCard(cardType: string): CardRef;\r\n    public abstract getSips(min: number): number;\r\n    public abstract recomputeWillPower(memory: string[]): { willPower: number; memory: string[] };\r\n\r\n    public getRandom(): number {\r\n        return this.random();\r\n    }\r\n\r\n    public selectRandomWeighted<T>(items: T[], getWeight: (item: T) => number): T | undefined {\r\n        return selectRandomWeighted(items, getWeight, () => this.random());\r\n    }\r\n\r\n    protected selectRandomFromWeightedList<T>(items: Weighted<T>[]): T | undefined {\r\n        return selectRandomFromWeightedList(items, () => this.random());\r\n    }\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport _ from \"lodash\";\r\nimport { higherArrangementPropabilityTags } from \"../../preferences\";\r\nimport { CardDeck } from \"../card-deck\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { Gender, PlayerInfo } from \"../player-info\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { Weighted } from \"../weighted\";\r\nimport { CardsInsight, Insights, PlayerSelection, PlayerSelectionInsights } from \"./insights\";\r\nimport { SelectionAlgorithmBase } from \"./selection-algorithm-base\";\r\n\r\nexport class MelinaAlgorithm extends SelectionAlgorithmBase {\r\n    /** the percentage of cards that were played from one deck once the cards get weighted much lower */\r\n    private readonly deckExhaustionLimit = 0.1;\r\n\r\n    public readonly insights: Insights = new Insights();\r\n\r\n    public getAllCardDeckStatistics(cardType: string | null = null): CardsInsight {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n        const deckWeights: { [deckUrl: string]: number } = {};\r\n        const willPowerWeights: { [willPower: number]: number } = {};\r\n        const willPowerCounter: { [willPower: number]: number } = {};\r\n\r\n        const allCards = new Array<Weighted<CardRef>>();\r\n        for (const deck of weightedDecks) {\r\n            allCards.push(\r\n                ...deck.cards.map(x => ({\r\n                    value: { card: x.value, deckUrl: deck.deck.url },\r\n                    weight: x.weight * deck.deck.weight,\r\n                })),\r\n            );\r\n        }\r\n\r\n        this.boostWillPower(allCards);\r\n\r\n        for (const deck of this.status.decks) {\r\n            deckWeights[deck.url] = 0;\r\n        }\r\n\r\n        for (const card of allCards) {\r\n            const { value, weight } = card;\r\n\r\n            const deck = this.status.decks.find(x => x.url === value.deckUrl)!;\r\n\r\n            deckWeights[value.deckUrl] += weight * deck.weight;\r\n\r\n            const willPower = value.card.willPower || 0;\r\n            if (willPowerCounter[willPower] === undefined) {\r\n                willPowerWeights[willPower] = 0;\r\n                willPowerCounter[willPower] = 0;\r\n            }\r\n\r\n            willPowerWeights[willPower] += weight * deck.weight;\r\n            willPowerCounter[willPower] += 1;\r\n        }\r\n        \r\n        const willPowerWeightsArray: Weighted<{\r\n            willPower: number | null;\r\n            count: number;\r\n        }>[] = Object.keys(willPowerWeights).map(propName => {\r\n            const willPower = Number(propName);\r\n            return ({\r\n                value: {\r\n                    willPower: willPower === 0 ? null : willPower,\r\n                    count: willPowerCounter[willPower],\r\n                },\r\n                weight: willPowerWeights[willPower],\r\n            });\r\n        });\r\n\r\n        const decksArray = Object.keys(deckWeights).map(url => {\r\n            const deck = this.status.decks.find(x => x.url === url)!;\r\n            return { value: deck, weight: deckWeights[url] * deck.weight };\r\n        });\r\n\r\n        return { decks: decksArray, willPower: willPowerWeightsArray, totalCards: allCards.length };\r\n    }\r\n\r\n    public selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[] {\r\n        if (playerSettings.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (playerSettings.length > this.status.players.length) {\r\n            throw new Error(\"More players were requested than available.\");\r\n        }\r\n\r\n        const forArrangement = new Array<string>();\r\n        const result: (PlayerInfo | null)[] = playerSettings.map((_, i) =>\r\n            definedPlayers.length > i ? definedPlayers[i] : null,\r\n        );\r\n\r\n        for (const player of definedPlayers.filter(x => x !== null).map(x => x!)) {\r\n            const arrangement = this.status.arrangements.find(\r\n                x => x.p1 === player.id || x.p2 === player.id,\r\n            );\r\n\r\n            if (arrangement !== undefined) {\r\n                if (arrangement.p1 === player.id) {\r\n                    forArrangement.push(arrangement.p2);\r\n                } else {\r\n                    forArrangement.push(arrangement.p1);\r\n                }\r\n            }\r\n        }\r\n\r\n        let resultCounter = 0;\r\n        const insights: PlayerSelectionInsights = {\r\n            predefined: definedPlayers.filter(x => x != null).map(x => x!.id),\r\n            rounds: [],\r\n        };\r\n\r\n        while (result.findIndex(x => x === null) !== -1) {\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                if (result[i] !== null) {\r\n                    continue;\r\n                }\r\n\r\n                const gender = playerSettings[i];\r\n                let sourceList: PlayerInfo[];\r\n\r\n                switch (gender) {\r\n                    case \"None\":\r\n                        sourceList = this.status.players;\r\n                        break;\r\n                    case \"Male\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Male\");\r\n                        break;\r\n                    case \"Female\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Female\");\r\n                        break;\r\n                    default:\r\n                        continue;\r\n                }\r\n\r\n                const source = sourceList.filter(x => !_.includes(result, x));\r\n                const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n                const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n\r\n                const selectionRoundInsights = new Array<PlayerSelection>();\r\n                const player = this.selectRandomWeighted(source, p => {\r\n                    let weight = 1;\r\n\r\n                    if (_.some(forArrangement, x => x === p.id)) {\r\n                        if (\r\n                            _.some(higherArrangementPropabilityTags, x =>\r\n                                _.some(tags, y => x === y.toLowerCase()),\r\n                            )\r\n                        ) {\r\n                            weight += source.length;\r\n                        } else {\r\n                            // everyone has ~ the weight 1\r\n                            weight += source.length * 0.5;\r\n                        }\r\n                    }\r\n\r\n                    if (gender === \"None\" && this.status.preferOppositeGenders) {\r\n                        if (malesCount > femalesCount) {\r\n                            if (p.gender === \"Female\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        } else if (femalesCount > malesCount) {\r\n                            if (p.gender === \"Male\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    selectionRoundInsights.push({ playerId: p.id, weight, chosen: false });\r\n                    return weight;\r\n                })!;\r\n\r\n                selectionRoundInsights.find(x => x.playerId === player.id)!.chosen = true;\r\n                insights.rounds.push(selectionRoundInsights);\r\n\r\n                result[i] = player;\r\n                resultCounter++;\r\n\r\n                const arrangement = this.status.arrangements.find(\r\n                    x => x.p1 === player.id || x.p2 === player.id,\r\n                );\r\n                if (arrangement !== undefined) {\r\n                    if (arrangement.p1 === player.id) {\r\n                        forArrangement.push(arrangement.p2);\r\n                    } else {\r\n                        forArrangement.push(arrangement.p1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (resultCounter === result.length) {\r\n                break;\r\n            }\r\n\r\n            // here we have to handle Same/Opposite genders\r\n\r\n            const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n            const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n            let dominant: Gender | null = null;\r\n\r\n            if (malesCount > femalesCount) dominant = \"Male\";\r\n            else if (femalesCount > malesCount) dominant = \"Female\";\r\n\r\n            if (dominant === null) {\r\n                // we try to change a 'Same' gender, so Same and opposite stay on different sites\r\n                // because the player gender will become dominant and opposite is always against dominant\r\n\r\n                let changed = false;\r\n                for (let i = 0; i < playerSettings.length; i++) {\r\n                    if (playerSettings[i] === \"Same\") {\r\n                        playerSettings[i] = \"None\";\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!changed) {\r\n                    // we have the problem here that we only have opposite genders left but we have no dominant gender.\r\n                    // We change the first opposite to none (so it gets filled) and all other to Same, so they will get\r\n                    // the same gender like the first item that was changed to Same\r\n\r\n                    for (let i = 0; i < playerSettings.length; i++) {\r\n                        if (playerSettings[i] === \"Opposite\") {\r\n                            if (!changed) {\r\n                                playerSettings[i] = \"None\";\r\n                                changed = true;\r\n                            } else {\r\n                                playerSettings[i] = \"Same\";\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                const gender = playerSettings[i];\r\n\r\n                switch (gender) {\r\n                    case \"Opposite\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Male\";\r\n                        } else {\r\n                            playerSettings[i] = \"Female\";\r\n                        }\r\n                        break;\r\n                    case \"Same\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Female\";\r\n                        } else {\r\n                            playerSettings[i] = \"Male\";\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.insights.playerSelection = insights;\r\n        return result.map(x => x!);\r\n    }\r\n\r\n    public selectCard(cardType: string): CardRef {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n\r\n        const allCards = new Array<Weighted<CardRef>>();\r\n        for (const deck of weightedDecks) {\r\n            allCards.push(\r\n                ...deck.cards.map(x => ({\r\n                    value: { card: x.value, deckUrl: deck.deck.url },\r\n                    weight: x.weight * deck.deck.weight,\r\n                })),\r\n            );\r\n        }\r\n\r\n        this.boostWillPower(allCards);\r\n\r\n        for (const card of allCards) {\r\n            const deck = this.status.decks.find(x => x.url === card.value.deckUrl)!;\r\n            card.weight *= deck.weight;\r\n        }\r\n\r\n        const selected = this.selectRandomWeighted(allCards, x => x.weight);\r\n        if (selected === undefined) {\r\n            throw new Error(\"That should not actually happen\");\r\n        }\r\n\r\n        return selected.value;\r\n    }\r\n\r\n    private boostWillPower(cards: Weighted<CardRef>[]): void {\r\n        const willPower = this.status.willPower;\r\n\r\n        const perfectCards = cards.filter(\r\n            x => x.value.card.willPower === willPower || x.value.card.willPower === willPower - 1,\r\n        );\r\n        const unplayedCards = perfectCards.filter(\r\n            x =>\r\n                this.status.cardsHistory.findIndex(\r\n                    y => y.deckUrl === x.value.deckUrl && y.card.id === x.value.card.id,\r\n                ) === -1,\r\n        );\r\n\r\n        // played cards / all cards\r\n        const percentage = (perfectCards.length - unplayedCards.length) / perfectCards.length;\r\n\r\n        // console.log(\r\n        //     `wp: ${willPower}, perfect: ${perfectCards.length}, unplayed: ${\r\n        //         unplayedCards.length\r\n        //     }, percentage: ${percentage}`,\r\n        // );\r\n\r\n        // we don't boost if we already played 10% (deckExhaustionLimit) of the cards\r\n        if (this.deckExhaustionLimit > percentage && unplayedCards.length > 50) {\r\n            const totalWeight = cards.reduce((x, y) => x + y.weight, 0);\r\n            const unplayedWeight = unplayedCards.reduce((x, y) => x + y.weight, 0);\r\n\r\n            console.log(`total: ${totalWeight}, unplayed: ${unplayedWeight}`);\r\n\r\n            const targetPercentage = 0.7;\r\n            if (totalWeight * targetPercentage > unplayedWeight) {\r\n                const factor =\r\n                    totalWeight * targetPercentage -\r\n                    unplayedWeight +\r\n                    unplayedWeight / unplayedWeight;\r\n\r\n                // const diff = (totalWeight * targetPercentage - unplayedWeight);\r\n                // const add = diff / unplayedCards.length;\r\n                console.log(\"factor: \" + factor);\r\n\r\n                // const add = (totalWeight - unplayedWeight) / perfectCards.length;\r\n                for (const perfectCard of unplayedCards) {\r\n                    perfectCard.weight = perfectCard.weight * factor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public selectNextSlide(availableSlides: SlideRegistration[]): string | undefined {\r\n        const uniqueCardTypes: string[] = [];\r\n        for (const slide of availableSlides) {\r\n            for (const cardType of slide.requestedCards) {\r\n                if (uniqueCardTypes.findIndex(x => x === cardType) === -1) {\r\n                    uniqueCardTypes.push(cardType);\r\n                }\r\n            }\r\n        }\r\n\r\n        const cardTypeRatings: { [type: string]: number } = {};\r\n        for (const cardType of uniqueCardTypes) {\r\n            const weightedDecks = this.weightCards(\r\n                this.status.decks.filter(x => x.weight !== 0),\r\n                cardType,\r\n            );\r\n\r\n            const allCards: Array<Weighted<Card>> = [];\r\n            for (const cardDeck of weightedDecks) {\r\n                allCards.push(...cardDeck.cards);\r\n            }\r\n\r\n            if (allCards.length === 0) {\r\n                cardTypeRatings[cardType] = 0;\r\n            } else {\r\n                cardTypeRatings[cardType] =\r\n                    0.75 + (0.25 * allCards.reduce((x, y) => x + y.weight, 0)) / allCards.length;\r\n            }\r\n        }\r\n\r\n        const weightedSlides: Array<Weighted<SlideRegistration>> = [];\r\n        for (const slide of availableSlides) {\r\n            const slideSettings = this.status.slides.find(x => x.value === slide.slideType);\r\n\r\n            if (slideSettings === undefined || slideSettings.weight === 0) {\r\n                continue;\r\n            }\r\n\r\n            let factor = 1;\r\n            for (const cardType of slide.requestedCards) {\r\n                factor = Math.min(cardTypeRatings[cardType], factor);\r\n            }\r\n\r\n            weightedSlides.push({ weight: factor * slideSettings.weight, value: slide });\r\n        }\r\n\r\n        if (weightedSlides.length > 2 && this.status.slidesHistory.length > 0) {\r\n            const lastSlideType = this.status.slidesHistory[0];\r\n            const lastSlide = weightedSlides.find(x => x.value.slideType === lastSlideType);\r\n            if (lastSlide !== undefined) {\r\n                lastSlide.weight = 0;\r\n            }\r\n        }\r\n        \r\n        this.insights.slideWeights = {\r\n            weights: weightedSlides.map(x => ({ weight: x.weight, value: x.value.slideType })),\r\n        };\r\n\r\n        const selected = this.selectRandomWeighted(weightedSlides, slide => slide.weight);\r\n        if (selected === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return selected.value.slideType;\r\n    }\r\n\r\n    public getSips(min: number): number {\r\n        min = Math.max(min, 1);\r\n\r\n        return Math.max(min,  Math.floor(this.getRandom() * 4) + 1);\r\n    }\r\n\r\n    protected weightCards(\r\n        decks: CardDeck[],\r\n        type: string | null,\r\n    ): Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> {\r\n        const filtered: CardDeck[] = decks.map(x => ({\r\n            cards: x.cards.filter(card => {\r\n                if (type !== null && card.type !== type) {\r\n                    return false;\r\n                }\r\n                return (\r\n                    card.tags.length === 0 ||\r\n                    card.tags.findIndex(x => {\r\n                        const weightedTag = this.status.tags.find(y => y.value === x);\r\n                        return weightedTag !== undefined && weightedTag.weight === 0;\r\n                    }) === -1\r\n                );\r\n            }),\r\n            url: x.url,\r\n            weight: x.weight,\r\n        }));\r\n\r\n        // cards are now of the correct type and playable\r\n\r\n        const totalCards = filtered.reduce((x, y) => x + y.cards.length, 0);\r\n\r\n        // every card should be rated by x when 0 < x <= 1\r\n        const result: Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> = [];\r\n\r\n        const willPower = this.status.willPower;\r\n\r\n        for (const deck of filtered) {\r\n            // cards from this deck that were already played\r\n            const cardsPlayed = this.status.cardsHistory.filter(x => x.deckUrl === deck.url);\r\n\r\n            // compute the deck exhaustion factor\r\n            let exhaustionFactor: number;\r\n\r\n            const percentage = cardsPlayed.length / deck.cards.length;\r\n            if (percentage > this.deckExhaustionLimit) {\r\n                // cubic reduction\r\n                exhaustionFactor = Math.pow(Math.max(1.1 - percentage, 0.1), 2) * 0.5;\r\n            } else {\r\n                exhaustionFactor = 1;\r\n            }\r\n\r\n            const weightedCards: Array<Weighted<Card>> = [];\r\n            for (const card of deck.cards) {\r\n                const willPowerRating = this.rateWillPower(card.willPower, willPower);\r\n                const historyFactor = this.getHistoryFactor(card.id, cardsPlayed, totalCards);\r\n                const tagsFactor = this.getTagsFactor(card.tags, this.status.tags);\r\n                const weight = exhaustionFactor * willPowerRating * historyFactor * tagsFactor;\r\n                if (weight === 0) {\r\n                    continue;\r\n                }\r\n\r\n                weightedCards.push({\r\n                    value: card,\r\n                    weight: weight,\r\n                });\r\n            }\r\n\r\n            result.push({ deck, cards: weightedCards });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public recomputeWillPower(memory: string[]): { willPower: number; memory: string[] } {\r\n        const addedMemory = new Array<string>();\r\n        const now = new Date();\r\n        let result = this.status.willPower;\r\n\r\n        if (!_.includes(memory, \"AFTER_10\") && (now.getHours() > 22 || now.getHours() < 8)) {\r\n            result++;\r\n            addedMemory.push(\"AFTER_10\");\r\n        }\r\n\r\n        const slidesCount = this.status.slidesHistory.length;\r\n        if (slidesCount % 12 === 0 && slidesCount !== 0) {\r\n            const id = slidesCount / 12;\r\n            if (!_.includes(memory, `SLIDES_${id}`)) {\r\n                result++;\r\n                addedMemory.push(`SLIDES_${id}`);\r\n            }\r\n        }\r\n\r\n        if (result > 5) {\r\n            result = 5;\r\n        }\r\n\r\n        return { willPower: result, memory: addedMemory };\r\n    }\r\n\r\n    protected getTagsFactor(tags: string[], tagWeights: Array<Weighted<string>>) {\r\n        const weights = tags\r\n            .map(x => tagWeights.find(y => y.value === x))\r\n            .filter(x => x !== undefined)\r\n            .map(x => x!.weight);\r\n        if (weights.length > 0) {\r\n            return Math.min(...weights);\r\n        }\r\n        return 0.5;\r\n    }\r\n\r\n    /** return a value between 0 and 1 that returns 1 if the card was never played and a smaller number if the card was played recently */\r\n    protected getHistoryFactor(id: string, history: CardRef[], totalCards: number) {\r\n        const historyPosition = history.findIndex(x => x.card.id === id);\r\n        if (historyPosition === -1) {\r\n            return 1;\r\n        }\r\n\r\n        if (historyPosition > totalCards) {\r\n            return 0;\r\n        }\r\n\r\n        return historyPosition / totalCards;\r\n    }\r\n\r\n    /** return a value between 0 and 1 for the given will power */\r\n    protected rateWillPower(cardWillPower: number | undefined, willPower: number) {\r\n        if (cardWillPower === undefined) {\r\n            return 0.75;\r\n        }\r\n\r\n        // --- --- --- ||| --- --- --- ---\r\n        // 0.5 .75 .75  1  .25 .15 .05 .05\r\n\r\n        if (cardWillPower === willPower) {\r\n            return 1;\r\n        }\r\n\r\n        if (cardWillPower > willPower) {\r\n            const result = 0.35 - (cardWillPower - willPower) * 0.1;\r\n            return result < 0 ? 0 : result;\r\n        }\r\n\r\n        return 0.5;\r\n    }\r\n\r\n    protected filterDecks(decks: CardDeck[]): CardDeck[] {\r\n        const filteredDecks: CardDeck[] = [];\r\n\r\n        for (const deck of decks) {\r\n            // remove disabled decks\r\n            if (deck.weight <= 0) {\r\n                continue;\r\n            }\r\n\r\n            const cards: Card[] = [];\r\n            for (const card of deck.cards) {\r\n                if (!this.verifyPlayerSpecification(this.status.players, card.players)) {\r\n                    continue;\r\n                }\r\n\r\n                let weightedZero = false;\r\n                for (const tag of card.tags) {\r\n                    if (this.checkIfWeightedZero(tag, this.status.tags)) {\r\n                        weightedZero = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (weightedZero) {\r\n                    continue;\r\n                }\r\n\r\n                if (!card.condition(this.status)) {\r\n                    continue;\r\n                }\r\n\r\n                cards.push(card);\r\n            }\r\n\r\n            if (cards.length > 0) {\r\n                filteredDecks.push({ cards, weight: deck.weight, url: deck.url });\r\n            }\r\n        }\r\n\r\n        return filteredDecks;\r\n    }\r\n\r\n    protected checkIfWeightedZero<T>(value: T, weights: Array<Weighted<T>>): boolean {\r\n        return weights.findIndex(x => x.value === value && x.weight <= 0) > -1;\r\n    }\r\n\r\n    protected verifyPlayerSpecification(\r\n        players: PlayerInfo[],\r\n        specification: PlayerSetting[],\r\n    ): boolean {\r\n        if (specification.length > players.length) {\r\n            return false;\r\n        }\r\n\r\n        const specificationMales = specification.filter(x => x.gender === \"Male\").length;\r\n        const actualMales = players.filter(x => x.gender === \"Male\").length;\r\n\r\n        if (specificationMales > actualMales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationFemales = specification.filter(x => x.gender === \"Female\").length;\r\n        const actualFemales = players.filter(x => x.gender === \"Female\").length;\r\n        if (specificationFemales > actualFemales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationOpposite = specification.filter(x => x.gender === \"Opposite\").length;\r\n        if (specificationOpposite > Math.min(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        const specificationSame = specification.filter(x => x.gender === \"Same\").length;\r\n        if (specificationSame + 1 > Math.max(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Card } from \"./cards/card\";\r\nimport { CardParserFactory } from \"./parsing/card-parser-factory\";\r\n\r\nexport class CardsLoader {\r\n    private readonly domParser = new DOMParser();\r\n\r\n    constructor(\r\n        private requestFile: (url: string) => Promise<string>,\r\n        private parserFactory: CardParserFactory,\r\n    ) {}\r\n\r\n    public async loadFromUrl(url: string): Promise<Card[]> {\r\n        const result: Card[] = [];\r\n\r\n        await this.loadFile(url, result, undefined);\r\n        return result;\r\n    }\r\n\r\n    private async loadFile(url: string, result: Card[], requestedCards?: string[]): Promise<void> {\r\n        const xml = await this.requestFile(url);\r\n        \r\n        // the DOMParser doesn't like XML docs without a Root element\r\n        const xmlDoc = this.domParser.parseFromString(\"<Root>\" + xml + \"</Root>\", \"text/xml\");\r\n\r\n        const cardElements = xmlDoc.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < cardElements.length; i++) {\r\n            const xmlElement = cardElements[i];\r\n\r\n            if (xmlElement.parentElement !== xmlDoc.documentElement) {\r\n                continue;\r\n            }\r\n\r\n            if (xmlElement.nodeName === \"DeckReference\") {\r\n                await this.parseDeckReference(xmlElement, result, requestedCards);\r\n                continue;\r\n            }\r\n\r\n            const parser = this.parserFactory.createParser(xmlElement.nodeName);\r\n            if (parser === undefined) {\r\n                console.error(\r\n                    `The card ${xmlElement.nodeName} could not be parsed. No parser found.`,\r\n                );\r\n                continue;\r\n            }\r\n\r\n            const card = parser.deserialize(xmlElement);\r\n            if (requestedCards !== undefined && requestedCards.indexOf(card.id) === -1) {\r\n                continue;\r\n            }\r\n\r\n            result.push(card);\r\n        }\r\n    }\r\n\r\n    private parseDeckReference(\r\n        xmlElement: Element,\r\n        result: Card[],\r\n        requestedCards?: string[],\r\n    ): Promise<void> {\r\n        const url = xmlElement.getAttribute(\"url\");\r\n        if (url === null) {\r\n            throw new Error(\"The url on a deck reference must not be null.\");\r\n        }\r\n\r\n        const referenceRequests: string[] = [];\r\n\r\n        const cardRefs = xmlElement.getElementsByTagName(\"CardRef\");\r\n        for (let i = 0; i < cardRefs.length; i++) {\r\n            const cardRef = cardRefs[i];\r\n\r\n            const idAttr = cardRef.getAttribute(\"id\");\r\n            if (idAttr === null) {\r\n                continue;\r\n            }\r\n\r\n            referenceRequests.push(idAttr);\r\n        }\r\n\r\n        let deckWhitelist: string[] | undefined;\r\n        if (referenceRequests.length === 0) {\r\n            deckWhitelist = requestedCards;\r\n        } else {\r\n            if (requestedCards !== undefined) {\r\n                deckWhitelist = [];\r\n\r\n                // only request cards that are in the superior list aswell as in the reference list\r\n                for (const cardId of requestedCards) {\r\n                    if (referenceRequests.indexOf(cardId) > -1) {\r\n                        deckWhitelist.push(cardId);\r\n                    }\r\n                }\r\n            } else {\r\n                deckWhitelist = referenceRequests;\r\n            }\r\n        }\r\n\r\n        return this.loadFile(url, result, deckWhitelist);\r\n    }\r\n}\r\n","export class PlayerSetting {\r\n    constructor(public playerIndex: number, public gender: GenderRequirement = \"None\") {}\r\n}\r\n\r\nexport type GenderRequirement = 'None' | 'Male' | 'Female' | 'Opposite' | 'Same';\r\n","import { GenderRequirement } from \"../cards/player-setting\";\r\n\r\nexport class ParserHelper {\r\n    /** parse a player tag, e. g. \"Player\" or \"Player2\" or \"Player5000\" and return the index (1 if none is specified) or undefined */\r\n    public static parsePlayerTag(s: string): number | undefined {\r\n        const tagName = \"Player\";\r\n\r\n        if (!s.startsWith(tagName)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (s.length > tagName.length) {\r\n            const index = Number(s.substring(tagName.length));\r\n            return isNaN(index) ? undefined : index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /** parse a gender requirement string, e. g. \"m\", \"male\", \"Male\", etc. */\r\n    public static parseGenderRequirement(s: string): GenderRequirement |undefined {\r\n        s = s.toLowerCase();\r\n\r\n        if (s in this.genderRequirementMap) {\r\n            return this.genderRequirementMap[s];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** parse a timespan in the format hh:mm:ss or mm:ss */\r\n    public static parseTimeSpanStringToSeconds(s: string): number | undefined {\r\n        const a = s.split(\":\");\r\n\r\n        if (a.length > 3) {\r\n            return undefined;\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        for (let i = 0; i < a.length; i++) {\r\n            const p = Number(a[i]);\r\n            if (isNaN(p)) {\r\n                return undefined;\r\n            }\r\n\r\n            result += p * Math.pow(60, (a.length - i - 1));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static genderRequirementMap: { [id: string]: GenderRequirement } = {\r\n        m: \"Male\",\r\n        male: \"Male\",\r\n        f: \"Female\",\r\n        female: \"Female\",\r\n        o: \"Opposite\",\r\n        opposite: \"Opposite\",\r\n        s: \"Same\",\r\n        same: \"Same\",\r\n    };\r\n}\r\n","import { BaseCard } from \"../cards/base-card\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { CardParser } from \"./card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\n\r\nexport abstract class BaseCardParser<TCard extends BaseCard> implements CardParser {\r\n    public deserialize(xml: Element): Card {\r\n        const card = this.createCard();\r\n\r\n        const idAttr = xml.getAttribute(\"id\");\r\n        if (idAttr === null) {\r\n            throw new Error(\"The id of a card must not be null\");\r\n        }\r\n        card.id = idAttr;\r\n\r\n        card.willPower = Number(xml.getAttribute(\"willPower\"));\r\n        if (card.willPower < 1 || card.willPower > 10) {\r\n            card.willPower = undefined;\r\n        }\r\n\r\n        const tags = xml.getAttribute(\"tags\");\r\n\r\n        card.tags = tags\r\n            ? [...this.getDefaultAttributes(), ...tags.split(\",\")]\r\n            : this.getDefaultAttributes();\r\n\r\n        this.parseAttributes(xml, card);\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            if (element.tagName === `${xml.tagName}.players`) {\r\n                card.players = this.parsePlayers(element);\r\n                continue;\r\n            }\r\n\r\n            this.parseElement(element, card);\r\n        }\r\n\r\n        if (card.players === undefined) {\r\n            card.players = [];\r\n        }\r\n\r\n        return card;\r\n    }\r\n\r\n    protected getDefaultAttributes(): string[] {\r\n        return [];\r\n    }\r\n\r\n    protected abstract parseAttributes(rootXml: Element, card: TCard): void;\r\n    protected abstract parseElement(element: Element, card: TCard): boolean;\r\n\r\n    protected abstract createCard(): TCard;\r\n\r\n    private parsePlayers(xml: Element): PlayerSetting[] {\r\n        const players: PlayerSetting[] = [];\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            const player = this.parsePlayer(element);\r\n            if (player !== undefined) {\r\n                players.push(player);\r\n            }\r\n        }\r\n\r\n        return players;\r\n    }\r\n\r\n    private parsePlayer(xml: Element): PlayerSetting | undefined {\r\n        const index = ParserHelper.parsePlayerTag(xml.tagName);\r\n        if (index === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        let requiredGender: GenderRequirement = \"None\";\r\n\r\n        const genderAttr = xml.getAttribute(\"gender\");\r\n        if (genderAttr) {\r\n            const genderReq = ParserHelper.parseGenderRequirement(genderAttr);\r\n\r\n            if (genderReq !== undefined) {\r\n                requiredGender = genderReq;\r\n            }\r\n        }\r\n\r\n        return new PlayerSetting(index, requiredGender);\r\n    }\r\n}\r\n","import { TextTranslation } from \"./text-translation\";\r\n\r\nexport class TextElement {\r\n    public weight: number = 1;\r\n    public translations!: TextTranslation[];\r\n}","export class TextTranslation {\r\n    constructor(public lang: string, public content: string) {}\r\n}\r\n","import { TextElement } from \"../cards/text-element\";\r\nimport { TextTranslation } from \"../cards/text-translation\";\r\n\r\n/** parses the text content of an element */\r\nexport class TextContentParser {\r\n    public result: TextElement[];\r\n\r\n    private isConditionalElement: boolean | undefined = undefined;\r\n\r\n    constructor() {\r\n        this.result = [];\r\n    }\r\n\r\n    public addElement(xml: Element): boolean {\r\n        switch (xml.tagName) {\r\n            case \"Case\":\r\n                if (this.isConditionalElement === false) {\r\n                    return false;\r\n                }\r\n                this.isConditionalElement = true;\r\n\r\n                this.result.push(this.parseTextElement(xml));\r\n                return true;\r\n            case \"Text\":\r\n                if (this.isConditionalElement === true) {\r\n                    return false;\r\n                } else if (this.isConditionalElement === undefined) {\r\n                    this.result.push({ translations: [], weight: 1 });\r\n                }\r\n\r\n                this.isConditionalElement = false;\r\n                this.result[0].translations.push(this.parseTranslation(xml));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private parseTextElement(element: Element): TextElement {\r\n        const translations: TextTranslation[] = [];\r\n        const textElement = new TextElement();\r\n\r\n        const weight = element.getAttribute(\"weight\");\r\n        if (weight !== null && !isNaN(Number(weight))) {\r\n            textElement.weight = Number(weight);\r\n        } else {\r\n            textElement.weight = 1;\r\n        }\r\n\r\n        const texts = element.getElementsByTagName(\"Text\");\r\n        for (let i = 0; i < texts.length; i++) {\r\n            const textXmlNode = texts[i];\r\n            translations.push(this.parseTranslation(textXmlNode));\r\n        }\r\n\r\n        textElement.translations = translations;\r\n        return textElement;\r\n    }\r\n\r\n    private parseTranslation(element: Element) {\r\n        const lang = element.getAttribute(\"lang\");\r\n        if (lang === null) {\r\n            throw new Error(\"lang attribute not found on element\");\r\n        }\r\n\r\n        if (element.textContent === null) {\r\n            throw new Error(\"The text content of the element is empty.\");\r\n        }\r\n\r\n        return new TextTranslation(lang, element.textContent);\r\n    }\r\n}\r\n","import { TextCard } from \"../cards/text-card\";\r\nimport { BaseCardParser } from \"./base-card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\nimport { TextContentParser } from \"./text-content-parser\";\r\n\r\nexport abstract class TextCardParser<TCard extends TextCard> extends BaseCardParser<TCard> {\r\n    private textContentParser = new TextContentParser();\r\n\r\n    protected parseAttributes(rootXml: Element, card: TCard): void {\r\n        const followUpAttr = rootXml.getAttribute(\"followUpProbability\");\r\n        if (followUpAttr !== null) {\r\n            const followUpProbability = Number(followUpAttr);\r\n            if (isNaN(followUpProbability)) {\r\n                throw new Error(\r\n                    `The follow up propability ${followUpAttr} could not be parsed as a number (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpPropability = followUpProbability;\r\n        }\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay !== null) {\r\n            const seconds = ParserHelper.parseTimeSpanStringToSeconds(followUpDelay);\r\n            if (seconds === undefined) {\r\n                throw new Error(\r\n                    `Could not parse followUpDelay ${followUpDelay} as a timespan (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpDelay = seconds;\r\n        } else {\r\n            card.followUpDelay = 0;\r\n        }\r\n    }\r\n\r\n    protected parseElement(element: Element, card: TCard): boolean {\r\n        switch (element.tagName) {\r\n            case \"Text\":\r\n            case \"Case\":\r\n                card.content = this.textContentParser.result;\r\n                return this.textContentParser.addElement(element);\r\n        }\r\n\r\n        if (element.tagName === `${card.type}.followUp`) {\r\n            const parser = new TextContentParser();\r\n\r\n            const subElements = element.getElementsByTagName(\"*\");\r\n            for (let i = 0; i < subElements.length; i++) {\r\n                const subElement = subElements[i];\r\n                if (subElement.parentElement !== element) {\r\n                    continue;\r\n                }\r\n\r\n                parser.addElement(subElement);\r\n            }\r\n\r\n            card.followUp = parser.result;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { BaseCard } from \"./base-card\";\r\nimport { TextElement } from \"./text-element\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport _ from \"lodash\";\r\n\r\nexport abstract class TextCard extends BaseCard {\r\n    /** the propability (0-1) that this card follows up */\r\n    public followUpPropability: number = 1;\r\n\r\n    /** the delay of the follow up in seconds */\r\n    public followUpDelay!: number;\r\n\r\n    public content!: TextElement[];\r\n    public followUp!: TextElement[];\r\n\r\n    public condition: (status: GameStatus) => boolean = status => {\r\n        return _.some(this.content, x => _.some(x.translations, y => y.lang === status.language));\r\n    };\r\n}\r\n","import { GameStatus } from \"../game-status\";\r\nimport { Card } from \"./card\";\r\nimport { PlayerSetting } from \"./player-setting\";\r\n\r\n/** A very basic implementation of Card  */\r\nexport abstract class BaseCard implements Card {\r\n  public id!: string;\r\n  public willPower!: number | undefined;\r\n  public players!: PlayerSetting[];\r\n  public tags!: string[];\r\n  public condition!: (status: GameStatus) => boolean;\r\n\r\n  public readonly abstract type: string;\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class FactCard extends TextCard {\r\n    public readonly type: string = \"FactCard\";\r\n    public isTrueFact: boolean = false;\r\n}\r\n","import { TextCardParser } from \"../../core/parsing/text-card-parser\";\r\nimport { FactCard } from \"../cards/fact-card\";\r\n\r\nexport class FactCardParser extends TextCardParser<FactCard> {\r\n    protected createCard(): FactCard {\r\n        return new FactCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: FactCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const attr = rootXml.getAttribute(\"is\");\r\n        card.isTrueFact = attr === null ? true : this.toBool(attr);\r\n    }\r\n\r\n    protected toBool(value?: string): boolean {\r\n        if (value === \"true\") {\r\n            return true;\r\n        }\r\n\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return !!+value;\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class VirusCard extends TextCard {\r\n    public readonly type: string = \"VirusCard\";\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { VirusCard } from '../cards/virus-card';\r\n\r\nexport class VirusCardParser extends TextCardParser<VirusCard> {\r\n    protected createCard(): VirusCard {\r\n        return new VirusCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: VirusCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay === null) {\r\n            card.followUpDelay = 60 * 5; // 5 minutes default\r\n        }\r\n    }\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DefaultTextCardParser<T extends TextCard> extends TextCardParser<T> {\r\n    constructor(private factory: new () => T) {\r\n        super();\r\n    }\r\n\r\n    protected createCard(): T {\r\n        return new this.factory();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DownCard extends TextCard {\r\n    public readonly type: string = \"DownCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NeverEverCard extends TextCard {\r\n    public readonly type: string = \"NeverEverCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class JokeCard extends TextCard {\r\n    public readonly type: string = \"JokeCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class QuestionCard extends TextCard {\r\n    public readonly type: string = \"QuestionCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class TaskCard extends TextCard {\r\n    public readonly type: string = \"TaskCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class WouldYouRatherCard extends TextCard {\r\n    public readonly type: string = \"WyrCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DrinkCard extends TextCard {\r\n    public readonly type: string = \"DrinkCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class GroupGameCard extends TextCard {\r\n    public readonly type: string = \"GroupGameCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NoIdeaLosesCard extends TextCard {\r\n    public readonly type: string = \"NoIdeaLosesCard\";\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { FactCardParser } from \"./parsing/fact-card-parser\";\r\nimport { VirusCardParser } from \"./parsing/virus-card-parser\";\r\nimport { DefaultTextCardParser } from \"./parsing/default-text-card-parser\";\r\nimport { DownCard } from \"./cards/down-card\";\r\nimport { NeverEverCard } from \"./cards/never-ever-card\";\r\nimport { JokeCard } from \"./cards/joke-card\";\r\nimport { QuestionCard } from \"./cards/question-card\";\r\nimport { TaskCard } from \"./cards/task-card\";\r\nimport { WouldYouRatherCard } from \"./cards/would-you-rather-card\";\r\nimport { DrinkCard } from \"./cards/drink-card\";\r\nimport { GroupGameCard } from \"./cards/group-game-card\";\r\nimport { NoIdeaLosesCard } from \"./cards/no-idea-loses-card\";\r\n\r\ntype ParserRegistration = { [type: string]: () => CardParser };\r\n\r\nexport const parsers: ParserRegistration = {\r\n    FactCard: () => new FactCardParser(),\r\n    VirusCard: () => new VirusCardParser(),\r\n    DownCard: () => new DefaultTextCardParser<DownCard>(DownCard),\r\n    NeverEverCard: () => new DefaultTextCardParser<NeverEverCard>(NeverEverCard),\r\n    JokeCard: () => new DefaultTextCardParser<JokeCard>(JokeCard),\r\n    QuestionCard: () => new DefaultTextCardParser<QuestionCard>(QuestionCard),\r\n    TaskCard: () => new DefaultTextCardParser<TaskCard>(TaskCard),\r\n    WyrCard: () => new DefaultTextCardParser<WouldYouRatherCard>(WouldYouRatherCard),\r\n    DrinkCard: () => new DefaultTextCardParser<DrinkCard>(DrinkCard),\r\n    GroupGameCard: () => new DefaultTextCardParser<GroupGameCard>(GroupGameCard),\r\n    NoIdeaLosesCard: () => new DefaultTextCardParser<NoIdeaLosesCard>(NoIdeaLosesCard),\r\n};\r\n","import axios from \"axios\";\r\nimport { CardsLoader } from \"../../core/cards-loader\";\r\nimport { Card } from \"../../core/cards/card\";\r\nimport { DefaultCardParserFactory } from \"../../impl/default-card-parser-factory\";\r\n\r\nconst parserFactory = new DefaultCardParserFactory();\r\nconst loader = new CardsLoader(requestFile, parserFactory);\r\n\r\nasync function requestFile(url: string) : Promise<string> {\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n}\r\n\r\nexport async function loadCards(url: string): Promise<Card[]> {\r\n    return loader.loadFromUrl(url);\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { CardParserFactory } from \"../core/parsing/card-parser-factory\";\r\nimport { parsers } from \"./registrations\";\r\n\r\nexport class DefaultCardParserFactory implements CardParserFactory {\r\n    private parsers: { [type: string]: () => CardParser };\r\n\r\n    constructor() {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    public createParser(cardType: string): CardParser | undefined {\r\n        if (cardType in this.parsers) {\r\n            return this.parsers[cardType]();\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n","import * as cardsLoader from \"./api/cards-loader\";\r\n\r\nexport default {\r\n    api: {\r\n        cardsLoader,\r\n    },\r\n};\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { from, of } from \"rxjs\";\r\nimport { catchError, filter, map, mergeMap } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport { loadSourceAsync } from \"./actions\";\r\n\r\nexport const loadSourceEpic: Epic<RootAction, RootAction, RootState, Services> = (\r\n    action$,\r\n    _state$,\r\n    { api },\r\n) =>\r\n    action$.pipe(\r\n        filter(isActionOf(loadSourceAsync.request)),\r\n        mergeMap(action =>\r\n            from(api.cardsLoader.loadCards(action.payload)).pipe(\r\n                map(cards => loadSourceAsync.success({ url: action.payload, cards })),\r\n                catchError((message: string) =>\r\n                    of(loadSourceAsync.failure({ url: action.payload, message })),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n","export abstract class TextFragment {}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RawTextFragment extends TextFragment {\r\n    constructor(public text: string) {\r\n        super();\r\n    }\r\n}","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport abstract class VariableFragment extends TextFragment {\r\n}","import { VariableFragment } from \"./variable-fragment\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\n\r\nexport class PlayerReferenceFragment extends VariableFragment {\r\n    constructor(public playerIndex: number = 1, public gender: GenderRequirement = \"None\") {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SipsFragment extends VariableFragment {\r\n    constructor(public minSips: number = 1, public sipsIndex: number = 1) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomNumberFragment extends TextFragment {\r\n    constructor(public numbers: RandomNumber[]) {\r\n        super();\r\n    }\r\n}\r\n\r\nexport interface RandomNumber {\r\n    getCount(): number;\r\n}\r\n\r\nexport class NumberRange implements RandomNumber {\r\n    constructor(public min: number, public max: number) {}\r\n\r\n    getCount(): number {\r\n        return this.max - this.min;\r\n    }\r\n}\r\n\r\nexport class StaticNumber implements RandomNumber {\r\n    constructor(public i: number) {}\r\n\r\n    getCount(): number {\r\n        return 1;\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomTextFragment extends TextFragment {\r\n    constructor(public texts: string[]) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class GenderBasedSelectionFragment extends TextFragment {\r\n    constructor(\r\n        public femaleText: string,\r\n        public maleText?: string,\r\n        public referencedPlayerIndex?: number,\r\n    ) {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SocialMediaPlatformFragment extends VariableFragment {\r\n}","import { ParserHelper } from \"./../parser-helper\";\r\nimport { CardTextDecoder } from \"./card-text-decoder\";\r\nimport { TextFragment } from \"../../text-fragment\";\r\nimport * as Consts from \"./text-decoder-consts\";\r\nimport { RawTextFragment } from \"../../fragments/raw-text-fragment\";\r\nimport { PlayerReferenceFragment } from \"../../fragments/player-reference-fragment\";\r\nimport { SipsFragment } from \"../../fragments/sips-fragment\";\r\nimport {\r\n    RandomNumberFragment,\r\n    RandomNumber,\r\n    NumberRange,\r\n    StaticNumber,\r\n} from \"../../fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"../../fragments/random-text-fragment\";\r\nimport { GenderBasedSelectionFragment } from \"../../fragments/gender-based-selection-fragment\";\r\nimport { SocialMediaPlatformFragment } from \"@core/fragments/social-media-platform-fragment\";\r\n\r\nexport class DefaultTextDecoder implements CardTextDecoder {\r\n    decode(s: string): TextFragment[] {\r\n        const result: TextFragment[] = [];\r\n\r\n        let index = 0;\r\n        let lastTokenIndex = 0;\r\n\r\n        do {\r\n            if (s[index] == Consts.VarStartChar) {\r\n                if (lastTokenIndex !== index) {\r\n                    result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                }\r\n\r\n                const token = this.readToken(s, index, Consts.VarEndChar);\r\n                index = token.index;\r\n\r\n                result.push(this.parseVariableFragment(token.value));\r\n            } else if (s[index] === Consts.SelectionStartChar) {\r\n                if (index > 1 && s[index - 1] === Consts.SelectionModifierStartChar) {\r\n                    // handle !{...}\r\n                    index--;\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    index++;\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseRandomSelectionFragment(content.value));\r\n                } else {\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseGenderSelectionFragment(content.value));\r\n                }\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n            lastTokenIndex = index;\r\n        } while (++index < s.length);\r\n\r\n        if (lastTokenIndex !== s.length) {\r\n            result.push(new RawTextFragment(s.substring(lastTokenIndex)));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseVariableFragment(content: string): TextFragment {\r\n        content = content.toLowerCase();\r\n\r\n        if (content.startsWith(Consts.PlayerVariable)) {\r\n            // Samples:\r\n            // [Player1:f]\r\n            // [Player1]\r\n            // [Player]\r\n\r\n            const playerRef = new PlayerReferenceFragment();\r\n\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let playerTag: string;\r\n            if (parameterBegin === -1) {\r\n                playerTag = content;\r\n            } else {\r\n                playerTag = content.substring(0, parameterBegin);\r\n\r\n                const genderString = content.substring(parameterBegin + 1);\r\n                const gender = ParserHelper.parseGenderRequirement(genderString);\r\n                if (gender === undefined) {\r\n                    throw new Error(\r\n                        `Gender parameter of player tag could not be parsed: ${content}`,\r\n                    );\r\n                }\r\n\r\n                playerRef.gender = gender;\r\n            }\r\n\r\n            playerRef.playerIndex = this.parsePlayerIndex(playerTag);\r\n            return playerRef;\r\n        }\r\n\r\n        if (content.startsWith(Consts.SipsVariable)) {\r\n            const sipsFragment = new SipsFragment();\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let sipsTag: string;\r\n            if (parameterBegin === -1) {\r\n                sipsTag = content;\r\n            } else {\r\n                sipsTag = content.substring(0, parameterBegin);\r\n                sipsFragment.minSips = Number(content.substring(parameterBegin + 1));\r\n                if (isNaN(sipsFragment.minSips)) {\r\n                    throw new Error(`The sips amount of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            if (sipsTag.length > Consts.SipsVariable.length) {\r\n                sipsFragment.sipsIndex = Number(sipsTag.substring(Consts.SipsVariable.length));\r\n                if (isNaN(sipsFragment.sipsIndex)) {\r\n                    throw new Error(`The sips index of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            return sipsFragment;\r\n        }\r\n\r\n        if (content === Consts.SocialMediaVariable) {\r\n            return new SocialMediaPlatformFragment();\r\n        }\r\n\r\n        return new RawTextFragment(content);\r\n    }\r\n\r\n    public parseRandomSelectionFragment(content: string): TextFragment {\r\n        // Samples:\r\n        // 12,54,56-90\r\n        // 12,hello,not,19\r\n\r\n        const isNumericSelection = /^[0-9,-]+$/.test(content);\r\n        if (isNumericSelection) {\r\n            const numbers = this.parseNumberArray(content);\r\n            return new RandomNumberFragment(numbers);\r\n        }\r\n\r\n        const texts = this.splitQuoted(content, \",\");\r\n        return new RandomTextFragment(texts);\r\n    }\r\n\r\n    public parseNumberArray(content: string): RandomNumber[] {\r\n        const result: RandomNumber[] = [];\r\n        let currentNumber: RandomNumber | null = null;\r\n\r\n        let numberStart = 0;\r\n        let isRangeToken = false;\r\n\r\n        let i = 0;\r\n        while (true) {\r\n            for (; i < content.length; i++) {\r\n                const c = content[i];\r\n\r\n                if (!isNaN(Number(c))) {\r\n                    continue;\r\n                }\r\n\r\n                if (c === \"-\") {\r\n                    if (isRangeToken) {\r\n                        throw new Error(\"Can only have one range identifier per field\");\r\n                    }\r\n                    isRangeToken = true;\r\n\r\n                    currentNumber = new NumberRange(Number(content.substring(numberStart, i)), 0);\r\n                    numberStart = i + 1;\r\n                    continue;\r\n                }\r\n\r\n                if (c === \",\") {\r\n                    break;\r\n                }\r\n\r\n                throw new Error(\"Invalid character found: \" + c);\r\n            }\r\n\r\n            if (i === numberStart) {\r\n                throw new Error(`A number was expected at position ${i} in string \"${content}\"`);\r\n            }\r\n\r\n            const num = Number(content.substring(numberStart, i));\r\n            if (isRangeToken) {\r\n                (currentNumber as NumberRange).max = num;\r\n            } else {\r\n                currentNumber = new StaticNumber(num);\r\n            }\r\n\r\n            result.push(currentNumber!);\r\n\r\n            if (i === content.length) {\r\n                break;\r\n            }\r\n\r\n            currentNumber = null;\r\n            isRangeToken = false;\r\n            numberStart = ++i;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public splitQuoted(value: string, delimiter: string): string[] {\r\n        let tokenStart = 0;\r\n        let result: string[] = [];\r\n\r\n        while (value.length > tokenStart - 1) {\r\n            let withinQuotes = false;\r\n\r\n            if (value[tokenStart] === '\"') {\r\n                withinQuotes = true;\r\n                tokenStart++;\r\n            }\r\n\r\n            let i = tokenStart;\r\n            do {\r\n                if (value[i] === delimiter) {\r\n                    if (withinQuotes) continue;\r\n\r\n                    result.push(value.substring(tokenStart, i));\r\n                    tokenStart = i + 1;\r\n                    break;\r\n                }\r\n\r\n                if (value[i] == '\"') {\r\n                    if (!withinQuotes) {\r\n                        continue; //allow quotes in the middle\r\n                    }\r\n\r\n                    if (i == value.length - 1) {\r\n                        //if its the last char\r\n                        result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                        return result;\r\n                    }\r\n\r\n                    const nextChar = value[i + 1];\r\n                    if (nextChar == '\"') {\r\n                        i++;\r\n                        continue; //escaped quotes\r\n                    }\r\n\r\n                    if (nextChar != delimiter)\r\n                        throw new Error(\"The delimiter must come after the closing quotes.\");\r\n\r\n                    result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                    tokenStart = i + 2;\r\n                    break;\r\n                }\r\n\r\n                if (i == value.length - 1) {\r\n                    if (withinQuotes) {\r\n                        throw new Error(\"The text must end with a quote\");\r\n                    }\r\n\r\n                    result.push(value.substring(tokenStart, i + 1));\r\n                    return result;\r\n                }\r\n            } while (++i < value.length);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseGenderSelectionFragment(content: string): GenderBasedSelectionFragment {\r\n        const fragment = new GenderBasedSelectionFragment(\"\");\r\n\r\n        const splitterIndex = content.indexOf(Consts.SelectionSplitterChar);\r\n        const reference = content.indexOf(Consts.SelectionReferenceChar);\r\n\r\n        if (reference !== -1) {\r\n            fragment.referencedPlayerIndex = this.parsePlayerIndex(\r\n                content.substring(reference + 1),\r\n            );\r\n            content = content.substring(0, reference);\r\n        }\r\n\r\n        if (splitterIndex === -1) {\r\n            fragment.femaleText = content;\r\n        } else {\r\n            fragment.maleText = content.substring(0, splitterIndex);\r\n            fragment.femaleText = content.substring(splitterIndex + 1, content.length);\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    public parsePlayerIndex(value: string): number {\r\n        if (value.length > Consts.PlayerVariable.length) {\r\n            const index = Number(value.substring(Consts.PlayerVariable.length));\r\n            if (isNaN(index)) {\r\n                throw new Error(`The player index of \"${value}\" could not be parsed.`);\r\n            }\r\n\r\n            return index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    public readToken(\r\n        value: string,\r\n        index: number,\r\n        endChar: string,\r\n    ): { value: string; index: number } {\r\n        const length = value.length;\r\n        const tokenStart = index;\r\n\r\n        while (++index < length) {\r\n            const char = value[index];\r\n\r\n            if (char === Consts.EscapeChar) {\r\n                index++;\r\n                continue;\r\n            }\r\n\r\n            if (char === endChar) {\r\n                index++;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return { index, value: value.substring(tokenStart + 1, index - 1) };\r\n    }\r\n}\r\n","export const VarStartChar: string = \"[\";\r\nexport const VarEndChar: string = \"]\";\r\nexport const EscapeChar: string = \"\\\\\";\r\nexport const SelectionStartChar: string = \"{\";\r\nexport const SelectionModifierStartChar: string = \"!\";\r\nexport const SelectionEndChar: string = \"}\";\r\n\r\nexport const PlayerVariable: string = \"player\";\r\nexport const SipsVariable: string = \"sips\";\r\nexport const VariableParametersStart: string = \":\";\r\nexport const SocialMediaVariable: string = \"socialmediaplatform\";\r\n\r\nexport const SelectionSplitterChar: string = \"/\";\r\nexport const SelectionReferenceChar: string = \"|\";\r\nexport const ArrayDelimiter: string = \",\";\r\n","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GenderBasedSelectionFragment } from \"@core/fragments/gender-based-selection-fragment\";\r\nimport { PlayerReferenceFragment } from \"@core/fragments/player-reference-fragment\";\r\nimport { NumberRange, RandomNumberFragment, StaticNumber } from \"@core/fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"@core/fragments/random-text-fragment\";\r\nimport { RawTextFragment } from \"@core/fragments/raw-text-fragment\";\r\nimport { SipsFragment } from \"@core/fragments/sips-fragment\";\r\nimport { SocialMediaPlatformFragment } from \"@core/fragments/social-media-platform-fragment\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { RandomUtils } from \"@core/selection/selection-algorithm\";\r\nimport { TextFragment } from \"@core/text-fragment\";\r\nimport _ from \"lodash\";\r\n\r\nexport class TextFormatter {\r\n    public static getRequiredPlayers(fragments: TextFragment[], playerSettings: PlayerSetting[]) {\r\n        const requiredPlayers = new Array<PlayerSetting>();\r\n\r\n        const players = _.groupBy(\r\n            fragments\r\n                .filter(x => x instanceof PlayerReferenceFragment)\r\n                .map(x => x as PlayerReferenceFragment),\r\n            \"playerIndex\",\r\n        );\r\n\r\n        for (const key in players) {\r\n            if (players.hasOwnProperty(key)) {\r\n                const player = players[key][0];\r\n\r\n                let requiredGender = player.gender;\r\n\r\n                if (requiredGender === \"None\") {\r\n                    const rootSetting = playerSettings.find(\r\n                        x => x.playerIndex === player.playerIndex,\r\n                    );\r\n                    if (rootSetting !== undefined) {\r\n                        requiredGender = rootSetting.gender;\r\n                    }\r\n                }\r\n\r\n                requiredPlayers.push({ playerIndex: player.playerIndex, gender: requiredGender });\r\n            }\r\n        }\r\n\r\n        return requiredPlayers;\r\n    }\r\n\r\n    public static getRequiredSips(fragments: TextFragment[]): SipsFragment[] {\r\n        const sips = _.groupBy(\r\n            fragments.filter(x => x instanceof SipsFragment).map(x => x as SipsFragment),\r\n            \"sipsIndex\",\r\n        );\r\n        return Object.values(sips).map(x => x[0]);\r\n    }\r\n\r\n    public static format(\r\n        fragments: TextFragment[],\r\n        players: { [index: number]: PlayerInfo },\r\n        sips: { [index: number]: number },\r\n        socialMediaPlatform: string,\r\n        translate: (key: string) => string,\r\n        selection: RandomUtils,\r\n        options: Partial<FormatOptions>,\r\n    ): string {\r\n        let result = \"\";\r\n        let lastPlayerFragment: PlayerReferenceFragment | null = null;\r\n\r\n        for (const fragment of fragments) {\r\n            if (fragment instanceof RawTextFragment) {\r\n                result += fragment.text;\r\n            } else if (fragment instanceof PlayerReferenceFragment) {\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n                result += players[fragment.playerIndex].name;\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                lastPlayerFragment = fragment;\r\n            } else if (fragment instanceof SipsFragment) {\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                const sip = sips[fragment.sipsIndex];\r\n                if (sip === 1) {\r\n                    result += translate(\"oneSip\");\r\n                } else {\r\n                    result += `${sip} ${translate(\"sips\")}`;\r\n                }\r\n\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n            } else if (fragment instanceof GenderBasedSelectionFragment) {\r\n                let referencedPlayer: number;\r\n                if (fragment.referencedPlayerIndex !== undefined) {\r\n                    referencedPlayer = fragment.referencedPlayerIndex;\r\n                } else if (lastPlayerFragment !== null) {\r\n                    referencedPlayer = lastPlayerFragment.playerIndex;\r\n                } else {\r\n                    const playerKeys = Object.keys(players);\r\n                    if (playerKeys.length === 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    referencedPlayer = Number(playerKeys[0]);\r\n                }\r\n\r\n                const player = players[referencedPlayer];\r\n                const text = player.gender === \"Female\" ? fragment.femaleText : fragment.maleText;\r\n                if (text !== undefined) {\r\n                    result += text;\r\n                }\r\n            } else if (fragment instanceof RandomTextFragment) {\r\n                const text = selection.selectRandomWeighted(fragment.texts, () => 1);\r\n                result += text;\r\n            } else if (fragment instanceof RandomNumberFragment) {\r\n                const number = selection.selectRandomWeighted(fragment.numbers, x => x.getCount());\r\n                if (number === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (number instanceof NumberRange) {\r\n                    const random =\r\n                        number.min + Math.round((number.max - number.min) * selection.getRandom());\r\n                    result += random;\r\n                } else if (number instanceof StaticNumber) {\r\n                    result += number.i;\r\n                }\r\n            } else if (fragment instanceof SocialMediaPlatformFragment) {\r\n                result += socialMediaPlatform;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport interface FormatOptions {\r\n    boldPlayerNames: boolean;\r\n    boldSips: boolean;\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { DefaultTextDecoder } from \"@core/parsing/text-decoder/default-text-decoder\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { FollowUpSlide, SelectedPlayer, Translator } from \"GameModels\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../../../store\";\r\nimport * as actions from \"../../actions\";\r\nimport { TextFormatter } from \"../../formatter/text-formatter\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { CardPresenter } from \"./card-presenter\";\r\n\r\nexport interface TextSlideState {\r\n    markdownContent: string;\r\n}\r\n\r\nexport abstract class TextSlidePresenter<\r\n    TState extends TextSlideState,\r\n    TCard extends TextCard\r\n> extends CardPresenter<TCard> {\r\n    constructor(protected translator: Translator, cardType: string, slideType: string) {\r\n        super(cardType, slideType);\r\n    }\r\n\r\n    protected initializeCard(card: TCard, cardRef: CardRef): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const result = new Array<RootAction>();\r\n\r\n        const text = this.selectText(selection, card);\r\n        const { formatted, players } = this.formatText(text, card, null, selection);\r\n\r\n        const state = this.initializeState(formatted, card, players, selection);\r\n        result.push(\r\n            actions.setSlideState({\r\n                state,\r\n                insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n            }),\r\n        );\r\n\r\n        if (_.some(card.followUp)) {\r\n            // dont check for correct translation as the language may change\r\n            if (Math.random() <= card.followUpPropability) {\r\n                const due = new Date();\r\n                due.setSeconds(due.getSeconds() + card.followUpDelay);\r\n\r\n                result.push(actions.enqueueFollowUp(this.createFollowUp(cardRef, players, due)));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected initializeFollowUpCard(card: TCard, param: any): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n\r\n        try {\r\n            const { text, players } = this.selectFollowUpText(selection, card, param);\r\n            const { formatted } = this.formatText(text, card, players || [], selection);\r\n\r\n            const state = this.initializeFollowUpState(formatted, card, selection, param);\r\n            return [\r\n                actions.setSlideState({\r\n                    state,\r\n                    insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n                }),\r\n            ];\r\n        } catch (error) {\r\n            //no follow up found\r\n            return [actions.requestSlideAsync.request(this.translator)];\r\n        }\r\n    }\r\n\r\n    protected abstract initializeState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): TState;\r\n\r\n    protected abstract initializeFollowUpState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        selection: SelectionAlgorithm,\r\n        param: any,\r\n    ): TState;\r\n\r\n    protected createFollowUp(cardRef: CardRef, players: SelectedPlayer[], due: Date): FollowUpSlide {\r\n        return {\r\n            due: due,\r\n            slideType: this.slideType,\r\n            selectedCard: cardRef,\r\n            param: { definedPlayers: players },\r\n        };\r\n    }\r\n\r\n    protected selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return selectText(selection, selectedCard, this.translator);\r\n    }\r\n\r\n    protected formatText(\r\n        text: string,\r\n        card: TCard,\r\n        definedPlayers: SelectedPlayer[] | null,\r\n        selection: SelectionAlgorithm,\r\n    ): { formatted: string; players: SelectedPlayer[] } {\r\n        return formatText(text, card, definedPlayers, selection, this.translator);\r\n    }\r\n\r\n    selectFollowUpText(\r\n        selection: SelectionAlgorithm,\r\n        selectedCard: TextCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const lang = this.translator.languageCode;\r\n\r\n        const followUps = selectedCard.followUp.filter(x =>\r\n            _.some(x.translations, y => y.lang.toLowerCase() === lang),\r\n        );\r\n        if (followUps.length === 0) {\r\n            throw new Error(\"No follow ups found\");\r\n        }\r\n\r\n        let players: SelectedPlayer[] | undefined;\r\n        if (\"definedPlayers\" in param) {\r\n            players = param.definedPlayers;\r\n        } else {\r\n            players = undefined;\r\n        }\r\n\r\n        const content = selection.selectRandomWeighted(followUps, x => x.weight)!;\r\n        const text = content.translations.find(x => x.lang === lang)!.content;\r\n        return { text, players };\r\n    }\r\n}\r\n\r\nexport function formatText<TCard extends TextCard>(\r\n    text: string,\r\n    card: TCard,\r\n    definedPlayers: SelectedPlayer[] | null,\r\n    selection: SelectionAlgorithm,\r\n    translator: Translator,\r\n): { formatted: string; players: SelectedPlayer[] } {\r\n    const fragments = new DefaultTextDecoder().decode(text);\r\n    const playerRequirements = TextFormatter.getRequiredPlayers(fragments, card.players);\r\n\r\n    const players = gameEngine.selectPlayers(\r\n        selection,\r\n        playerRequirements,\r\n        definedPlayers || [],\r\n        card.tags,\r\n    );\r\n\r\n    const requiredSips = TextFormatter.getRequiredSips(fragments);\r\n\r\n    const indexedPlayers: { [index: number]: PlayerInfo } = {};\r\n    for (const player of players) {\r\n        indexedPlayers[player.index] = player.player;\r\n    }\r\n\r\n    const sips: { [index: number]: number } = {};\r\n    for (const sipInfo of requiredSips) {\r\n        sips[sipInfo.sipsIndex] = selection.getSips(sipInfo.minSips);\r\n    }\r\n\r\n    const socialMediaPlatform = store.getState().settings.socialMediaPlatform;\r\n\r\n    const formatted = TextFormatter.format(\r\n        fragments,\r\n        indexedPlayers,\r\n        sips,\r\n        socialMediaPlatform,\r\n        x => translator.translate(`game.textFormatter.${x}`),\r\n        selection,\r\n        { boldPlayerNames: true, boldSips: true },\r\n    );\r\n\r\n    return { formatted: formatted, players };\r\n}\r\n\r\nexport function selectText(\r\n    selection: SelectionAlgorithm,\r\n    selectedCard: TextCard,\r\n    translator: Translator,\r\n): string {\r\n    const lang = translator.languageCode;\r\n\r\n    const viableContents = selectedCard.content.filter(x =>\r\n        _.some(x.translations, y => y.lang.toLocaleLowerCase() === lang),\r\n    );\r\n    const content = selection.selectRandomWeighted(viableContents, x => x.weight)!;\r\n    return content.translations.find(x => x.lang === lang)!.content;\r\n}\r\n","import { SlidePresenter } from \"./slide-presenter\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { ReactNode } from \"react\";\r\nimport * as actions from \"../../actions\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport { CardRef } from \"@core/cards/card-ref\";\r\n\r\nexport abstract class CardPresenter<TCard extends Card> implements SlidePresenter {\r\n    abstract backgroundColor: string;\r\n    requiredCards: string[];\r\n\r\n    constructor(protected cardType: string, public slideType: string) {\r\n        this.requiredCards = [cardType];\r\n    }\r\n\r\n    initialize(): ActionType<any>[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const cardRef = selection.selectCard(this.cardType);\r\n\r\n        return [actions.applyCard(cardRef), ...this.initializeCard(cardRef.card as TCard, cardRef)];\r\n    }\r\n\r\n    initializeFollowUp(card: CardRef | null, param: any): ActionType<any>[] {\r\n        return this.initializeFollowUpCard(card!.card as TCard, param, card!);\r\n    }\r\n\r\n    abstract render(): ReactNode;\r\n    protected abstract initializeCard(card: TCard, cardRef: CardRef): ActionType<any>[];\r\n    protected abstract initializeFollowUpCard(card: TCard, param: any, cardRef: CardRef): ActionType<any>[];\r\n}\r\n","export default {\r\n    down: \"#c23616\", //pomegrenate (red)\r\n    drink: \"#2470A3\", //belize hole (blue)\r\n    fact: \"#D5880B\", //orange\r\n    groupGame: \"#664EDF\", //green sea\r\n    neverEver: \"#C75000\", //pumpkin\r\n    noIdeaLoses: \"#192a56\", //pico void (dark blue)\r\n    truthOrDare: \"#2c3e50\", //Midnight blue\r\n    virus: \"##219150\",\r\n    wouldYouRather: \"#273c75\",\r\n    task: \"##667293\",\r\n};","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { PlayerSelectionInsights } from \"@core/selection/insights\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    Button,\r\n    createStyles,\r\n    Paper,\r\n    Theme,\r\n    Typography,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport * as actions from \"../actions\";\r\nimport * as gameEngine from \"../game-engine\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { SlidePresenter } from \"./base/slide-presenter\";\r\nimport { formatText, selectText } from \"./base/text-slide-presenter\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TruthOrDareSlideState,\r\n    players: state.settings.players,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: actions.requestSlideAsync.request,\r\n    setState: actions.setSlideState,\r\n    applyCard: actions.applyCard,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            cursor: \"default\",\r\n        },\r\n        clickableRoot: {\r\n            ...getRootStyles()\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1.5rem\",\r\n            },\r\n        },\r\n        spaceHeader: {\r\n            visibility: \"hidden\",\r\n            marginTop: 15,\r\n        },\r\n        questionPaper: {\r\n            padding: theme.spacing.unit * 2,\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                padding: theme.spacing.unit * 3,\r\n                width: theme.spacing.unit * 50,\r\n            },\r\n        },\r\n        questionButtonsContainer: {\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            marginTop: theme.spacing.unit,\r\n        },\r\n    });\r\n\r\ntype MappedActions = typeof dispatchProps;\r\n\r\ntype Props = MappedActions &\r\n    ReturnType<typeof mapStateToProps> &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction QuestionComponent(props: Props) {\r\n    const { state, players, nextSlide, classes } = props;\r\n    const player = players.find(x => x.id === state.selectedPlayer);\r\n    if (player === undefined) {\r\n        nextSlide(toTranslator(props));\r\n        return <div />;\r\n    }\r\n\r\n    const select = (decision: TruthOrDare) =>\r\n        new TruthOrDareSlide(toTranslator(props)).select(decision, props, player);\r\n\r\n    const springProps = useSpring({\r\n        opacity: 1,\r\n        transform: \"scale(1, 1)\",\r\n        from: { opacity: 0, transform: \"scale(2.5, 2.5)\" },\r\n    });\r\n\r\n    return (\r\n        <animated.div style={springProps}>\r\n            <Paper className={classes.questionPaper}>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    <Translate\r\n                        id=\"slides.truthordare.playerTruthordare\"\r\n                        data={{ name: player.name }}\r\n                    />\r\n                </Typography>\r\n                <div className={classes.questionButtonsContainer}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ marginRight: 15 }}\r\n                        onClick={() => select(\"Truth\")}\r\n                    >\r\n                        <Translate id=\"slides.truthordare.truth\" />\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => select(\"Dare\")}>\r\n                        <Translate id=\"slides.truthordare.dare\" />\r\n                    </Button>\r\n                </div>\r\n            </Paper>\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nfunction DareComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <Translate id=\"slides.truthordare.truth\" /> <Translate id=\"slides.truthordare.or\" />{\" \"}\r\n            <b>\r\n                <Translate id=\"slides.truthordare.dare\" />\r\n            </b>\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <b>\r\n                <Translate id=\"slides.truthordare.truth\" />\r\n            </b>{\" \"}\r\n            <Translate id=\"slides.truthordare.or\" /> <Translate id=\"slides.truthordare.dare\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthOrDareComponent(props: Props) {\r\n    const { classes, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    if (state.isDeciding) {\r\n        return <div className={classes.root}>{QuestionComponent(props)}</div>;\r\n    }\r\n\r\n    if (state.decision === \"Dare\") {\r\n        return DareComponent(props);\r\n    } else {\r\n        return TruthComponent(props);\r\n    }\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TruthOrDareComponent) as React.ComponentType;\r\n\r\ntype TruthOrDare = \"Truth\" | \"Dare\";\r\n\r\ninterface TruthOrDareSlideState {\r\n    selectedPlayer: string;\r\n    isDeciding: boolean;\r\n    decision?: TruthOrDare;\r\n    markdownContent?: string;\r\n}\r\n\r\nexport class TruthOrDareSlide implements SlidePresenter {\r\n    backgroundColor = colors.truthOrDare;\r\n\r\n    constructor(private translator: Translator) {}\r\n\r\n    public slideType = \"TruthOrDareSlide\";\r\n    public requiredCards = [\"TaskCard\", \"QuestionCard\"];\r\n\r\n    public select(decision: TruthOrDare, actions: MappedActions, player: PlayerInfo) {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const cardType = decision === \"Dare\" ? \"TaskCard\" : \"QuestionCard\";\r\n        const cardRef = selection.selectCard(cardType);\r\n        const card = cardRef.card as TextCard;\r\n\r\n        const selectedText = selectText(selection, card, this.translator);\r\n        const text = `#### ${this.translator.translate(\r\n            \"slides.truthordare.instruction\",\r\n        )}\\n${selectedText}`;\r\n\r\n        const { formatted } = formatText(\r\n            text,\r\n            card,\r\n            [{ index: 99, player }],\r\n            selection,\r\n            this.translator,\r\n        );\r\n\r\n        actions.applyCard(cardRef);\r\n\r\n        const state: TruthOrDareSlideState = {\r\n            isDeciding: false,\r\n            selectedPlayer: player.id,\r\n            markdownContent: formatted,\r\n            decision,\r\n        };\r\n        actions.setState({ state, insights: selection.insights.playerSelection });\r\n    }\r\n\r\n    initialize(): RootAction[] {\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const player = gameEngine.selectPlayers(\r\n            selection,\r\n            [new PlayerSetting(1, \"None\")],\r\n            [],\r\n            [],\r\n        )[0].player;\r\n\r\n        return [\r\n            this.setState(\r\n                { isDeciding: true, selectedPlayer: player.id },\r\n                selection.insights.playerSelection,\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private setState(\r\n        state: TruthOrDareSlideState,\r\n        insights: PlayerSelectionInsights | null = null,\r\n    ): RootAction {\r\n        return actions.setSlideState({ state, insights });\r\n    }\r\n\r\n    initializeFollowUp(): RootAction[] {\r\n        throw new Error(\"Method not supported.\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\nimport { compose } from \"redux\";\r\nimport { DownCard } from \"src/impl/cards/down-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DownSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DownSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.down.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Spring\r\n                    config={config.wobbly}\r\n                    from={{ transform: \"translate(-100px, 0px)\" }}\r\n                    to={{ transform: \"translate(0px, 0px)\" }}\r\n                >\r\n                    {props => (\r\n                        <div style={props as any}>\r\n                            {header}\r\n                            <Markdown\r\n                                children={state.markdownContent}\r\n                                options={defaultMarkdownOptions}\r\n                            />\r\n                            <div className={classes.spaceHeader}>{header}</div>\r\n                        </div>\r\n                    )}\r\n                </Spring>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(DownSlideComponent) as React.ComponentType;\r\n\r\ninterface DownSlideState extends TextSlideState {}\r\nexport class DownSlide extends TextSlidePresenter<DownSlideState, DownCard> {\r\n    backgroundColor = colors.down;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DownCard\", \"DownSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { FactCard } from \"src/impl/cards/fact-card\";\r\nimport * as actions from \"../actions\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles, getHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { CardRef } from \"@core/cards/card-ref\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as FactSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction FactSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id={`slides.fact.title${state.isFollowUp ? (state.isTrue ? \".true\" : \".false\") : \"\"}`} />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface FactSlideFollowUpParam {\r\n    mode: FactSlideMode;\r\n    players: SelectedPlayer[];\r\n    isTrue: boolean;\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize\r\n)(FactSlideComponent) as React.ComponentType;\r\n\r\ntype FactSlideMode = \"singleplayer\" | \"multiplayer\";\r\nconst availableFactSlideModes: FactSlideMode[] = [\"singleplayer\", \"multiplayer\"];\r\n\r\ninterface FactSlideState extends TextSlideState {\r\n    isFollowUp: boolean;\r\n    mode: FactSlideMode;\r\n    isTrue: boolean;\r\n}\r\n\r\nexport class FactSlide extends TextSlidePresenter<FactSlideState, FactCard> {\r\n    private selectedMode: FactSlideMode;\r\n    private players?: SelectedPlayer[];\r\n    backgroundColor = colors.fact;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"FactCard\", \"FactSlide\");\r\n\r\n        this.selectedMode =\r\n            availableFactSlideModes[Math.floor(availableFactSlideModes.length * Math.random())];\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        const cardText = super.selectText(selection, selectedCard);\r\n        const instruction = this.translator.translate(`slides.fact.${this.selectedMode}`);\r\n\r\n        return `#### ${instruction}\\n${cardText}`;\r\n    }\r\n\r\n    selectFollowUpText(\r\n        _selection: SelectionAlgorithm,\r\n        selectedCard: FactCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const { mode, players } = param as FactSlideFollowUpParam;\r\n        const { isTrueFact } = selectedCard;\r\n\r\n        const text = this.translator.translate(`slides.fact.${mode}.${isTrueFact}`);\r\n        return { text, players };\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        card: FactCard,\r\n        players: SelectedPlayer[],\r\n    ): FactSlideState {\r\n        this.players = players;\r\n\r\n        return {\r\n            isFollowUp: false,\r\n            markdownContent: markdownContent,\r\n            mode: this.selectedMode,\r\n            isTrue: card.isTrueFact,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string, card: FactCard,  param: any): FactSlideState {\r\n        const { mode } = param as FactSlideFollowUpParam;\r\n        return {\r\n            isFollowUp: true,\r\n            markdownContent: markdownContent,\r\n            mode,\r\n            isTrue: card.isTrueFact,\r\n        };\r\n    }\r\n\r\n    protected initializeCard(card: FactCard, cardRef: CardRef): RootAction[] {\r\n        return [...super.initializeCard(card, cardRef), actions.enqueueFollowUp({\r\n            due: new Date(),\r\n            selectedCard: cardRef,\r\n            slideType: \"FactSlide\",\r\n            param: {\r\n                mode: this.selectedMode,\r\n                players: this.players,\r\n            } as FactSlideFollowUpParam,\r\n        })];\r\n    }\r\n}\r\n","import { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport {\r\n    getRootStyles,\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { ReactNode } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStyles, Theme, WithStyles, Typography, withStyles } from \"@material-ui/core\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { NeverEverCard } from \"src/impl/cards/never-ever-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as State,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NeverEverComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h5\">\r\n            <Translate id=\"slides.neverever.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    const springProps = useSpring({\r\n        opacity: 1,\r\n        transform: \"rotate(0deg)\",\r\n        from: { opacity: 0, transform: \"rotate(20deg)\" },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <animated.div style={springProps} className={classes.content}>\r\n                {header}\r\n                <Typography variant=\"h5\" className={classes.instruction}>\r\n                    <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                </Typography>\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.neverever.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </animated.div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NeverEverComponent) as React.ComponentType;\r\n\r\ninterface State extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class NeverEverSlide extends TextSlidePresenter<State, NeverEverCard> {\r\n    backgroundColor = colors.neverEver;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NeverEverCard\", \"NeverEverSlide\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: NeverEverCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2), // at least two sips so the text can be plural\r\n        };\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator, SelectedPlayer } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WouldYouRatherCard } from \"src/impl/cards/would-you-rather-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as WouldYouRatherSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction WouldYouRatherSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.wouldyourather.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.wouldyourather.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(WouldYouRatherSlideComponent) as React.ComponentType;\r\n\r\ninterface WouldYouRatherSlideState extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class WouldYouRatherSlide extends TextSlidePresenter<\r\n    WouldYouRatherSlideState,\r\n    WouldYouRatherCard\r\n> {\r\n    backgroundColor = colors.wouldYouRather;\r\n    constructor(translator: Translator) {\r\n        super(translator, \"WyrCard\", \"WouldYouRatherSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: WouldYouRatherCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): WouldYouRatherSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2), // at least two sips so the text can be plural\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): WouldYouRatherSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { DrinkCard } from \"src/impl/cards/drink-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DrinkSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DrinkSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(DrinkSlideComponent) as React.ComponentType;\r\n\r\ninterface DrinkSlideState extends TextSlideState {}\r\nexport class DrinkSlide extends TextSlidePresenter<DrinkSlideState, DrinkCard> {\r\n    backgroundColor = colors.drink;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DrinkCard\", \"DrinkSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DrinkSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DrinkSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { VirusCard } from \"src/impl/cards/virus-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as VirusSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction VirusSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.virus.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(VirusSlideComponent) as React.ComponentType;\r\n\r\ninterface VirusSlideState extends TextSlideState {}\r\nexport class VirusSlide extends TextSlidePresenter<VirusSlideState, VirusCard> {\r\n    backgroundColor = colors.virus;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"VirusCard\", \"VirusSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): VirusSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): VirusSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { NoIdeaLosesCard } from \"src/impl/cards/no-idea-loses-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as NoIdeaLosesSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NoIdeaLosesSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NoIdeaLosesSlideComponent) as React.ComponentType;\r\n\r\ninterface NoIdeaLosesSlideState extends TextSlideState {}\r\nexport class NoIdeaLosesSlide extends TextSlidePresenter<NoIdeaLosesSlideState, NoIdeaLosesCard> {\r\n    backgroundColor = colors.noIdeaLoses;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NoIdeaLosesCard\", \"NoIdeaLosesSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): NoIdeaLosesSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): NoIdeaLosesSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { GroupGameCard } from \"src/impl/cards/group-game-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as GroupGameSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction GroupGameSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.groupgame.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(GroupGameSlideComponent) as React.ComponentType;\r\n\r\ninterface GroupGameSlideState extends TextSlideState {}\r\nexport class GroupGameSlide extends TextSlidePresenter<GroupGameSlideState, GroupGameCard> {\r\n    backgroundColor = colors.groupGame;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"GroupGameCard\", \"GroupGameSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): GroupGameSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): GroupGameSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { TaskCard } from \"src/impl/cards/task-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TaskSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction TaskSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.task.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TaskSlideComponent) as React.ComponentType;\r\n\r\ninterface TaskSlideState extends TextSlideState {}\r\nexport class TaskSlide extends TextSlidePresenter<TaskSlideState, TaskCard> {\r\n    backgroundColor = colors.task;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"TaskCard\", \"TaskSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        let task = super.selectText(selection, selectedCard);\r\n        if (/[A-Z-a-z]$/g.test(task)) {\r\n            task = task + \".\";\r\n        }\r\n\r\n        return \"[Player99]: \" + task + \" \" + this.translator.translate(\"slides.task.instruction\");\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): TaskSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): TaskSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { TruthOrDareSlide } from './slides/TruthOrDareSlide';\r\nimport { DownSlide } from \"./slides/DownSlide\";\r\nimport { SlidePresenter } from \"./slides/base/slide-presenter\";\r\nimport { FactSlide } from \"./slides/FactSlide\";\r\nimport { NeverEverSlide } from \"./slides/NeverEverSlide\";\r\nimport { Translator } from \"GameModels\";\r\nimport { WouldYouRatherSlide } from './slides/WouldYouRatherSlide';\r\nimport { DrinkSlide } from './slides/DrinkSlide';\r\nimport { VirusSlide } from './slides/VirusSlide';\r\nimport { NoIdeaLosesSlide } from './slides/NoIdeaLosesSlide';\r\nimport { GroupGameSlide } from './slides/GroupGameSlide';\r\nimport { TaskSlide } from './slides/TaskSlide';\r\nimport { OpeningSlide } from './slides/OpeningSlide';\r\n\r\nexport type SlideComponents = { [type: string]: new(translator: Translator) => SlidePresenter };\r\n\r\nexport const slideComponents: SlideComponents = {\r\n    DownSlide,\r\n    FactSlide,\r\n    NeverEverSlide,\r\n    TruthOrDareSlide,\r\n    WouldYouRatherSlide,\r\n    DrinkSlide,\r\n    VirusSlide,\r\n    NoIdeaLosesSlide,\r\n    GroupGameSlide,\r\n    TaskSlide,\r\n    OpeningSlide,\r\n};\r\n","import { MelinaAlgorithm } from \"./../../core/selection/melina-algorithm\";\r\nimport { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { filter, mergeMap, tap, ignoreElements } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../store/index\";\r\nimport * as actions from \"./actions\";\r\nimport { getRandomSelectionAlgorithm } from \"./game-engine\";\r\nimport { slideComponents } from \"./component-registry\";\r\nimport { of } from \"rxjs\";\r\nimport { Translator } from \"GameModels\";\r\nimport { getSlideRegistrations } from \"./slides-processor\";\r\nimport Fullscreen from \"@utils/fullscreen\";\r\n\r\nexport const nextSlideEpic: Epic<RootAction, RootAction, RootState, Services> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.requestSlideAsync.request)),\r\n        mergeMap(x => of(...nextSlide(x.payload))),\r\n    );\r\n\r\nexport const redirectOnGameStartedEpic: Epic<\r\n    RootAction,\r\n    RootAction,\r\n    RootState,\r\n    Services\r\n> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.startGame)),\r\n        tap(action => action.payload.push(\"/game\")),\r\n        tap(() => Fullscreen.requestFullscreen(window.document.documentElement)),\r\n        ignoreElements(),\r\n    );\r\n\r\nfunction nextSlide(translator: Translator): RootAction[] {\r\n    const now = new Date();\r\n    let state = store.getState();\r\n\r\n    const dueFollowUps = state.game.followUp.filter(x => x.due < now);\r\n    if (dueFollowUps.length > 0) {\r\n        const followUp = _.sortBy(dueFollowUps, x => x.due.getSeconds())[0];\r\n\r\n        const factory = slideComponents[followUp.slideType];\r\n        const slideInitalizer = new factory(translator);\r\n        const slideActions = slideInitalizer.initializeFollowUp(\r\n            followUp.selectedCard,\r\n            followUp.param,\r\n        );\r\n\r\n        return [actions.activateFollowUp(followUp), ...slideActions];\r\n    }\r\n\r\n    let selection = getRandomSelectionAlgorithm(state);\r\n    const slides = getSlideRegistrations(slideComponents);\r\n\r\n    const { willPower, memory } = selection.recomputeWillPower(state.game.willPowerMemory);\r\n    const willPowerActions = new Array<RootAction>();\r\n\r\n    if (willPower !== state.game.currentWillPower) {\r\n        if (!state.game.isWillPowerLocked) {\r\n            willPowerActions.push(actions.setWillPower(willPower));\r\n            state = { ...state, game: { ...state.game, currentWillPower: willPower } };\r\n            selection = getRandomSelectionAlgorithm(state);\r\n        }\r\n    }\r\n\r\n    if (memory.length > 0) {\r\n        willPowerActions.push(actions.addWillPowerMemory(memory));\r\n    }\r\n\r\n    const slideType = selection.selectNextSlide(slides);\r\n    if (slideType === undefined) {\r\n        // TODO: end game\r\n        throw new Error(\"Game Finished\");\r\n    }\r\n\r\n    const factory = slideComponents[slideType];\r\n    const slideInitalizer = new factory(translator);\r\n    const slideActions = slideInitalizer.initialize();\r\n\r\n    return [\r\n        actions.requestSlideAsync.success({\r\n            slide: slideType,\r\n            insights: (selection as MelinaAlgorithm).insights.slideWeights!,\r\n        }),\r\n        ...slideActions,\r\n        ...willPowerActions\r\n    ];\r\n}\r\n","import { SlideComponents } from \"./component-registry\";\r\nimport { SlideRegistration } from \"@core/slide-registration\";\r\n\r\nexport function getSlideRegistrations(components: SlideComponents): SlideRegistration[] {\r\n    const result = new Array<SlideRegistration>();\r\n\r\n    for (const component in components) {\r\n        if (components.hasOwnProperty(component)) {\r\n            const element = components[component];\r\n            const slide = new element({ languageCode: \"en\", translate: () => \"\" });\r\n            result.push({ slideType: slide.slideType, requestedCards: slide.requiredCards });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { combineEpics } from \"redux-observable\";\r\nimport * as settingsEpics from \"../features/settings/epics\";\r\nimport * as gameEpics from \"../features/game/epics\";\r\n\r\nexport default combineEpics(...Object.values(settingsEpics), ...Object.values(gameEpics));\r\n","import { compose } from \"redux\";\r\n\r\n// @ts-ignore\r\nexport const composeEnhancers =\r\n    (process.env.NODE_ENV === \"development\" &&\r\n        window &&\r\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n","import { PlayerSelectionInsights, SlideSelectionInsights } from './../../core/selection/insights';\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport * as actions from \"./actions\";\r\nimport { FollowUpSlide } from \"GameModels\";\r\nimport cuid from 'cuid';\r\nimport { CardRef } from '@core/cards/card-ref';\r\n\r\nexport type GameState = Readonly<{\r\n    isStarted: boolean;\r\n\r\n    selectedSlide: string | null;\r\n    selectedCard: CardRef | null;\r\n\r\n    slideState: any | null;\r\n\r\n    currentWillPower: number;\r\n    isWillPowerLocked: boolean;\r\n    willPowerMemory: string[];\r\n\r\n    playerInsights: PlayerSelectionInsights | null;\r\n    slideInsights: SlideSelectionInsights | null;\r\n\r\n    startTime: Date | null;\r\n\r\n    cardsHistory: CardRef[];\r\n    slidesHistory: string[];\r\n    followUp: FollowUpSlide[];\r\n    activeFollowUp: FollowUpSlide | null;\r\n    currentSlideStatus: string;\r\n}>;\r\n\r\nexport default combineReducers<GameState, RootAction>({\r\n    cardsHistory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return [action.payload, ...state];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slidesHistory: (state = [], action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return [action.payload.slide, ...state];\r\n        }\r\n        return state;\r\n    },\r\n    isStarted: (state = false, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.startGame):\r\n                return true;\r\n            case getType(actions.cancelGame):\r\n                return false;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    selectedCard: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return action.payload;\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.selectedCard;\r\n        }\r\n        return state;\r\n    },\r\n    selectedSlide: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return action.payload.slide;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.slideType;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slideState: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n            case getType(actions.activateFollowUp):\r\n                return null;\r\n            case getType(actions.setSlideState):\r\n                return action.payload.state;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    followUp: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.enqueueFollowUp):\r\n                return [...state, action.payload];\r\n            case getType(actions.activateFollowUp):\r\n                return state.filter(x => x.due !== action.payload.due);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    activeFollowUp: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    startTime: (state = null, action) => {\r\n        if (action.type === getType(actions.startGame)) {\r\n            return new Date();\r\n        }\r\n        return state;\r\n    },\r\n    isWillPowerLocked: (state = false, action) => {\r\n        if (action.type === getType(actions.setWillPowerLocked)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentWillPower: (state = 1, action) => {\r\n        if (action.type === getType(actions.setWillPower)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    willPowerMemory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addWillPowerMemory):\r\n                return [...state, ...action.payload];\r\n            case getType(actions.startGame):\r\n                return [];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    playerInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.setSlideState)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    slideInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentSlideStatus: (state = \"\", action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return cuid();\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport { PlayerArrangement } from \"@core/player-arrangement\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport * as actions from \"./actions\";\r\nimport { slideWeights } from \"../../preferences\";\r\nimport _ from \"lodash\";\r\n\r\nexport type SettingsState = Readonly<{\r\n    players: PlayerInfo[];\r\n    arrangements: PlayerArrangement[];\r\n    preferOppositeGenders: boolean;\r\n    slides: Array<Weighted<string>>;\r\n    socialMediaPlatform: string;\r\n    sources: SourceInfo[];\r\n    tags: Array<Weighted<string>>;\r\n}>;\r\n\r\nexport default combineReducers<SettingsState, RootAction>({\r\n    players: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayer):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayer):\r\n                return state.filter(x => x.id !== action.payload);\r\n            case getType(actions.updatePlayer):\r\n                return state.map(player =>\r\n                    player.id === action.payload.id ? action.payload : player,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    sources: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addSource):\r\n                return [...state, action.payload];\r\n            case getType(actions.removeSource):\r\n                return state.filter(x => x.url !== action.payload);\r\n            case getType(actions.loadSourceAsync.request):\r\n                return state.map(item =>\r\n                    item.url === action.payload ? { ...item, isLoading: true } : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.success):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? {\r\n                              ...item,\r\n                              cards: action.payload.cards,\r\n                              errorMessage: undefined,\r\n                              isLoading: false,\r\n                              tags: _.uniq(_.flatten(action.payload.cards.map(x => x.tags)).map(x => (x as string).toLowerCase()))\r\n                          }\r\n                        : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.failure):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? { ...item, isLoading: false, errorMessage: action.payload.message }\r\n                        : item,\r\n                );\r\n            case getType(actions.setSourceWeight):\r\n                return state.map(item =>\r\n                    item.url === action.payload.value\r\n                        ? { ...item, weight: action.payload.weight }\r\n                        : item,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    arrangements: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayerArrangment):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayerArrangment):\r\n                return state.filter(x => x.p1 !== action.payload);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    preferOppositeGenders: (state = true, action) => {\r\n        if (action.type === getType(actions.setPreferOppositeGenders)) {\r\n            return action.payload;\r\n        }\r\n        return state;\r\n    },\r\n    slides: (state = GetSlideWeightedArray(), action) => {\r\n        switch (action.type) {\r\n            case getType(actions.setSlideWeight):\r\n                return state.map(x => (x.value === action.payload.value ? action.payload : x));\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    socialMediaPlatform: (state = \"Snapchat\", action) => {\r\n        if (action.type === getType(actions.setSocialMediaPlatform)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    tags: (state = [], action) => {\r\n        if (action.type === getType(actions.setTagWeight)) {\r\n            const value = action.payload.value.toLowerCase();\r\n            const existingTag = state.find(x => x.value === value);\r\n            if (existingTag !== undefined) {\r\n                return state.map(x => x.value === value ? {value, weight: action.payload.weight} : x);\r\n            } else {\r\n                return [...state, action.payload];\r\n            }\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n\r\nfunction GetSlideWeightedArray() {\r\n    const weightsList: Weighted<string>[] = [];\r\n    for (const key in slideWeights) {\r\n        if (slideWeights.hasOwnProperty(key)) {\r\n            const element = slideWeights[key];\r\n            weightsList.push({ value: key, weight: element });\r\n        }\r\n    }\r\n\r\n    return weightsList;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"../features/game/reducer\";\r\nimport settingsReducer from \"../features/settings/reducer\";\r\nimport { localizeReducer } from \"react-localize-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    game: gameReducer,\r\n    settings: settingsReducer,\r\n    localize: localizeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport services from \"../services\";\r\nimport rootEpic from \"./root-epic\";\r\nimport { composeEnhancers } from \"./utils\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nexport const epicMiddleware = createEpicMiddleware<RootAction, RootAction, RootState, Services>({\r\n    dependencies: services,\r\n});\r\n\r\n// configure middlewares\r\nconst middlewares = [epicMiddleware];\r\n\r\n// compose enchancers\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n// rehydrate state on app start\r\nconst initialState = {};\r\n\r\n// create store\r\nconst store = createStore(rootReducer, initialState, enhancer);\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\n// export store singleton instance\r\nexport default store;\r\n","import { CardDeck } from \"@core/card-deck\";\r\nimport { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GameStatus } from \"@core/game-status\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer } from \"GameModels\";\r\nimport seedrandom from \"seedrandom\";\r\nimport store from \"../../store\";\r\n\r\nexport function selectPlayers(\r\n    selection: SelectionAlgorithm,\r\n    players: PlayerSetting[],\r\n    predefined: SelectedPlayer[],\r\n    tags: string[],\r\n): SelectedPlayer[] {\r\n    const result = selection.selectPlayers(\r\n        players.map(x => x.gender),\r\n        players.map(x => {\r\n            const p = predefined.find(y => y.index === x.playerIndex);\r\n            if (p === undefined) {\r\n                return null;\r\n            }\r\n\r\n            return p.player;\r\n        }),\r\n        tags,\r\n    );\r\n    const selected = result.map((x, i) => ({ index: players[i].playerIndex, player: x }));\r\n\r\n    return selected;\r\n}\r\n\r\nexport function getRandomSelectionAlgorithm(state?: RootState): SelectionAlgorithm {\r\n    if (state === undefined) {\r\n        state = store.getState();\r\n    }\r\n\r\n    const random = seedrandom();\r\n    return new MelinaAlgorithm(extractGameStatus(state), random);\r\n}\r\n\r\nfunction extractGameStatus(state: RootState): GameStatus {\r\n    const currentStatus: GameStatus = {\r\n        decks: state.settings.sources\r\n            .filter(x => x.cards !== undefined)\r\n            .map(item => {\r\n                const result: CardDeck = { ...item, cards: item.cards || [] };\r\n                return result;\r\n            }),\r\n        cardsHistory: state.game.cardsHistory,\r\n        language: state.localize.languages.find(x => x.active)!.code,\r\n        players: state.settings.players,\r\n        slides: state.settings.slides,\r\n        tags: state.settings.tags,\r\n        arrangements: state.settings.arrangements,\r\n        preferOppositeGenders: state.settings.preferOppositeGenders,\r\n        slidesHistory: state.game.slidesHistory,\r\n        startTime: state.game.startTime!,\r\n        willPower: state.game.currentWillPower,\r\n    };\r\n\r\n    return currentStatus;\r\n}\r\n","import { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    createStyles,\r\n    Typography,\r\n    withStyles,\r\n    WithStyles,\r\n    FormControl,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\nimport { toFixedEnd } from \"@utils/string-extensions\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Cell,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from \"recharts\";\r\nimport { compose } from \"redux\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { parsers } from \"../../../impl/registrations\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n});\r\n\r\nconst styles = createStyles({\r\n    chart: {\r\n        width: 200,\r\n        height: 300,\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles> & LocalizeContextProps;\r\ntype State = { selectedCardType: string | null };\r\n\r\nclass InsightsCards extends Component<Props, State> {\r\n    readonly state = { selectedCardType: null };\r\n\r\n    setSelectedCardType = (type: string) => {\r\n        this.setState({ selectedCardType: type === \"\" ? null : type });\r\n    };\r\n\r\n    render() {\r\n        const { translate, currentWillPower } = this.props;\r\n        const { selectedCardType } = this.state;\r\n\r\n        const cardTypes = [\"\", ...Object.keys(parsers)];\r\n\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const insights = selection.getAllCardDeckStatistics(selectedCardType);\r\n\r\n        const decksStatistics = percentageFixedTotal(insights.decks, x => x.weight, 1000).map(\r\n            x => ({\r\n                value: x.part / 10,\r\n                name: x.value.value.url,\r\n            }),\r\n        );\r\n\r\n        const willPowerStatistics = percentageFixedTotal(\r\n            insights.willPower,\r\n            x => x.weight,\r\n            1000,\r\n        ).map(x => ({\r\n            value: x.part / 10,\r\n            name: x.value.value.willPower || translate(\"insights.universal\"),\r\n            info: x.value.value,\r\n        }));\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.cardsDist\" />\r\n                </Typography>\r\n                <Grid container alignItems=\"flex-end\" spacing={16}>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select\r\n                                style={{ width: 200, marginTop: 10 }}\r\n                                value={selectedCardType || \"\"}\r\n                                displayEmpty={true}\r\n                                renderValue={x => x || translate(\"insights.allCards\")}\r\n                                onChange={ev => this.setSelectedCardType(ev.target.value)}\r\n                                input={<Input />}\r\n                            >\r\n                                {cardTypes.map(x => (\r\n                                    <MenuItem key={x} value={x}>\r\n                                        {x || translate(\"insights.allCards\")}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>{`${translate(\"insights.cards\")}: ${insights.totalCards}`}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <BarChart data={decksStatistics}>\r\n                        <CartesianGrid />\r\n                        <XAxis dataKey=\"name\" tickFormatter={x => toFixedEnd(x, 18)} />\r\n                        <YAxis tickFormatter={x => x + \"%\"} />\r\n                        <Tooltip\r\n                            formatter={x => x + \"%\"}\r\n                            labelFormatter={url =>\r\n                                translate(\"insights.cardDeckName\", {\r\n                                    url,\r\n                                    cards: insights.decks.find(x => x.value.url === url)!.value\r\n                                        .cards.length,\r\n                                })\r\n                            }\r\n                        />\r\n                        <Bar\r\n                            name={translate(\"insights.part\") as string}\r\n                            dataKey=\"value\"\r\n                            fill=\"#8884d8\"\r\n                            maxBarSize={20}\r\n                        />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.willPowerDist\" />\r\n                </Typography>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <BarChart data={willPowerStatistics}>\r\n                        <CartesianGrid />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis tickFormatter={x => x + \"%\"} />\r\n                        <Tooltip\r\n                            formatter={(x, _, e) =>\r\n                                `${x}% (${e.payload.info.count} ${translate(\"insights.cards\")})`\r\n                            }\r\n                        />\r\n                        <Bar\r\n                            dataKey=\"value\"\r\n                            maxBarSize={20}\r\n                            name={translate(\"insights.part\") as string}\r\n                        >\r\n                            {willPowerStatistics.map((entry, index) => (\r\n                                <Cell\r\n                                    fill={\r\n                                        entry.info.willPower === currentWillPower\r\n                                            ? \"#e74c3c\"\r\n                                            : \"#8884d8\"\r\n                                    }\r\n                                    key={index}\r\n                                />\r\n                            ))}\r\n                        </Bar>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(InsightsCards) as React.ComponentType;\r\n","export function toFixedEnd(s: string, length: number) {\r\n    if (length > s.length) {\r\n        return s;\r\n    }\r\n\r\n    return \"..\" + s.substring(s.length - length - 2, s.length);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InsightsCurrentSlide from \"./InsightsCurrentSlide\";\r\nimport InsightsWillPowerView from \"./InsightsWillPowerView\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport InsightsCards from \"./InsightsCards\";\r\n\r\nexport default class InsightsView extends Component {\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <InsightsWillPowerView />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 10}}>\r\n                    <InsightsCurrentSlide />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 20}}>\r\n                    <InsightsCards />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport {\r\n    AppBar,\r\n    Slide,\r\n    createStyles,\r\n    WithStyles,\r\n    withStyles,\r\n    Toolbar,\r\n    Button,\r\n    Typography,\r\n    Theme,\r\n} from \"@material-ui/core\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\nimport { withRouter, RouterProps } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport InsightsView from \"./InsightsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        margin: theme.spacing.unit,\r\n        overflowY: \"auto\",\r\n        overflowX: \"hidden\",\r\n    },\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction InsightsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.insights\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <InsightsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(InsightsDialog) as React.ComponentType;\r\n","import { AppBar, Button, createStyles, Slide, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogPaper: {\r\n        height: \"80vh\"\r\n    },\r\n    fullscreenPaper: {\r\n        height: \"100vh\"\r\n    }\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction SettingsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n                classes={{paperScrollPaper: classes.dialogPaper, paperFullScreen: classes.fullscreenPaper}}\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.settings\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <SettingsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(SettingsDialog) as React.ComponentType;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { slideComponents } from \"../component-registry\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & LocalizeContextProps;\r\n\r\nfunction SlideWrapper(props: Props) {\r\n    const { selectedSlide } = props;\r\n\r\n    if (selectedSlide === null) {\r\n        return <Typography variant=\"h3\">Loading game...</Typography>;\r\n    }\r\n\r\n    const factory = slideComponents[selectedSlide];\r\n    const slideInitalizer = new factory(toTranslator(props));\r\n    const springProps = useSpring({backgroundColor: slideInitalizer.backgroundColor, height: \"100%\"});\r\n\r\n    return <animated.div style={springProps}>{slideInitalizer.render()}</animated.div>;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n)(SlideWrapper) as React.ComponentType;\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport React, { Component } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect, DispatchProp } from \"react-redux\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { OpeningSlide } from \"../slides/OpeningSlide\";\r\nimport GameOptions from \"./GameOptions\";\r\nimport InsightsDialog from \"./InsightsDialog\";\r\nimport SettingsDialog from \"./SettingsDialog\";\r\nimport SlideWrapper from \"./SlideWrapper\";\r\nimport * as actions from \"../actions\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    current: state.game.currentSlideStatus,\r\n});\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & DispatchProp;\r\n\r\nclass GameComponent extends Component<Props> {\r\n    public componentDidMount() {\r\n        const openingSlide = new OpeningSlide();\r\n        const slideActions = openingSlide.initialize();\r\n\r\n        this.props.dispatch(\r\n            actions.requestSlideAsync.success({\r\n                slide: openingSlide.slideType,\r\n                insights: null,\r\n            }),\r\n        );\r\n\r\n        for (const action of slideActions) {\r\n            this.props.dispatch(action);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div\r\n                style={{ width: \"100%\", height: \"100%\", position: \"relative\", overflow: \"hidden\" }}\r\n            >\r\n                <SlideWrapper />\r\n                <div style={{ top: 10, right: 10, position: \"absolute\" }}>\r\n                    <GameOptions />\r\n                </div>\r\n                <Switch>\r\n                    <Route path=\"/game/settings\" component={SettingsDialog} />\r\n                    <Route path=\"/game/insights\" component={InsightsDialog} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n)(GameComponent) as React.ComponentType;\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\r\nimport WelcomeView from \"./features/welcome/components/WelcomeView\";\r\nimport GameComponent from \"./features/game/components/GameComponent\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    isStarted: state.game.isStarted,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction App({ isStarted }: Props) {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={WelcomeView} />\r\n                <Route\r\n                    path=\"/game\"\r\n                    render={() => (!isStarted ? <Redirect to=\"/\" /> : (<GameComponent />))}\r\n                />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"tslib\";\r\nimport \"typeface-roboto\";\r\nimport App from \"./App\";\r\nimport \"./env\";\r\nimport { addPlayer, addSource, loadSourceAsync } from \"./features/settings/actions\";\r\nimport \"./index.css\";\r\nimport store from \"./store\";\r\nimport { initialize, LocalizeProvider, NamedLanguage } from \"react-localize-redux\";\r\nimport drinctetTranslations from \"./loc/drinctet.json\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { defaultSources } from \"./preferences\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nfor (const src of defaultSources) {\r\n    store.dispatch(addSource(src));\r\n    store.dispatch(loadSourceAsync.request(src));\r\n}\r\n\r\nif (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    store.dispatch(addPlayer({ name: \"Vincent\", gender: \"Male\" }));\r\n    store.dispatch(addPlayer({ name: \"Melina\", gender: \"Female\" }));\r\n    store.dispatch(addPlayer({ name: \"Bursod\", gender: \"Male\" }));\r\n    store.dispatch(addPlayer({ name: \"Larny\", gender: \"Female\" }));\r\n    store.dispatch(addPlayer({ name: \"Sven\", gender: \"Male\" }));\r\n    store.dispatch(addPlayer({ name: \"Hufeld\", gender: \"Male\" }));\r\n}\r\n\r\nvar userLang = (navigator.language || ((navigator as any).userLanguage as string) || \"en\").split(\r\n    \"-\",\r\n)[0];\r\n\r\nconst languages: NamedLanguage[] = [\r\n    { code: \"en\", name: \"English\" },\r\n    { code: \"de\", name: \"Deutsch\" },\r\n];\r\nstore.dispatch(\r\n    initialize({\r\n        languages,\r\n        translation: drinctetTranslations,\r\n        options: { renderToStaticMarkup, defaultLanguage: userLang },\r\n    }),\r\n);\r\n\r\nconst Root = () => (\r\n    <div style={{ height: \"100%\" }}>\r\n        <Provider store={store}>\r\n            <LocalizeProvider store={store}>\r\n                <App />\r\n            </LocalizeProvider>\r\n        </Provider>\r\n    </div>\r\n);\r\n\r\nrender(<Root />, document.getElementById(\"root\"));\r\n\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}