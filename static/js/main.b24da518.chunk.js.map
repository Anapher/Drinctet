{"version":3,"sources":["env.ts","features/settings/actions.ts","features/settings/components/AddPlayerForm.tsx","core/player-info.ts","features/settings/selectors.ts","features/settings/components/PlayerListItem.tsx","features/settings/components/PlayerList.tsx","features/settings/components/AddSourceForm.tsx","features/settings/components/SourcesListItem.tsx","features/settings/components/SourcesList.tsx","features/settings/components/configuration/ChangeLanguage.tsx","features/settings/components/configuration/PlayerSettings.tsx","preferences.ts","features/settings/components/configuration/SocialMediaPlatform.tsx","features/settings/components/configuration/ItemPreferences.tsx","utils/statistics.ts","features/settings/components/configuration/SlidePreferences.tsx","features/settings/components/configuration/TagsPerferences.tsx","features/settings/components/Configuration.tsx","features/settings/components/SettingsView.tsx","features/welcome/components/DrinctetHeader.tsx","features/game/actions.ts","features/welcome/components/StartButton.tsx","features/welcome/components/WelcomeView.tsx","features/game/components/GameOptions.tsx","features/game/components/SettingsDialog.tsx","features/game/components/InsightsCurrentSlide.tsx","features/game/components/InsightsWillPowerView.tsx","core/selection/insights.ts","core/selection/utils.ts","core/selection/selection-algorithm-base.ts","core/selection/melina-algorithm.ts","core/cards-loader.ts","core/cards/player-setting.ts","core/parsing/parser-helper.ts","core/parsing/base-card-parser.ts","core/cards/text-element.ts","core/cards/text-translation.ts","core/parsing/text-content-parser.ts","core/parsing/text-card-parser.ts","core/cards/text-card.ts","core/cards/base-card.ts","impl/cards/fact-card.ts","impl/parsing/fact-card-parser.ts","impl/cards/virus-card.ts","impl/parsing/virus-card-parser.ts","impl/parsing/default-text-card-parser.ts","impl/cards/down-card.ts","impl/cards/never-ever-card.ts","impl/cards/joke-card.ts","impl/cards/question-card.ts","impl/cards/task-card.ts","impl/cards/would-you-rather-card.ts","impl/cards/drink-card.ts","impl/cards/group-game-card.ts","impl/cards/no-idea-loses-card.ts","impl/registrations.tsx","services/api/cards-loader.ts","impl/default-card-parser-factory.ts","services/index.ts","features/settings/epics.ts","features/game/utils.ts","features/game/slides/base/helper.tsx","core/text-fragment.ts","core/fragments/raw-text-fragment.ts","core/fragments/variable-fragment.ts","core/fragments/player-reference-fragment.ts","core/fragments/sips-fragment.ts","core/fragments/random-number-fragment.ts","core/fragments/random-text-fragment.ts","core/fragments/gender-based-selection-fragment.ts","core/fragments/social-media-platform-fragment.ts","core/parsing/text-decoder/default-text-decoder.ts","core/parsing/text-decoder/text-decoder-consts.ts","features/game/formatter/text-formatter.ts","features/game/slides/base/text-slide-presenter.ts","features/game/slides/base/card-presenter.ts","features/game/slides/colors.ts","features/game/slides/TruthOrDareSlide.tsx","features/game/slides/DownSlide.tsx","features/game/slides/FactSlide.tsx","features/game/slides/NeverEverSlide.tsx","features/game/slides/WouldYouRatherSlide.tsx","features/game/slides/DrinkSlide.tsx","features/game/slides/VirusSlide.tsx","features/game/slides/NoIdeaLosesSlide.tsx","features/game/slides/GroupGameSlide.tsx","features/game/slides/TaskSlide.tsx","features/game/component-registry.ts","features/game/epics.ts","features/game/slides-processor.ts","store/root-epic.ts","store/utils.ts","features/game/reducer.ts","features/settings/reducer.ts","store/root-reducer.ts","store/index.ts","features/game/game-engine.ts","features/game/components/InsightsCards.tsx","utils/string-extensions.ts","features/game/components/InsightsView.tsx","features/game/components/InsightsDialog.tsx","features/game/components/SlideWrapper.tsx","features/game/components/GameComponent.tsx","App.tsx","index.tsx"],"names":["process","LOCAL_STORAGE_VERSION","addPlayer","createStandardAction","map","playerInfo","payload","name","gender","id","cuid","updatePlayer","removePlayer","addSource","url","isLoading","errorMessage","undefined","cards","weight","tags","removeSource","loadSourceAsync","createAsyncAction","setSourceWeight","setPreferOppositeGenders","addPlayerArrangment","removePlayerArrangment","setSocialMediaPlatform","setSlideWeight","setTagWeight","dispatchProps","AddPlayerForm","state","handlePlayerNameChange","ev","_this","setState","currentTarget","value","handleAddClick","endsWith","props","handleFormKeyDown","e","key","preventDefault","this","translate","react","onKeyDown","style","display","Input_default","a","flexGrow","type","placeholder","onChange","Button_default","marginLeft","disabled","onClick","react_localize_redux_es","React","connect","withLocalize","PlayerInfo","Object","classCallCheck","getPlayers","players","getSources","sources","getIconButtonStyle","margin","width","height","PlayerListItem","_ref","onRemoveClick","onSwapGenderClick","onNameChanged","react_default","createElement","IconButton_default","aria-label","objectSpread","marginRight","index_es","react_fontawesome_index_es","icon","faMars","faVenus","error","onBlur","tabIndex","Delete_default","fontSize","selectors","settings","List_default","player","ListItem_default","components_PlayerListItem","loadSource","request","AddSourceForm","handleUrlChange","findIndex","x","_this2","sourceExists","LoadingItem","LoadingFailedItem","onReloadClick","color","variant","component","concat","WeightSlider","_ref2","onChangeWeight","lab_index_es","max","min","step","padding","_","n","withStyles","theme","createStyles","root","backgroundColor","palette","background","paper","title","textOverflow","wordBreak","overflow","fullWidth","withTheme","_ref3","classes","cardsCount","badgeContent","className","showZero","avatar","checked","b","titleTypographyProps","action","subheader","source","components_SourcesListItem","length","activeLanguage","languages","setActiveLanguage","container","item","xs","sm","md","lg","htmlFor","inputProps","code","target","lang","preferOppositeGenders","arrangements","section","marginTop","arrangmentItem","borderBottom","paddingBottom","arrangementSelect","defineProperty","breakpoints","down","control","c","label","filter","p2","arrangment","find","p1","arrangedPlayerId","alignItems","input","y","socialMediaPlatforms","slideWeights","FactSlide","DownSlide","NeverEverSlide","TruthOrDareSlide","WouldYouRatherSlide","DrinkSlide","VirusSlide","NoIdeaLosesSlide","GroupGameSlide","TaskSlide","higherArrangementPropabilityTags","platform","socialMediaPlatform","gutterBottom","ItemPreferences","_this$props","items","opacity","v","percentageFixedTotal","values","getPercentage","percentageValues","percent","total","reduce","result","Array","sum","prevBaseline","i","_percentageValues$i","sumRounded","Math","round","push","part","slides","slidePercentages","configuration_ItemPreferences","data","count","fontWeight","decks","weights","uniq","flatMap","Configuration","spacing","direction","marginBottom","configuration_ChangeLanguage","configuration_PlayerSettings","SocialMediaPlatform","configuration_SlidePreferences","TagsPerferences","SettingsView","handleChange","_event","handleChangeIndex","index","position","indicatorColor","textColor","lib_default","axis","ignoreNativeScroll","containerStyle","onChangeIndex","flexDirection","components_AddPlayerForm","components_PlayerList","components_AddSourceForm","components_SourcesList","overflowX","components_Configuration","responsiveHeader","responsiveSubTitle","Typography_default","startGame","cancelGame","requestSlideAsync","applyCard","setSlideState","enqueueFollowUp","activateFollowUp","setWillPowerLocked","setWillPower","addWillPowerMemory","styles","&:hover","compose","withRouter","history","arePlayersSelected","areSourcesAdded","areSourcesLoading","Fab_default","size","header","WelcomeView","possibleConstructorReturn","getPrototypeOf","call","viewportHeight","window","innerHeight","updateHeight","bind","assertThisInitialized","addEventListener","removeEventListener","justify","components_DrinctetHeader","components_SettingsView","components_StartButton","Component","button","GameOptions","anchorEl","handleMenuOpenClick","event","handleClose","handleNavigate","path","selectedCard","isOpen","MoreVert_default","open","onClose","PaperProps","Settings_default","DonutLarge_default","Feedback_default","selectedSlide","game","activeFollowUp","Transition","assign","appBar","flex","content","dialogPaper","fullscreenPaper","withMobileDialog","breakpoint","fullScreen","Dialog_default","TransitionComponent","maxWidth","paperScrollPaper","paperFullScreen","scrollableTable","tableCellNoBreak","whiteSpace","renderPlayerInsights","playerInsights","predefined","join","renderPredefinedPlayers","rounds","statistics","number","element","p","playerId","paddingLeft","conditionalBold","chosen","isBold","InsightsCurrentSlide","cardRef","card","wp","willPower","deckUrl","slide","slideInsights","renderSlideWeights","toggleContainer","justifyContent","currentWillPower","isLocked","isWillPowerLocked","exclusive","children","row","Insights","playerSelection","defaultRandomGenerator","random","selectRandomWeighted","getWeight","arguments","totalWeight","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","randomWeight","_i","MelinaAlgorithm","_SelectionAlgorithmBa","_getPrototypeOf2","_len","args","_key","apply","deckExhaustionLimit","insights","inherits","createClass","cardType","weightedDecks","weightCards","status","deckWeights","willPowerWeights","willPowerCounter","allCards","_loop","deck","toConsumableArray","boostWillPower","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_loop2","willPowerWeightsArray","keys","propName","Number","totalCards","playerSettings","definedPlayers","_this3","Error","forArrangement","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop4","arrangement","_iterator3","resultCounter","_loop3","sourceList","includes","malesCount","femalesCount","selectionRoundInsights","some","toLowerCase","dominant","changed","_this4","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop5","_iterator4","_loop6","_i4","selected","_this5","perfectCards","unplayedCards","cardsHistory","percentage","unplayedWeight","console","log","factor","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","perfectCard","availableSlides","_this6","uniqueCardTypes","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_loop7","_iterator8","requestedCards","cardTypeRatings","_i5","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","cardDeck","weightedSlides","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_loop8","slideSettings","slideType","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iterator7","slidesHistory","lastSlideType","lastSlide","floor","getRandom","_this7","filtered","weightedTag","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop9","cardsPlayed","exhaustionFactor","pow","weightedCards","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","rateWillPower","getHistoryFactor","getTagsFactor","_iterator11","memory","addedMemory","now","Date","getHours","slidesCount","tagWeights","historyPosition","cardWillPower","filteredDecks","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","verifyPlayerSpecification","weightedZero","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","tag","checkIfWeightedZero","condition","specification","specificationMales","actualMales","specificationFemales","actualFemales","SelectionAlgorithmBase","selectRandomFromWeightedList","CardsLoader","requestFile","parserFactory","domParser","DOMParser","_loadFromUrl","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","loadFile","abrupt","stop","_x","_loadFile","_callee2","xml","xmlDoc","cardElements","xmlElement","parser","_context2","sent","parseFromString","getElementsByTagName","parentElement","documentElement","nodeName","parseDeckReference","createParser","deserialize","indexOf","_x2","_x3","_x4","getAttribute","deckWhitelist","referenceRequests","cardRefs","idAttr","cardId","PlayerSetting","playerIndex","ParserHelper","s","startsWith","substring","isNaN","genderRequirementMap","split","m","male","f","female","o","opposite","same","BaseCardParser","createCard","getDefaultAttributes","parseAttributes","subElements","tagName","parseElement","parsePlayers","parsePlayer","parsePlayerTag","requiredGender","genderAttr","genderReq","parseGenderRequirement","TextElement","translations","TextTranslation","TextContentParser","isConditionalElement","parseTextElement","parseTranslation","textElement","texts","textXmlNode","textContent","TextCardParser","_BaseCardParser","textContentParser","rootXml","followUpAttr","followUpProbability","followUpPropability","followUpDelay","seconds","parseTimeSpanStringToSeconds","addElement","subElement","followUp","TextCard","_BaseCard","language","BaseCard","FactCard","_TextCard","isTrueFact","FactCardParser","_TextCardParser","get","prototype","attr","toBool","VirusCard","VirusCardParser","DefaultTextCardParser","factory","DownCard","NeverEverCard","JokeCard","QuestionCard","TaskCard","WouldYouRatherCard","DrinkCard","GroupGameCard","NoIdeaLosesCard","parsers","WyrCard","loader","DefaultCardParserFactory","response","axios","loadCards","_loadCards","loadFromUrl","services","api","cardsLoader","loadSourceEpic","action$","_state$","pipe","isActionOf","mergeMap","from","success","catchError","message","of","failure","toTranslator","localize","languageCode","getContentStyles","textAlign","up","spaceHeaderStyles","visibility","defaultMarkdownOptions","overrides","objectWithoutProperties","marginBlockStart","marginBlockEnd","h3","_ref4","h4","_ref5","TextFragment","RawTextFragment","_TextFragment","text","VariableFragment","PlayerReferenceFragment","_VariableFragment","SipsFragment","minSips","sipsIndex","RandomNumberFragment","numbers","NumberRange","StaticNumber","RandomTextFragment","GenderBasedSelectionFragment","femaleText","maleText","referencedPlayerIndex","SocialMediaPlatformFragment","DefaultTextDecoder","lastTokenIndex","token","readToken","parseVariableFragment","parseRandomSelectionFragment","parseGenderSelectionFragment","playerTag","playerRef","parameterBegin","genderString","parsePlayerIndex","sipsTag","sipsFragment","test","parseNumberArray","splitQuoted","currentNumber","numberStart","isRangeToken","num","delimiter","tokenStart","withinQuotes","replace","nextChar","fragment","splitterIndex","reference","endChar","char","TextFormatter","fragments","requiredPlayers","groupBy","hasOwnProperty","rootSetting","sips","selection","options","lastPlayerFragment","boldPlayerNames","boldSips","sip","referencedPlayer","playerKeys","getCount","TextSlidePresenter","_CardPresenter","translator","gameEngine","selectText","_this$formatText","formatText","formatted","initializeState","actions","due","setSeconds","getSeconds","createFollowUp","param","_this$selectFollowUpT","selectFollowUpText","initializeFollowUpState","followUps","CardPresenter","requiredCards","selectCard","initializeCard","initializeFollowUpCard","decode","getRequiredPlayers","requiredSips","getRequiredSips","indexedPlayers","sipInfo","getSips","store","getState","format","viableContents","toLocaleLowerCase","colors","drink","fact","groupGame","neverEver","noIdeaLoses","truthOrDare","virus","wouldYouRather","task","nextSlide","slideState","cursor","clickableRoot","spaceHeader","questionPaper","unit","questionButtonsContainer","isDeciding","selectedPlayer","select","decision","springProps","useSpring","transform","web","div","QuestionComponent","esm","markdownContent","DareComponent","TruthComponent","selectedText","getRandomSelectionAlgorithm","renderprops","config","wobbly","to","_TextSlidePresenter","DownSlide_Component","isFollowUp","isTrue","availableFactSlideModes","selectedMode","FactSlide_Component","cardText","instruction","_selection","mode","NeverEverSlide_Component","_card","_players","WouldYouRatherSlide_Component","DrinkSlide_Component","VirusSlide_Component","NoIdeaLosesSlide_Component","GroupGameSlide_Component","slideComponents","TaskSlide_Component","nextSlideEpic","dueFollowUps","sortBy","slideInitalizer","slideActions","initializeFollowUp","components","getSlideRegistrations","_selection$recomputeW","recomputeWillPower","willPowerMemory","willPowerActions","selectNextSlide","initialize","redirectOnGameStartedEpic","tap","ignoreElements","combineEpics","settingsEpics","gameEpics","composeEnhancers","combineReducers","getType","isStarted","startTime","currentSlideStatus","flatten","weightsList","GetSlideWeightedArray","rootReducer","gameReducer","settingsReducer","localizeReducer","epicMiddleware","createEpicMiddleware","dependencies","middlewares","enhancer","applyMiddleware","createStore","run","rootEpic","selectPlayers","seedrandom","active","extractGameStatus","chart","InsightsCards","selectedCardType","setSelectedCardType","cardTypes","getAllCardDeckStatistics","decksStatistics","willPowerStatistics","info","displayEmpty","renderValue","es6","dataKey","tickFormatter","formatter","labelFormatter","fill","maxBarSize","entry","InsightsView","components_InsightsWillPowerView","components_InsightsCurrentSlide","components_InsightsCards","overflowY","InsightsView_InsightsView","render","requestSlide","GameComponent","components_SlideWrapper","top","right","components_GameOptions","Switch","Route","SettingsDialog","InsightsDialog","current","BrowserRouter","basename","exact","components_GameComponent","Redirect","src_step","src_iterator","src_iteratorNormalCompletion","src","dispatch","userLang","navigator","userLanguage","translation","drinctetTranslations","renderToStaticMarkup","defaultLanguage","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b24da518.chunk.js","sourcesContent":["// @ts-ignore\r\nprocess.env.LOCAL_STORAGE_VERSION = 1;","import { PlayerArrangement } from './../../core/player-arrangement';\r\nimport { Weighted } from \"@core/weighted\";\r\nimport cuid from \"cuid\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { createAsyncAction, createStandardAction } from \"typesafe-actions\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport { Gender, PlayerInfo } from \"@core/player-info\";\r\n\r\nexport const addPlayer = createStandardAction(\"ADD_PLAYER\").map(\r\n    (playerInfo: { name: string; gender: Gender }): { payload: PlayerInfo } => ({\r\n        payload: {\r\n            name: playerInfo.name,\r\n            gender: playerInfo.gender,\r\n            id: cuid(),\r\n        },\r\n    }),\r\n);\r\nexport const updatePlayer = createStandardAction(\"UPDATE_PLAYER\")<PlayerInfo>();\r\nexport const removePlayer = createStandardAction(\"REMOVE_PLAYER\")<string>();\r\n\r\nexport const addSource = createStandardAction(\"ADD_SOURCE\").map(\r\n    (url: string): { payload: SourceInfo } => ({\r\n        payload: {\r\n            url,\r\n            isLoading: false,\r\n            errorMessage: undefined,\r\n            cards: undefined,\r\n            weight: 0.5,\r\n            tags: []\r\n        },\r\n    }),\r\n);\r\nexport const removeSource = createStandardAction(\"REMOVE_SOURCE\")<string>();\r\n\r\nexport const loadSourceAsync = createAsyncAction(\r\n    \"LOAD_SOURCE_REQUEST\",\r\n    \"LOAD_SOURCE_SUCCESS\",\r\n    \"LOAD_SOURCE_FAILURE\",\r\n)<string, { url: string; cards: Card[] }, { url: string; message: string }>();\r\n\r\nexport const setSourceWeight = createStandardAction(\"SET_SOURCE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setPreferOppositeGenders = createStandardAction(\"SET_PREFER_OPPOSITE_GENDERS\")<\r\n    boolean\r\n>();\r\n\r\nexport const addPlayerArrangment = createStandardAction(\"ADD_PLAYER_ARRANGEMENT\")<PlayerArrangement>();\r\nexport const removePlayerArrangment = createStandardAction(\"REMOVE_PLAYER_ARRANGEMENT\")<string>();\r\n\r\nexport const setSocialMediaPlatform = createStandardAction(\"SET_SOCIAL_MEDIA_PLATFORM\")<string>();\r\n\r\nexport const setSlideWeight = createStandardAction(\"SET_SLIDE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setTagWeight = createStandardAction(\"SET_TAG_WEIGHT\")<Weighted<string>>();\r\n","import * as React from \"react\";\r\nimport { addPlayer } from \"../actions\";\r\nimport { Gender } from \"../../../core/player-info\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\n\r\nconst dispatchProps = {\r\n    addPlayer,\r\n};\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    name: string;\r\n};\r\n\r\nclass AddPlayerForm extends React.Component<Props, State> {\r\n    readonly state = { name: \"\" };\r\n\r\n    handlePlayerNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ name: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        let gender: Gender = \"Male\";\r\n        if (this.state.name.endsWith(\"a\"))\r\n            //sorry Luca\r\n            gender = \"Female\";\r\n\r\n        this.props.addPlayer({ name: this.state.name, gender });\r\n        this.setState({ name: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.name) this.handleAddClick();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { name } = this.state;\r\n        const { translate } = this.props;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        placeholder={translate(\"settings.players.playerName\") as string}\r\n                        onChange={this.handlePlayerNameChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!name}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    dispatchProps,\r\n)(withLocalize(AddPlayerForm));\r\n","export class PlayerInfo {\r\n    constructor(public id: string, public name: string, public gender: Gender) {}\r\n}\r\n\r\nexport type Gender = \"Male\" | \"Female\";\r\n","import {SettingsState} from \"./reducer\";\r\n\r\nexport const getPlayers = (state: SettingsState) => state.players;\r\n\r\nexport const getSources = (state: SettingsState) => state.sources;\r\n","import { Gender } from \"../../../core/player-info\";\r\nimport React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVenus, faMars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\ninterface Props {\r\n    name: string;\r\n    gender: Gender;\r\n    onRemoveClick: () => void;\r\n    onSwapGenderClick: () => void;\r\n    onNameChanged: (name: string) => void;\r\n}\r\n\r\nconst getIconButtonStyle = (): React.CSSProperties => ({\r\n    margin: -10,\r\n    width: 48,\r\n    height: 48,\r\n});\r\n\r\nfunction PlayerListItem({ name, gender, onRemoveClick, onSwapGenderClick, onNameChanged }: Props) {\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <IconButton\r\n                aria-label=\"Swap Gender\"\r\n                onClick={onSwapGenderClick}\r\n                style={{ ...getIconButtonStyle(), marginRight: 0 }}\r\n            >\r\n                <Icon>\r\n                    <FontAwesomeIcon icon={gender === \"Male\" ? faMars : faVenus} />\r\n                </Icon>\r\n            </IconButton>\r\n            <Input\r\n                error={!name}\r\n                onBlur={() => {\r\n                    if (!name) onRemoveClick();\r\n                }}\r\n                style={{ flexGrow: 1, marginLeft: 5, marginRight: 5 }}\r\n                placeholder=\"Will be removed!\"\r\n                value={name}\r\n                onChange={ev => onNameChanged(ev.currentTarget.value)}\r\n            />\r\n            <IconButton\r\n                aria-label=\"Delete\"\r\n                onClick={onRemoveClick}\r\n                style={{ ...getIconButtonStyle(), marginLeft: 0 }}\r\n                tabIndex={-1}\r\n            >\r\n                <DeleteIcon fontSize=\"default\" />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerListItem;\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlayerInfo } from \"../../../core/player-info\";\r\nimport { removePlayer, updatePlayer } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport PlayerListItem from \"./PlayerListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  players: selectors.getPlayers(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n  removePlayer,\r\n  updatePlayer,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction PlayerList({ players, removePlayer, updatePlayer }: Props) {\r\n  return (\r\n    <List>\r\n      {players.map(player => (\r\n        <ListItem key={player.id}>\r\n          <ListItemText>\r\n            <PlayerListItem\r\n              name={player.name}\r\n              gender={player.gender}\r\n              onRemoveClick={() => removePlayer(player.id)}\r\n              onNameChanged={name =>\r\n                updatePlayer(new PlayerInfo(player.id, name, player.gender))\r\n              }\r\n              onSwapGenderClick={() =>\r\n                updatePlayer(\r\n                  new PlayerInfo(\r\n                    player.id,\r\n                    player.name,\r\n                    player.gender === \"Female\" ? \"Male\" : \"Female\",\r\n                  ),\r\n                )\r\n              }\r\n            />\r\n          </ListItemText>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(PlayerList);\r\n","import Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addSource, loadSourceAsync } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    addSource,\r\n    loadSource: loadSourceAsync.request,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    url: string;\r\n};\r\n\r\nclass AddSourceForm extends React.Component<Props, State> {\r\n    readonly state = { url: \"\" };\r\n\r\n    handleUrlChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ url: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        if (!this.state.url || this.props.sources.findIndex(x => x.url === this.state.url) > -1) {\r\n            return;\r\n        }\r\n\r\n        this.props.addSource(this.state.url);\r\n        this.props.loadSource(this.state.url);\r\n        this.setState({ url: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.url) {\r\n                this.handleAddClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { url } = this.state;\r\n        const { translate } = this.props;\r\n        const sourceExists = this.props.sources.findIndex(x => x.url === this.state.url) > -1;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={url}\r\n                        placeholder={translate(\"settings.sources.sourceUrl\") as string}\r\n                        error={sourceExists}\r\n                        onChange={this.handleUrlChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!url || sourceExists}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(AddSourceForm));\r\n","import {\r\n    Card,\r\n    CardHeader,\r\n    Typography,\r\n    Link,\r\n    Checkbox,\r\n    withStyles,\r\n    Theme,\r\n    createStyles,\r\n    LinearProgress,\r\n    Badge,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface LoadingFailedItemProps {\r\n    errorMessage: string | undefined;\r\n    onReloadClick: () => void;\r\n}\r\n\r\ninterface WeightProps {\r\n    weight: number;\r\n    onChangeWeight: (value: number) => void;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n        },\r\n        title: {\r\n            textOverflow: \"elipsis\",\r\n            wordBreak: \"break-all\",\r\n            overflow: \"hidden\",\r\n        },\r\n        fullWidth: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LoadingFailedItemProps, WeightProps, WithStyles<typeof styles> {\r\n    url: string;\r\n    isLoading: boolean;\r\n    cardsCount: number;\r\n    weight: number;\r\n    onRemoveClick: () => void;\r\n}\r\n\r\nfunction LoadingItem() {\r\n    return <LinearProgress />;\r\n}\r\n\r\nfunction LoadingFailedItem({ errorMessage, onReloadClick }: LoadingFailedItemProps) {\r\n    return (\r\n        <Typography color=\"secondary\" variant=\"body1\" component=\"small\">\r\n            {`${errorMessage}`}\r\n            <Link\r\n                style={{ marginLeft: 15 }}\r\n                component=\"button\"\r\n                variant=\"body1\"\r\n                onClick={onReloadClick}\r\n            >\r\n                Reload\r\n            </Link>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nfunction WeightSlider({ weight, onChangeWeight }: WeightProps) {\r\n    return (\r\n        <Slider\r\n            max={1}\r\n            min={0}\r\n            step={0.05}\r\n            style={{ margin: 10, padding: '4px 0px' }}\r\n            value={weight}\r\n            onChange={(_, n) => onChangeWeight(n)}\r\n        />\r\n    );\r\n}\r\n\r\nfunction SourcesListItem({\r\n    url,\r\n    classes,\r\n    isLoading,\r\n    errorMessage,\r\n    cardsCount,\r\n    weight,\r\n    onRemoveClick,\r\n    onReloadClick,\r\n    onChangeWeight,\r\n}: Props) {\r\n    return (\r\n        <Badge\r\n            badgeContent={cardsCount}\r\n            color=\"primary\"\r\n            max={9999}\r\n            className={classes.fullWidth}\r\n            showZero={false}\r\n        >\r\n            <Card className={classes.fullWidth}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Checkbox\r\n                            checked={weight !== 0}\r\n                            style={{ margin: -10 }}\r\n                            onChange={(_, b) => (b ? onChangeWeight(0.5) : onChangeWeight(0))}\r\n                        />\r\n                    }\r\n                    titleTypographyProps={{ className: classes.title }}\r\n                    title={url}\r\n                    action={\r\n                        <IconButton onClick={onRemoveClick}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    subheader={\r\n                        isLoading ? (\r\n                            <LoadingItem />\r\n                        ) : errorMessage ? (\r\n                            <LoadingFailedItem\r\n                                errorMessage={errorMessage}\r\n                                onReloadClick={onReloadClick}\r\n                            />\r\n                        ) : (\r\n                            <WeightSlider weight={weight} onChangeWeight={onChangeWeight} />\r\n                        )\r\n                    }\r\n                />\r\n            </Card>\r\n        </Badge>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(SourcesListItem);\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadSourceAsync, removeSource, setSourceWeight } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport SourcesListItem from \"./SourcesListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    loadSource: loadSourceAsync.request,\r\n    removeSource,\r\n    setSourceWeight,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SourcesList({ sources, removeSource, loadSource, setSourceWeight }: Props) {\r\n    return (\r\n        <List>\r\n            {sources.map(source => (\r\n                <ListItem key={source.url}>\r\n                    <ListItemText>\r\n                        <SourcesListItem\r\n                            url={source.url}\r\n                            isLoading={source.isLoading}\r\n                            errorMessage={source.errorMessage}\r\n                            cardsCount={(source.cards && source.cards.length) || 0}\r\n                            weight={source.weight}\r\n                            onChangeWeight={weight =>\r\n                                setSourceWeight({ value: source.url, weight })\r\n                            }\r\n                            onRemoveClick={() => removeSource(source.url)}\r\n                            onReloadClick={() => loadSource(source.url)}\r\n                        />\r\n                    </ListItemText>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(SourcesList);\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\n\r\nconst styles = () =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ntype Props = LocalizeContextProps & WithStyles<typeof styles>;\r\n\r\nfunction ChangeLanguage({ activeLanguage, languages, setActiveLanguage, classes }: Props) {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12} sm={10} md={8} lg={6}>\r\n                <FormControl className={classes.root}>\r\n                    <InputLabel htmlFor=\"language-input\">\r\n                        <Translate id=\"settings.configuration.language\" />\r\n                    </InputLabel>\r\n                    <Select\r\n                        inputProps={{\r\n                            id: \"language-input\",\r\n                        }}\r\n                        style={{ width: \"100%\" }}\r\n                        value={activeLanguage.code}\r\n                        onChange={ev => setActiveLanguage(ev.target.value)}\r\n                    >\r\n                        {languages.map(lang => (\r\n                            <MenuItem key={lang.code} value={lang.code}>{lang.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(withLocalize(ChangeLanguage));\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    Typography,\r\n    Switch,\r\n    FormControlLabel,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Theme,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n} from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    preferOppositeGenders: state.settings.preferOppositeGenders,\r\n    players: state.settings.players,\r\n    arrangements: state.settings.arrangements,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        section: {\r\n            marginTop: 10,\r\n        },\r\n        arrangmentItem: {\r\n            borderBottom: \"1px solid #d8d8d8\",\r\n            paddingBottom: 5,\r\n        },\r\n        arrangementSelect: {\r\n            width: 200,\r\n            [theme.breakpoints.down(\"xs\")]: {\r\n                width: \"100%\",\r\n            },\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles>;\r\n\r\nfunction PlayerSettings({\r\n    preferOppositeGenders,\r\n    setPreferOppositeGenders,\r\n    classes,\r\n    players,\r\n    arrangements,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.playerSettings\" />\r\n            </Typography>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={preferOppositeGenders}\r\n                        onChange={(_, c) => setPreferOppositeGenders(c)}\r\n                    />\r\n                }\r\n                label={<Translate id=\"settings.configuration.playerSettings.pairOppositeGenders\" />}\r\n            />\r\n            <Typography className={classes.section} variant=\"subtitle2\">\r\n                <Translate id=\"settings.configuration.arrangements\" />\r\n            </Typography>\r\n            <Typography>\r\n                <Translate id=\"settings.configuration.arrangements.description\" />\r\n            </Typography>\r\n            <Grid container>\r\n                {players\r\n                    .filter(player => arrangements.findIndex(x => x.p2 === player.id) === -1)\r\n                    .map(player => {\r\n                        const arrangment = arrangements.find(x => x.p1 === player.id);\r\n                        const arrangedPlayerId = arrangment === undefined ? \"\" : arrangment.p2;\r\n                        return (\r\n                            <Grid\r\n                                item\r\n                                container\r\n                                alignItems=\"flex-end\"\r\n                                className={classes.arrangmentItem}\r\n                                key={player.id}\r\n                            >\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <Typography variant=\"subtitle1\">{player.name}</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <FormControl className={classes.arrangementSelect}>\r\n                                        <InputLabel htmlFor=\"player-selection\">\r\n                                            <Translate id=\"settings.configuration.arrangements.pairWith\" />\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            value={arrangedPlayerId}\r\n                                            onChange={ev => {\r\n                                                const value = ev.target.value;\r\n                                                if (value === \"\") {\r\n                                                    removePlayerArrangment(player.id);\r\n                                                } else {\r\n                                                    addPlayerArrangment({\r\n                                                        p1: player.id,\r\n                                                        p2: value,\r\n                                                    });\r\n                                                }\r\n                                            }}\r\n                                            input={<Input id=\"player-selection\" />}\r\n                                        >\r\n                                            <MenuItem value=\"\">\r\n                                                <em>\r\n                                                    <Translate id=\"settings.configuration.arrangements.none\" />\r\n                                                </em>\r\n                                            </MenuItem>\r\n                                            {players\r\n                                                .filter(\r\n                                                    x =>\r\n                                                        x.id !== player.id &&\r\n                                                        arrangements.findIndex(\r\n                                                            y =>\r\n                                                                (y.p1 === x.id || y.p2 === x.id) &&\r\n                                                                y.p1 !== player.id,\r\n                                                        ) === -1,\r\n                                                )\r\n                                                .map(x => (\r\n                                                    <MenuItem key={x.id} value={x.id}>\r\n                                                        {x.name}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withStyles(styles)(withLocalize(PlayerSettings)));\r\n","export const socialMediaPlatforms = [\"Snapchat\", \"Instagram\", \"Facebook\"];\r\n\r\nexport const defaultSources = [\r\n    \"cards/bullshitfact.xml\",\r\n    \"cards/ichundderalkohol.xml\",\r\n    \"cards/ConversationStartersWorld.NeverHaveIEver.xml\",\r\n    \"cards/Bevil.xml\",\r\n    \"cards/ConversationStartersWorld.TruthOrDareDare.xml\",\r\n    \"cards/ConversationStartersWorld.TruthOrDareTruth.xml\",\r\n    \"cards/ConversationStartersWorld.Wyr.xml\",\r\n    \"cards/common.xml\",\r\n    \"cards/Picolo/Picolo.xml\",\r\n    \"cards/Picolo/Picolo.Silly.xml\",\r\n];\r\n\r\nexport const slideWeights: { [key: string]: number } = {\r\n    FactSlide: 0.4,\r\n    DownSlide: 0.2,\r\n    NeverEverSlide: 0.5,\r\n    TruthOrDareSlide: 0.35,\r\n    WouldYouRatherSlide: 0.5,\r\n    DrinkSlide: 0.5,\r\n    VirusSlide: 0.25,\r\n    NoIdeaLosesSlide: 0.5,\r\n    GroupGameSlide: 0.4,\r\n    TaskSlide: 0.2,\r\n};\r\n\r\n// if a card has one of these tags and an arranged player is selected\r\n// the propability that their counterpart is selected is increased further\r\nexport const higherArrangementPropabilityTags = [\"sexual\"];\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport * as React from \"react\";\r\nimport { Typography, FormControl, Select, Input, MenuItem } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { setSocialMediaPlatform } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { socialMediaPlatforms } from \"../../../../preferences\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    platform: state.settings.socialMediaPlatform,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSocialMediaPlatform,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction ChangeLanguage({ platform, setSocialMediaPlatform }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.socialMediaPlatform\" />\r\n            </Typography>\r\n            <Typography gutterBottom>\r\n                <Translate id=\"settings.configuration.socialMediaPlatform.description\" />\r\n            </Typography>\r\n            <FormControl>\r\n                <Select style={{width: 200, marginTop: 10}}\r\n                    value={platform}\r\n                    onChange={ev => setSocialMediaPlatform(ev.target.value)}\r\n                    input={<Input />}\r\n                >\r\n                    {socialMediaPlatforms.map(x => (\r\n                        <MenuItem key={x} value={x}>\r\n                            {x}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(ChangeLanguage));\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface Props {\r\n    items: Weighted<string>[];\r\n    onChangeWeight: (item: Weighted<string>) => void;\r\n}\r\n\r\nclass ItemPreferences extends React.Component<Props> {\r\n    render() {\r\n        const { items, onChangeWeight } = this.props;\r\n\r\n        return (\r\n            <Grid container>\r\n                {items.map(x => (\r\n                    <Grid key={x.value} item container alignItems=\"center\">\r\n                        <Grid item xs={4} lg={3}>\r\n                            <Typography\r\n                                style={{\r\n                                    opacity: x.weight === 0 ? 0.5 : 1,\r\n                                }}\r\n                            >\r\n                                {x.value}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8} lg={9}>\r\n                            <Slider\r\n                                max={1}\r\n                                min={0}\r\n                                style={{ padding: \"20px 0\"}}\r\n                                step={0.05}\r\n                                value={x.weight}\r\n                                onChange={(_, v) => onChangeWeight({ value: x.value, weight: v })}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemPreferences;\r\n","export function percentageFixedTotal<T>(\r\n    values: T[],\r\n    getPercentage: (x: T) => number,\r\n    target: number,\r\n): Array<{ value: T; part: number }> {\r\n    // https://stackoverflow.com/a/13483486\r\n    const percentageValues = values.map(value => ({ value, percent: getPercentage(value) }));\r\n    const total = percentageValues.reduce((x, y) => x + y.percent, 0);\r\n\r\n    const result = new Array<{ value: T; part: number }>();\r\n    let sum = 0;\r\n    let prevBaseline = 0;\r\n\r\n    for (let i = 0; i < percentageValues.length; i++) {\r\n        const {value, percent} = percentageValues[i];\r\n\r\n        sum += percent / total * target;\r\n        const sumRounded = Math.round(sum);\r\n\r\n        result.push({ value, part: sumRounded - prevBaseline });\r\n        prevBaseline = sumRounded;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setSlideWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slides: state.settings.slides,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSlideWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SlidePreferences({ slides, setSlideWeight }: Props) {\r\n    const totalCards = 50;\r\n    const slidePercentages = percentageFixedTotal(slides, x => x.weight, totalCards);\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.slides\" />\r\n            </Typography>\r\n            <ItemPreferences items={slides} onChangeWeight={x => setSlideWeight(x)} />\r\n            <Typography>\r\n                <Translate\r\n                    id=\"settings.configuration.slidesProjection\"\r\n                    data={{ count: totalCards }}\r\n                />\r\n                {slidePercentages.map((x, i) => (\r\n                    <React.Fragment key={x.value.value}>\r\n                        <b style={{fontWeight: \"bolder\"}}>{x.value.value}</b>: {x.part}\r\n                        {i < slidePercentages.length - 1 ? \", \" : null}\r\n                    </React.Fragment>\r\n                ))}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(SlidePreferences));\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setTagWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tags: state.settings.tags,\r\n    decks: state.settings.sources,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setTagWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction TagPreferences({ tags, decks, setTagWeight }: Props) {\r\n    const allTags = _.uniq(decks.flatMap(x => x.tags));\r\n    const weights = allTags.map(x => tags.find(y => y.value === x) || { value: x, weight: 0.5 });\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.tags\" />\r\n            </Typography>\r\n            <ItemPreferences items={weights} onChangeWeight={x => setTagWeight(x)} />\r\n            {weights.length === 0 ? (\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    <Translate id=\"settings.configuration.tags.none\" />\r\n                </Typography>\r\n            ) : (\r\n                undefined\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(TagPreferences));\r\n","import * as React from \"react\";\r\nimport ChangeLanguage from \"./configuration/ChangeLanguage\";\r\nimport PlayerSettings from \"./configuration/PlayerSettings\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport SocialMediaPlatform from \"./configuration/SocialMediaPlatform\";\r\nimport SlidePreferences from \"./configuration/SlidePreferences\";\r\nimport TagsPerferences from \"./configuration/TagsPerferences\";\r\n\r\nclass Configuration extends React.Component {\r\n    render() {\r\n        return (\r\n            <Grid style={{ padding: 24 }}>\r\n                <Grid container spacing={32} direction=\"column\">\r\n                    <Grid item style={{ marginBottom: 20 }}>\r\n                        <ChangeLanguage />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <PlayerSettings />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SocialMediaPlatform />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SlidePreferences />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TagsPerferences />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configuration;\r\n","import * as React from \"react\";\r\nimport { AppBar, Tabs, Tab, Theme, Grid } from \"@material-ui/core\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/core/styles\";\r\nimport AddPlayerForm from \"./AddPlayerForm\";\r\nimport PlayerList from \"./PlayerList\";\r\nimport AddSourceForm from \"./AddSourceForm\";\r\nimport SourcesList from \"./SourcesList\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport Configuration from \"./Configuration\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LocalizeContextProps, WithStyles<typeof styles> {\r\n    theme: Theme;\r\n}\r\n\r\ninterface State {\r\n    value: number;\r\n}\r\n\r\nclass SettingsView extends React.Component<Props, State> {\r\n    readonly state = {\r\n        value: 0,\r\n    };\r\n\r\n    handleChange = (_event: any, value: number) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    handleChangeIndex = (index: number) => {\r\n        this.setState({ value: index });\r\n    };\r\n\r\n    render() {\r\n        const { theme, classes, translate } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={this.state.value}\r\n                        onChange={this.handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                    >\r\n                        <Tab label={translate(\"settings.players\")} />\r\n                        <Tab label={translate(\"settings.sources\")} />\r\n                        <Tab label={translate(\"settings.configuration\")} />\r\n                    </Tabs>\r\n                </AppBar>\r\n                <SwipeableViews\r\n                    axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                    index={this.state.value}\r\n                    ignoreNativeScroll={true}\r\n                    style={{ flexGrow: 1 }}\r\n                    containerStyle={{ height: \"100%\" }}\r\n                    onChangeIndex={this.handleChangeIndex}\r\n                >\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ marginTop: 24, marginLeft: 24, marginRight: 24 }}>\r\n                            <AddPlayerForm />\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                flexGrow: 1,\r\n                                height: 0,\r\n                                overflow: \"auto\",\r\n                                margin: \"24px 24px 0 24px\",\r\n                            }}\r\n                        >\r\n                            <PlayerList />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ marginTop: 24, marginLeft: 24, marginRight: 24 }}>\r\n                            <AddSourceForm />\r\n                        </div>\r\n                        <div style={{ flexGrow: 1, height: 0, overflow: \"auto\" }}>\r\n                            <SourcesList />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ flexGrow: 1, height: 0, overflowX: \"hidden\" }}>\r\n                            <Configuration />\r\n                        </div>\r\n                    </Grid>\r\n                </SwipeableViews>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLocalize(withStyles(styles, { withTheme: true })(SettingsView));\r\n","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        responsiveHeader: {\r\n            fontSize: \"4rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"2rem\",\r\n            },\r\n        },\r\n        responsiveSubTitle: {\r\n            fontSize: \"1.5rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1rem\",\r\n            },\r\n        },\r\n    });\r\n\r\nfunction DrinctetHeader({ classes }: WithStyles<typeof styles>) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\" className={classes.responsiveHeader}>\r\n                Drinctet\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.responsiveSubTitle}>\r\n                The goal is to drink that!\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(DrinctetHeader);\r\n","import { PlayerSelectionInsights } from './../../core/selection/insights';\r\nimport { createStandardAction, createAsyncAction } from \"typesafe-actions\";\r\nimport { FollowUpSlide, Translator } from 'GameModels';\r\nimport { History } from 'history';\r\nimport { SlideSelectionInsights } from '@core/selection/insights';\r\nimport { CardRef } from '@core/cards/card-ref';\r\n\r\nexport const startGame = createStandardAction(\"START_GAME\")<History>();\r\n\r\nexport const cancelGame = createStandardAction(\"CANCEL_GAME\")();\r\n\r\nexport const requestSlideAsync = createAsyncAction(\r\n    \"NEXT_SLIDE_REQUEST\",\r\n    \"NEXT_SLIDE_SUCCESS\",\r\n    \"NEXT_SLIDE_FAILURE\",\r\n)<Translator, {slide: string, insights: SlideSelectionInsights | null}, string>();\r\n\r\nexport const applyCard = createStandardAction(\"APPLY_CARD\")<CardRef>();\r\n\r\nexport const setSlideState = createStandardAction(\"SET_SLIDE_STATE\")<{state: any, insights: PlayerSelectionInsights | null}>();\r\n\r\nexport const enqueueFollowUp = createStandardAction(\"ADD_FOLLOW_UP\")<FollowUpSlide>();\r\nexport const activateFollowUp = createStandardAction(\"ACTIVATE_FOLLOW_UP\")<FollowUpSlide>();\r\n\r\nexport const setWillPowerLocked = createStandardAction(\"SET_WILL_POWER_LOCKED\")<boolean>();\r\nexport const setWillPower = createStandardAction(\"SET_WILL_POWER\")<number>();\r\nexport const addWillPowerMemory = createStandardAction(\"ADD_WILL_POWER_MEMORY\")<string[]>();\r\n","import { withStyles, WithStyles, createStyles } from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { startGame } from \"../../game/actions\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        color: \"white\",\r\n        width: \"100%\",\r\n        backgroundColor: \"#e74c3c\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#c0392b\",\r\n        },\r\n    },\r\n});\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    settings: state.settings,\r\n});\r\n\r\nconst dispatchProps = {\r\n    startGame,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps &\r\n    RouteComponentProps;\r\n\r\nfunction StartButton(props: Props) {\r\n    const { classes, startGame, settings, history } = props;\r\n\r\n    const arePlayersSelected = settings.players.length > 0;\r\n    const areSourcesAdded = settings.sources.filter(x => x.cards !== undefined).length > 0;\r\n    const areSourcesLoading = settings.sources.filter(x => x.isLoading).length > 0;\r\n\r\n    return (\r\n        <Fab\r\n            variant=\"extended\"\r\n            size=\"large\"\r\n            disabled={!arePlayersSelected || !areSourcesAdded || areSourcesLoading}\r\n            classes={{ root: classes.root }}\r\n            onClick={() => startGame(history)}\r\n        >\r\n            <Translate id=\"welcome.startGame\" />\r\n        </Fab>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withRouter\r\n)(StartButton) as React.ComponentType;\r\n","import { Grid, createStyles, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\nimport DrinctetHeader from \"./DrinctetHeader\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    header: {\r\n        margin: 20,\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ntype Props = WithStyles<typeof styles>;\r\n\r\ninterface State {\r\n    viewportHeight: number;\r\n}\r\n\r\nclass WelcomeView extends Component<Props, State> {\r\n    readonly state = {\r\n        viewportHeight: window.innerHeight,\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.updateHeight = this.updateHeight.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    updateHeight(): void {\r\n        this.setState({ viewportHeight: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { viewportHeight } = this.state;\r\n        return (\r\n            <div className={classes.root}>\r\n                {viewportHeight > 500 ? (\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12} md={6} className={classes.header}>\r\n                            <DrinctetHeader />\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : null}\r\n                <div style={{ flexGrow: 1, height: 0 }}>\r\n                    <Grid container justify=\"center\" style={{ height: \"100%\" }}>\r\n                        <Grid item xs={12} md={6}>\r\n                            <SettingsView />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Grid container justify=\"center\">\r\n                    <Grid item xs={12} md={6} container justify=\"center\">\r\n                        <Grid item xs={10} lg={8} style={{ padding: \"10px 20px 20px 20px\" }}>\r\n                            <StartButton />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(WelcomeView);\r\n","import {\r\n    createStyles,\r\n    IconButton,\r\n    ListItemIcon,\r\n    Menu,\r\n    MenuItem,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport FeedbackIcon from \"@material-ui/icons/Feedback\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component, ComponentType } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\n\r\nconst styles = createStyles({\r\n    button: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles> &\r\n    RouterProps;\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n    activeFollowUp: state.game.activeFollowUp,\r\n    selectedCard: state.game.selectedCard,\r\n});\r\n\r\nconst dispatchProps = {};\r\n\r\ninterface State {\r\n    anchorEl: HTMLElement | null;\r\n}\r\n\r\nclass GameOptions extends Component<Props, State> {\r\n    readonly state: State = {\r\n        anchorEl: null,\r\n    };\r\n\r\n    handleMenuOpenClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    handleNavigate = (path: string) => {\r\n        this.handleClose();\r\n        this.props.history.push(`/game/${path}`);\r\n    };\r\n\r\n    render() {\r\n        const { classes, selectedCard } = this.props;\r\n        const { anchorEl } = this.state;\r\n        const isOpen = anchorEl !== null;\r\n\r\n        return (\r\n            <div>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={this.handleMenuOpenClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={isOpen}\r\n                    onClose={this.handleClose}\r\n                    PaperProps={{\r\n                        style: {\r\n                            width: 200,\r\n                        },\r\n                    }}\r\n                >\r\n                    <MenuItem\r\n                        onClick={() => this.handleNavigate(\"settings\")}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SettingsIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.settings\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => this.handleNavigate(\"insights\")}>\r\n                        <ListItemIcon>\r\n                            <DonutLargeIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.insights\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.handleClose} disabled={selectedCard === null}>\r\n                        <ListItemIcon>\r\n                            <FeedbackIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.reportCard\" />\r\n                    </MenuItem>\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    withLocalize,\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withRouter,\r\n)(GameOptions) as ComponentType;\r\n","import { AppBar, Button, createStyles, Slide, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogPaper: {\r\n        height: \"80vh\"\r\n    },\r\n    fullscreenPaper: {\r\n        height: \"100vh\"\r\n    }\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction SettingsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n                classes={{paperScrollPaper: classes.dialogPaper, paperFullScreen: classes.fullscreenPaper}}\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.settings\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <SettingsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(SettingsDialog) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slide: state.game.selectedSlide,\r\n    slideInsights: state.game.slideInsights,\r\n    playerInsights: state.game.playerInsights,\r\n    players: state.settings.players,\r\n    cardRef: state.game.selectedCard,\r\n});\r\n\r\nconst styles = createStyles({\r\n    section: {\r\n        marginTop: 10,\r\n    },\r\n    scrollableTable: {\r\n        overflow: \"auto\",\r\n        width: \"100%\",\r\n    },\r\n    tableCellNoBreak: {\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles>;\r\n\r\nfunction renderPredefinedPlayers({ playerInsights, players }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography>\r\n                <Translate id=\"insights.predefinedPlayers\" />\r\n                {\": \"}\r\n                {playerInsights!.predefined\r\n                    .map(x => players.find(y => y.id === x))\r\n                    .filter(x => x != null)\r\n                    .map(x => x!.name)\r\n                    .join(\", \")}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderPlayerInsights(props: Props) {\r\n    const { playerInsights, players, classes } = props;\r\n    return (\r\n        <div className={classes.scrollableTable}>\r\n            {playerInsights!.predefined.length > 0 ? renderPredefinedPlayers(props) : null}\r\n            {playerInsights!.rounds.map((x, i) => {\r\n                const statistics = percentageFixedTotal(x, x => x.weight, 1000);\r\n                return (\r\n                    <table key={i}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className={classes.tableCellNoBreak}>\r\n                                    <Typography>\r\n                                        <Translate id=\"insights.player\" data={{ number: i + 1 }} />:\r\n                                    </Typography>\r\n                                </td>\r\n                                {statistics.map(y => {\r\n                                    const player = players.find(p => p.id === y.value.playerId);\r\n                                    let element: JSX.Element;\r\n                                    if (player === undefined) {\r\n                                        element = (\r\n                                            <span>\r\n                                                <i>\r\n                                                    <Translate id=\"insights.playerRemoved\" />\r\n                                                </i>{\" \"}\r\n                                                ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    } else {\r\n                                        element = (\r\n                                            <span>\r\n                                                {player.name} ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <td key={y.value.playerId} style={{ paddingLeft: 10 }}>\r\n                                            <Typography>\r\n                                                {conditionalBold(element, y.value.chosen)}\r\n                                            </Typography>\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction conditionalBold(element: JSX.Element, isBold: boolean): JSX.Element {\r\n    if (isBold) {\r\n        return <b>{element}</b>;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nfunction renderSlideWeights({ slide, slideInsights }: Props) {\r\n    const slides = slideInsights!.weights;\r\n    const statistics = percentageFixedTotal(slides, x => x.weight, 1000);\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {statistics.map(x => (\r\n                    <tr key={x.value.value}>\r\n                        <td>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.value.value}</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                        <td style={{ paddingLeft: 10 }}>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.part / 10}%</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nclass InsightsCurrentSlide extends Component<Props> {\r\n    render() {\r\n        const { playerInsights, classes, cardRef } = this.props;\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.currentSlide\" />\r\n                </Typography>\r\n                <Typography>\r\n                    <Translate id=\"insights.currentCard\" />\r\n                    {\": \"}\r\n                    {cardRef === null ? (\r\n                        <i>\r\n                            <Translate id=\"insights.noCard\" />\r\n                        </i>\r\n                    ) : (\r\n                        <span>\r\n                            <Translate\r\n                                id=\"insights.cardInfo\"\r\n                                data={{\r\n                                    name: cardRef.card.type,\r\n                                    id: cardRef.card.id,\r\n                                    wp: cardRef.card.willPower === undefined ? <Translate id=\"insights.universal\"/> : cardRef.card.willPower,\r\n                                    url: cardRef.deckUrl\r\n                                }}\r\n                            />\r\n                        </span>\r\n                    )}\r\n                </Typography>\r\n                {renderSlideWeights(this.props)}\r\n\r\n                <Typography variant=\"h6\" className={classes.section}>\r\n                    <Translate id=\"insights.playerSelection\" />\r\n                </Typography>\r\n                {playerInsights === null ? (\r\n                    <Typography>\r\n                        <i>\r\n                            <Translate id=\"insights.noPlayers\" />\r\n                        </i>\r\n                    </Typography>\r\n                ) : (\r\n                    renderPlayerInsights(this.props)\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsCurrentSlide) as React.ComponentType;\r\n","import { createStyles, FormControlLabel, FormGroup, Switch, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { setWillPower, setWillPowerLocked } from \"../actions\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n    isLocked: state.game.isWillPowerLocked,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n};\r\n\r\nconst styles = \r\n    createStyles({\r\n        toggleContainer: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & WithStyles<typeof styles>;\r\n\r\nfunction InsightsWillPowerView({\r\n    currentWillPower,\r\n    isLocked,\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n    classes,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                <Translate id=\"insights.willPower\" />\r\n            </Typography>\r\n            <div className={classes.toggleContainer}>\r\n                <ToggleButtonGroup\r\n                    exclusive\r\n                    value={currentWillPower}\r\n                    onChange={(_, y) => setWillPower(y)}\r\n                    children={[1, 2, 3, 4, 5].map(x => (\r\n                        <ToggleButton key={x} value={x}>\r\n                            {x}\r\n                        </ToggleButton>\r\n                    ))}\r\n                />\r\n            </div>\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch checked={isLocked} onChange={(_, x) => setWillPowerLocked(x)} />\r\n                    }\r\n                    label={<Translate id=\"insights.lockWillPower\" />}\r\n                />\r\n            </FormGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsWillPowerView) as React.ComponentType;\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { CardDeck } from \"@core/card-deck\";\r\n\r\nexport class Insights {\r\n    public playerSelection: PlayerSelectionInsights | null = null;\r\n    public slideWeights: SlideSelectionInsights | null  = null;\r\n}\r\n\r\nexport interface PlayerSelectionInsights {\r\n    predefined: string[];\r\n    rounds: Array<PlayerSelection[]>;\r\n}\r\n\r\nexport interface SlideSelectionInsights {\r\n    weights: Weighted<string>[];\r\n}\r\n\r\nexport interface PlayerSelection {\r\n    chosen: boolean;\r\n    weight: number;\r\n    playerId: string;\r\n}\r\n\r\nexport interface CardsInsight {\r\n    decks: Weighted<CardDeck>[];\r\n    willPower: Weighted<{willPower: number | null, count: number}>[];\r\n    totalCards: number;\r\n}\r\n","import { Weighted } from \"./../weighted\";\r\n\r\nexport type RNG = () => number;\r\nconst defaultRandomGenerator: RNG = () => Math.random();\r\n\r\nexport function selectRandomWeighted<T>(\r\n    items: T[],\r\n    getWeight: (item: T) => number,\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    if (items.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const weights: Array<{ item: T; weight: number }> = [];\r\n    let totalWeight: number = 0;\r\n    for (const item of items) {\r\n        const weight = getWeight(item);\r\n        weights.push({ item, weight });\r\n\r\n        totalWeight += weight;\r\n    }\r\n\r\n    let randomWeight = totalWeight * random();\r\n    for (const { item, weight } of weights) {\r\n        if (weight === 0) {\r\n            continue;\r\n        }\r\n        randomWeight -= weight;\r\n\r\n        if (randomWeight <= 0) {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function selectRandomFromWeightedList<T>(\r\n    items: Weighted<T>[],\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    const result = selectRandomWeighted(items, item => item.weight, random);\r\n    if (result === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    return result.value;\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { Weighted } from \"@core/weighted\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { SelectionAlgorithm } from \"./selection-algorithm\";\r\nimport { RNG, selectRandomFromWeightedList, selectRandomWeighted } from \"./utils\";\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport abstract class SelectionAlgorithmBase implements SelectionAlgorithm {\r\n    protected readonly random: RNG;\r\n\r\n    constructor(protected readonly status: GameStatus, random: RNG) {\r\n        this.random = random;\r\n    }\r\n\r\n    public abstract selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[];\r\n    public abstract selectNextSlide(availableSlides: SlideRegistration[]): string | undefined;\r\n    public abstract selectCard(cardType: string): CardRef;\r\n    public abstract getSips(min: number): number;\r\n    public abstract recomputeWillPower(memory: string[]): { willPower: number; memory: string[] };\r\n\r\n    public getRandom(): number {\r\n        return this.random();\r\n    }\r\n\r\n    public selectRandomWeighted<T>(items: T[], getWeight: (item: T) => number): T | undefined {\r\n        return selectRandomWeighted(items, getWeight, () => this.random());\r\n    }\r\n\r\n    protected selectRandomFromWeightedList<T>(items: Weighted<T>[]): T | undefined {\r\n        return selectRandomFromWeightedList(items, () => this.random());\r\n    }\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport _ from \"lodash\";\r\nimport { higherArrangementPropabilityTags } from \"../../preferences\";\r\nimport { CardDeck } from \"../card-deck\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { Gender, PlayerInfo } from \"../player-info\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { Weighted } from \"../weighted\";\r\nimport { CardsInsight, Insights, PlayerSelection, PlayerSelectionInsights } from \"./insights\";\r\nimport { SelectionAlgorithmBase } from \"./selection-algorithm-base\";\r\n\r\nexport class MelinaAlgorithm extends SelectionAlgorithmBase {\r\n    /** the percentage of cards that were played from one deck once the cards get weighted much lower */\r\n    private readonly deckExhaustionLimit = 0.1;\r\n\r\n    public readonly insights: Insights = new Insights();\r\n\r\n    public getAllCardDeckStatistics(cardType: string | null = null): CardsInsight {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n        const deckWeights: { [deckUrl: string]: number } = {};\r\n        const willPowerWeights: { [willPower: number]: number } = {};\r\n        const willPowerCounter: { [willPower: number]: number } = {};\r\n\r\n        const allCards = new Array<Weighted<CardRef>>();\r\n        for (const deck of weightedDecks) {\r\n            allCards.push(\r\n                ...deck.cards.map(x => ({\r\n                    value: { card: x.value, deckUrl: deck.deck.url },\r\n                    weight: x.weight * deck.deck.weight,\r\n                })),\r\n            );\r\n        }\r\n\r\n        this.boostWillPower(allCards);\r\n\r\n        for (const deck of this.status.decks) {\r\n            deckWeights[deck.url] = 0;\r\n        }\r\n\r\n        for (const card of allCards) {\r\n            const { value, weight } = card;\r\n\r\n            const deck = this.status.decks.find(x => x.url === value.deckUrl)!;\r\n\r\n            deckWeights[value.deckUrl] += weight * deck.weight;\r\n\r\n            const willPower = value.card.willPower || 0;\r\n            if (willPowerCounter[willPower] === undefined) {\r\n                willPowerWeights[willPower] = 0;\r\n                willPowerCounter[willPower] = 0;\r\n            }\r\n\r\n            willPowerWeights[willPower] += weight * deck.weight;\r\n            willPowerCounter[willPower] += 1;\r\n        }\r\n        \r\n        const willPowerWeightsArray: Weighted<{\r\n            willPower: number | null;\r\n            count: number;\r\n        }>[] = Object.keys(willPowerWeights).map(propName => {\r\n            const willPower = Number(propName);\r\n            return ({\r\n                value: {\r\n                    willPower: willPower === 0 ? null : willPower,\r\n                    count: willPowerCounter[willPower],\r\n                },\r\n                weight: willPowerWeights[willPower],\r\n            });\r\n        });\r\n\r\n        const decksArray = Object.keys(deckWeights).map(url => {\r\n            const deck = this.status.decks.find(x => x.url === url)!;\r\n            return { value: deck, weight: deckWeights[url] * deck.weight };\r\n        });\r\n\r\n        return { decks: decksArray, willPower: willPowerWeightsArray, totalCards: allCards.length };\r\n    }\r\n\r\n    public selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[] {\r\n        if (playerSettings.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (playerSettings.length > this.status.players.length) {\r\n            throw new Error(\"More players were requested than available.\");\r\n        }\r\n\r\n        const forArrangement = new Array<string>();\r\n        const result: (PlayerInfo | null)[] = playerSettings.map((_, i) =>\r\n            definedPlayers.length > i ? definedPlayers[i] : null,\r\n        );\r\n\r\n        for (const player of definedPlayers.filter(x => x !== null).map(x => x!)) {\r\n            const arrangement = this.status.arrangements.find(\r\n                x => x.p1 === player.id || x.p2 === player.id,\r\n            );\r\n\r\n            if (arrangement !== undefined) {\r\n                if (arrangement.p1 === player.id) {\r\n                    forArrangement.push(arrangement.p2);\r\n                } else {\r\n                    forArrangement.push(arrangement.p1);\r\n                }\r\n            }\r\n        }\r\n\r\n        let resultCounter = 0;\r\n        const insights: PlayerSelectionInsights = {\r\n            predefined: definedPlayers.filter(x => x != null).map(x => x!.id),\r\n            rounds: [],\r\n        };\r\n\r\n        while (result.findIndex(x => x === null) !== -1) {\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                if (result[i] !== null) {\r\n                    continue;\r\n                }\r\n\r\n                const gender = playerSettings[i];\r\n                let sourceList: PlayerInfo[];\r\n\r\n                switch (gender) {\r\n                    case \"None\":\r\n                        sourceList = this.status.players;\r\n                        break;\r\n                    case \"Male\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Male\");\r\n                        break;\r\n                    case \"Female\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Female\");\r\n                        break;\r\n                    default:\r\n                        continue;\r\n                }\r\n\r\n                const source = sourceList.filter(x => !_.includes(result, x));\r\n                const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n                const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n\r\n                const selectionRoundInsights = new Array<PlayerSelection>();\r\n                const player = this.selectRandomWeighted(source, p => {\r\n                    let weight = 1;\r\n\r\n                    if (_.some(forArrangement, x => x === p.id)) {\r\n                        if (\r\n                            _.some(higherArrangementPropabilityTags, x =>\r\n                                _.some(tags, y => x === y.toLowerCase()),\r\n                            )\r\n                        ) {\r\n                            weight += source.length;\r\n                        } else {\r\n                            // everyone has ~ the weight 1\r\n                            weight += source.length * 0.5;\r\n                        }\r\n                    }\r\n\r\n                    if (gender === \"None\" && this.status.preferOppositeGenders) {\r\n                        if (malesCount > femalesCount) {\r\n                            if (p.gender === \"Female\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        } else if (femalesCount > malesCount) {\r\n                            if (p.gender === \"Male\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    selectionRoundInsights.push({ playerId: p.id, weight, chosen: false });\r\n                    return weight;\r\n                })!;\r\n\r\n                selectionRoundInsights.find(x => x.playerId === player.id)!.chosen = true;\r\n                insights.rounds.push(selectionRoundInsights);\r\n\r\n                result[i] = player;\r\n                resultCounter++;\r\n\r\n                const arrangement = this.status.arrangements.find(\r\n                    x => x.p1 === player.id || x.p2 === player.id,\r\n                );\r\n                if (arrangement !== undefined) {\r\n                    if (arrangement.p1 === player.id) {\r\n                        forArrangement.push(arrangement.p2);\r\n                    } else {\r\n                        forArrangement.push(arrangement.p1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (resultCounter === result.length) {\r\n                break;\r\n            }\r\n\r\n            // here we have to handle Same/Opposite genders\r\n\r\n            const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n            const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n            let dominant: Gender | null = null;\r\n\r\n            if (malesCount > femalesCount) dominant = \"Male\";\r\n            else if (femalesCount > malesCount) dominant = \"Female\";\r\n\r\n            if (dominant === null) {\r\n                // we try to change a 'Same' gender, so Same and opposite stay on different sites\r\n                // because the player gender will become dominant and opposite is always against dominant\r\n\r\n                let changed = false;\r\n                for (let i = 0; i < playerSettings.length; i++) {\r\n                    if (playerSettings[i] === \"Same\") {\r\n                        playerSettings[i] = \"None\";\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!changed) {\r\n                    // we have the problem here that we only have opposite genders left but we have no dominant gender.\r\n                    // We change the first opposite to none (so it gets filled) and all other to Same, so they will get\r\n                    // the same gender like the first item that was changed to Same\r\n\r\n                    for (let i = 0; i < playerSettings.length; i++) {\r\n                        if (playerSettings[i] === \"Opposite\") {\r\n                            if (!changed) {\r\n                                playerSettings[i] = \"None\";\r\n                                changed = true;\r\n                            } else {\r\n                                playerSettings[i] = \"Same\";\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                const gender = playerSettings[i];\r\n\r\n                switch (gender) {\r\n                    case \"Opposite\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Male\";\r\n                        } else {\r\n                            playerSettings[i] = \"Female\";\r\n                        }\r\n                        break;\r\n                    case \"Same\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Female\";\r\n                        } else {\r\n                            playerSettings[i] = \"Male\";\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.insights.playerSelection = insights;\r\n        return result.map(x => x!);\r\n    }\r\n\r\n    public selectCard(cardType: string): CardRef {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n\r\n        const allCards = new Array<Weighted<CardRef>>();\r\n        for (const deck of weightedDecks) {\r\n            allCards.push(\r\n                ...deck.cards.map(x => ({\r\n                    value: { card: x.value, deckUrl: deck.deck.url },\r\n                    weight: x.weight * deck.deck.weight,\r\n                })),\r\n            );\r\n        }\r\n\r\n        this.boostWillPower(allCards);\r\n\r\n        for (const card of allCards) {\r\n            const deck = this.status.decks.find(x => x.url === card.value.deckUrl)!;\r\n            card.weight *= deck.weight;\r\n        }\r\n\r\n        const selected = this.selectRandomWeighted(allCards, x => x.weight);\r\n        if (selected === undefined) {\r\n            throw new Error(\"That should not actually happen\");\r\n        }\r\n\r\n        return selected.value;\r\n    }\r\n\r\n    private boostWillPower(cards: Weighted<CardRef>[]): void {\r\n        const willPower = this.status.willPower;\r\n\r\n        const perfectCards = cards.filter(\r\n            x => x.value.card.willPower === willPower || x.value.card.willPower === willPower - 1,\r\n        );\r\n        const unplayedCards = perfectCards.filter(\r\n            x =>\r\n                this.status.cardsHistory.findIndex(\r\n                    y => y.deckUrl === x.value.deckUrl && y.card.id === x.value.card.id,\r\n                ) === -1,\r\n        );\r\n\r\n        // played cards / all cards\r\n        const percentage = (perfectCards.length - unplayedCards.length) / perfectCards.length;\r\n\r\n        // console.log(\r\n        //     `wp: ${willPower}, perfect: ${perfectCards.length}, unplayed: ${\r\n        //         unplayedCards.length\r\n        //     }, percentage: ${percentage}`,\r\n        // );\r\n\r\n        // we don't boost if we already played 10% (deckExhaustionLimit) of the cards\r\n        if (this.deckExhaustionLimit > percentage && unplayedCards.length > 50) {\r\n            const totalWeight = cards.reduce((x, y) => x + y.weight, 0);\r\n            const unplayedWeight = unplayedCards.reduce((x, y) => x + y.weight, 0);\r\n\r\n            console.log(`total: ${totalWeight}, unplayed: ${unplayedWeight}`);\r\n\r\n            const targetPercentage = 0.7;\r\n            if (totalWeight * targetPercentage > unplayedWeight) {\r\n                const factor =\r\n                    totalWeight * targetPercentage -\r\n                    unplayedWeight +\r\n                    unplayedWeight / unplayedWeight;\r\n\r\n                // const diff = (totalWeight * targetPercentage - unplayedWeight);\r\n                // const add = diff / unplayedCards.length;\r\n                console.log(\"factor: \" + factor);\r\n\r\n                // const add = (totalWeight - unplayedWeight) / perfectCards.length;\r\n                for (const perfectCard of unplayedCards) {\r\n                    perfectCard.weight = perfectCard.weight * factor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public selectNextSlide(availableSlides: SlideRegistration[]): string | undefined {\r\n        const uniqueCardTypes: string[] = [];\r\n        for (const slide of availableSlides) {\r\n            for (const cardType of slide.requestedCards) {\r\n                if (uniqueCardTypes.findIndex(x => x === cardType) === -1) {\r\n                    uniqueCardTypes.push(cardType);\r\n                }\r\n            }\r\n        }\r\n\r\n        const cardTypeRatings: { [type: string]: number } = {};\r\n        for (const cardType of uniqueCardTypes) {\r\n            const weightedDecks = this.weightCards(\r\n                this.status.decks.filter(x => x.weight !== 0),\r\n                cardType,\r\n            );\r\n\r\n            const allCards: Array<Weighted<Card>> = [];\r\n            for (const cardDeck of weightedDecks) {\r\n                allCards.push(...cardDeck.cards);\r\n            }\r\n\r\n            if (allCards.length === 0) {\r\n                cardTypeRatings[cardType] = 0;\r\n            } else {\r\n                cardTypeRatings[cardType] =\r\n                    0.75 + (0.25 * allCards.reduce((x, y) => x + y.weight, 0)) / allCards.length;\r\n            }\r\n        }\r\n\r\n        const weightedSlides: Array<Weighted<SlideRegistration>> = [];\r\n        for (const slide of availableSlides) {\r\n            const slideSettings = this.status.slides.find(x => x.value === slide.slideType);\r\n\r\n            if (slideSettings === undefined || slideSettings.weight === 0) {\r\n                continue;\r\n            }\r\n\r\n            let factor = 1;\r\n            for (const cardType of slide.requestedCards) {\r\n                factor = Math.min(cardTypeRatings[cardType], factor);\r\n            }\r\n\r\n            weightedSlides.push({ weight: factor * slideSettings.weight, value: slide });\r\n        }\r\n\r\n        if (weightedSlides.length > 2 && this.status.slidesHistory.length > 0) {\r\n            const lastSlideType = this.status.slidesHistory[0];\r\n            const lastSlide = weightedSlides.find(x => x.value.slideType === lastSlideType);\r\n            if (lastSlide !== undefined) {\r\n                lastSlide.weight = 0;\r\n            }\r\n        }\r\n        \r\n        this.insights.slideWeights = {\r\n            weights: weightedSlides.map(x => ({ weight: x.weight, value: x.value.slideType })),\r\n        };\r\n\r\n        const selected = this.selectRandomWeighted(weightedSlides, slide => slide.weight);\r\n        if (selected === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return selected.value.slideType;\r\n    }\r\n\r\n    public getSips(min: number): number {\r\n        min = Math.max(min, 1);\r\n\r\n        return Math.max(min,  Math.floor(this.getRandom() * 4) + 1);\r\n    }\r\n\r\n    protected weightCards(\r\n        decks: CardDeck[],\r\n        type: string | null,\r\n    ): Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> {\r\n        const filtered: CardDeck[] = decks.map(x => ({\r\n            cards: x.cards.filter(card => {\r\n                if (type !== null && card.type !== type) {\r\n                    return false;\r\n                }\r\n                return (\r\n                    card.tags.length === 0 ||\r\n                    card.tags.findIndex(x => {\r\n                        const weightedTag = this.status.tags.find(y => y.value === x);\r\n                        return weightedTag !== undefined && weightedTag.weight === 0;\r\n                    }) === -1\r\n                );\r\n            }),\r\n            url: x.url,\r\n            weight: x.weight,\r\n        }));\r\n\r\n        // cards are now of the correct type and playable\r\n\r\n        const totalCards = filtered.reduce((x, y) => x + y.cards.length, 0);\r\n\r\n        // every card should be rated by x when 0 < x <= 1\r\n        const result: Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> = [];\r\n\r\n        const willPower = this.status.willPower;\r\n\r\n        for (const deck of filtered) {\r\n            // cards from this deck that were already played\r\n            const cardsPlayed = this.status.cardsHistory.filter(x => x.deckUrl === deck.url);\r\n\r\n            // compute the deck exhaustion factor\r\n            let exhaustionFactor: number;\r\n\r\n            const percentage = cardsPlayed.length / deck.cards.length;\r\n            if (percentage > this.deckExhaustionLimit) {\r\n                // cubic reduction\r\n                exhaustionFactor = Math.pow(Math.max(1.1 - percentage, 0.1), 2) * 0.5;\r\n            } else {\r\n                exhaustionFactor = 1;\r\n            }\r\n\r\n            const weightedCards: Array<Weighted<Card>> = [];\r\n            for (const card of deck.cards) {\r\n                const willPowerRating = this.rateWillPower(card.willPower, willPower);\r\n                const historyFactor = this.getHistoryFactor(card.id, cardsPlayed, totalCards);\r\n                const tagsFactor = this.getTagsFactor(card.tags, this.status.tags);\r\n                const weight = exhaustionFactor * willPowerRating * historyFactor * tagsFactor;\r\n                if (weight === 0) {\r\n                    continue;\r\n                }\r\n\r\n                weightedCards.push({\r\n                    value: card,\r\n                    weight: weight,\r\n                });\r\n            }\r\n\r\n            result.push({ deck, cards: weightedCards });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public recomputeWillPower(memory: string[]): { willPower: number; memory: string[] } {\r\n        const addedMemory = new Array<string>();\r\n        const now = new Date();\r\n        let result = this.status.willPower;\r\n\r\n        if (!_.includes(memory, \"AFTER_10\") && (now.getHours() > 22 || now.getHours() < 8)) {\r\n            result++;\r\n            addedMemory.push(\"AFTER_10\");\r\n        }\r\n\r\n        const slidesCount = this.status.slidesHistory.length;\r\n        if (slidesCount % 12 === 0 && slidesCount !== 0) {\r\n            const id = slidesCount / 12;\r\n            if (!_.includes(memory, `SLIDES_${id}`)) {\r\n                result++;\r\n                addedMemory.push(`SLIDES_${id}`);\r\n            }\r\n        }\r\n\r\n        if (result > 5) {\r\n            result = 5;\r\n        }\r\n\r\n        return { willPower: result, memory: addedMemory };\r\n    }\r\n\r\n    protected getTagsFactor(tags: string[], tagWeights: Array<Weighted<string>>) {\r\n        const weights = tags\r\n            .map(x => tagWeights.find(y => y.value === x))\r\n            .filter(x => x !== undefined)\r\n            .map(x => x!.weight);\r\n        if (weights.length > 0) {\r\n            return Math.min(...weights);\r\n        }\r\n        return 0.5;\r\n    }\r\n\r\n    /** return a value between 0 and 1 that returns 1 if the card was never played and a smaller number if the card was played recently */\r\n    protected getHistoryFactor(id: string, history: CardRef[], totalCards: number) {\r\n        const historyPosition = history.findIndex(x => x.card.id === id);\r\n        if (historyPosition === -1) {\r\n            return 1;\r\n        }\r\n\r\n        if (historyPosition > totalCards) {\r\n            return 0;\r\n        }\r\n\r\n        return historyPosition / totalCards;\r\n    }\r\n\r\n    /** return a value between 0 and 1 for the given will power */\r\n    protected rateWillPower(cardWillPower: number | undefined, willPower: number) {\r\n        if (cardWillPower === undefined) {\r\n            return 0.75;\r\n        }\r\n\r\n        // --- --- --- ||| --- --- --- ---\r\n        // 0.5 .75 .75  1  .25 .15 .05 .05\r\n\r\n        if (cardWillPower === willPower) {\r\n            return 1;\r\n        }\r\n\r\n        if (cardWillPower > willPower) {\r\n            const result = 0.35 - (cardWillPower - willPower) * 0.1;\r\n            return result < 0 ? 0 : result;\r\n        }\r\n\r\n        return 0.5;\r\n    }\r\n\r\n    protected filterDecks(decks: CardDeck[]): CardDeck[] {\r\n        const filteredDecks: CardDeck[] = [];\r\n\r\n        for (const deck of decks) {\r\n            // remove disabled decks\r\n            if (deck.weight <= 0) {\r\n                continue;\r\n            }\r\n\r\n            const cards: Card[] = [];\r\n            for (const card of deck.cards) {\r\n                if (!this.verifyPlayerSpecification(this.status.players, card.players)) {\r\n                    continue;\r\n                }\r\n\r\n                let weightedZero = false;\r\n                for (const tag of card.tags) {\r\n                    if (this.checkIfWeightedZero(tag, this.status.tags)) {\r\n                        weightedZero = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (weightedZero) {\r\n                    continue;\r\n                }\r\n\r\n                if (!card.condition(this.status)) {\r\n                    continue;\r\n                }\r\n\r\n                cards.push(card);\r\n            }\r\n\r\n            if (cards.length > 0) {\r\n                filteredDecks.push({ cards, weight: deck.weight, url: deck.url });\r\n            }\r\n        }\r\n\r\n        return filteredDecks;\r\n    }\r\n\r\n    protected checkIfWeightedZero<T>(value: T, weights: Array<Weighted<T>>): boolean {\r\n        return weights.findIndex(x => x.value === value && x.weight <= 0) > -1;\r\n    }\r\n\r\n    protected verifyPlayerSpecification(\r\n        players: PlayerInfo[],\r\n        specification: PlayerSetting[],\r\n    ): boolean {\r\n        if (specification.length > players.length) {\r\n            return false;\r\n        }\r\n\r\n        const specificationMales = specification.filter(x => x.gender === \"Male\").length;\r\n        const actualMales = players.filter(x => x.gender === \"Male\").length;\r\n\r\n        if (specificationMales > actualMales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationFemales = specification.filter(x => x.gender === \"Female\").length;\r\n        const actualFemales = players.filter(x => x.gender === \"Female\").length;\r\n        if (specificationFemales > actualFemales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationOpposite = specification.filter(x => x.gender === \"Opposite\").length;\r\n        if (specificationOpposite > Math.min(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        const specificationSame = specification.filter(x => x.gender === \"Same\").length;\r\n        if (specificationSame + 1 > Math.max(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Card } from \"./cards/card\";\r\nimport { CardParserFactory } from \"./parsing/card-parser-factory\";\r\n\r\nexport class CardsLoader {\r\n    private readonly domParser = new DOMParser();\r\n\r\n    constructor(\r\n        private requestFile: (url: string) => Promise<string>,\r\n        private parserFactory: CardParserFactory,\r\n    ) {}\r\n\r\n    public async loadFromUrl(url: string): Promise<Card[]> {\r\n        const result: Card[] = [];\r\n\r\n        await this.loadFile(url, result, undefined);\r\n        return result;\r\n    }\r\n\r\n    private async loadFile(url: string, result: Card[], requestedCards?: string[]): Promise<void> {\r\n        const xml = await this.requestFile(url);\r\n        \r\n        // the DOMParser doesn't like XML docs without a Root element\r\n        const xmlDoc = this.domParser.parseFromString(\"<Root>\" + xml + \"</Root>\", \"text/xml\");\r\n\r\n        const cardElements = xmlDoc.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < cardElements.length; i++) {\r\n            const xmlElement = cardElements[i];\r\n\r\n            if (xmlElement.parentElement !== xmlDoc.documentElement) {\r\n                continue;\r\n            }\r\n\r\n            if (xmlElement.nodeName === \"DeckReference\") {\r\n                await this.parseDeckReference(xmlElement, result, requestedCards);\r\n                continue;\r\n            }\r\n\r\n            const parser = this.parserFactory.createParser(xmlElement.nodeName);\r\n            if (parser === undefined) {\r\n                console.error(\r\n                    `The card ${xmlElement.nodeName} could not be parsed. No parser found.`,\r\n                );\r\n                continue;\r\n            }\r\n\r\n            const card = parser.deserialize(xmlElement);\r\n            if (requestedCards !== undefined && requestedCards.indexOf(card.id) === -1) {\r\n                continue;\r\n            }\r\n\r\n            result.push(card);\r\n        }\r\n    }\r\n\r\n    private parseDeckReference(\r\n        xmlElement: Element,\r\n        result: Card[],\r\n        requestedCards?: string[],\r\n    ): Promise<void> {\r\n        const url = xmlElement.getAttribute(\"url\");\r\n        if (url === null) {\r\n            throw new Error(\"The url on a deck reference must not be null.\");\r\n        }\r\n\r\n        const referenceRequests: string[] = [];\r\n\r\n        const cardRefs = xmlElement.getElementsByTagName(\"CardRef\");\r\n        for (let i = 0; i < cardRefs.length; i++) {\r\n            const cardRef = cardRefs[i];\r\n\r\n            const idAttr = cardRef.getAttribute(\"id\");\r\n            if (idAttr === null) {\r\n                continue;\r\n            }\r\n\r\n            referenceRequests.push(idAttr);\r\n        }\r\n\r\n        let deckWhitelist: string[] | undefined;\r\n        if (referenceRequests.length === 0) {\r\n            deckWhitelist = requestedCards;\r\n        } else {\r\n            if (requestedCards !== undefined) {\r\n                deckWhitelist = [];\r\n\r\n                // only request cards that are in the superior list aswell as in the reference list\r\n                for (const cardId of requestedCards) {\r\n                    if (referenceRequests.indexOf(cardId) > -1) {\r\n                        deckWhitelist.push(cardId);\r\n                    }\r\n                }\r\n            } else {\r\n                deckWhitelist = referenceRequests;\r\n            }\r\n        }\r\n\r\n        return this.loadFile(url, result, deckWhitelist);\r\n    }\r\n}\r\n","export class PlayerSetting {\r\n    constructor(public playerIndex: number, public gender: GenderRequirement = \"None\") {}\r\n}\r\n\r\nexport type GenderRequirement = 'None' | 'Male' | 'Female' | 'Opposite' | 'Same';\r\n","import { GenderRequirement } from \"../cards/player-setting\";\r\n\r\nexport class ParserHelper {\r\n    /** parse a player tag, e. g. \"Player\" or \"Player2\" or \"Player5000\" and return the index (1 if none is specified) or undefined */\r\n    public static parsePlayerTag(s: string): number | undefined {\r\n        const tagName = \"Player\";\r\n\r\n        if (!s.startsWith(tagName)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (s.length > tagName.length) {\r\n            const index = Number(s.substring(tagName.length));\r\n            return isNaN(index) ? undefined : index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /** parse a gender requirement string, e. g. \"m\", \"male\", \"Male\", etc. */\r\n    public static parseGenderRequirement(s: string): GenderRequirement |undefined {\r\n        s = s.toLowerCase();\r\n\r\n        if (s in this.genderRequirementMap) {\r\n            return this.genderRequirementMap[s];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** parse a timespan in the format hh:mm:ss or mm:ss */\r\n    public static parseTimeSpanStringToSeconds(s: string): number | undefined {\r\n        const a = s.split(\":\");\r\n\r\n        if (a.length > 3) {\r\n            return undefined;\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        for (let i = 0; i < a.length; i++) {\r\n            const p = Number(a[i]);\r\n            if (isNaN(p)) {\r\n                return undefined;\r\n            }\r\n\r\n            result += p * Math.pow(60, (a.length - i - 1));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static genderRequirementMap: { [id: string]: GenderRequirement } = {\r\n        m: \"Male\",\r\n        male: \"Male\",\r\n        f: \"Female\",\r\n        female: \"Female\",\r\n        o: \"Opposite\",\r\n        opposite: \"Opposite\",\r\n        s: \"Same\",\r\n        same: \"Same\",\r\n    };\r\n}\r\n","import { BaseCard } from \"../cards/base-card\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { CardParser } from \"./card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\n\r\nexport abstract class BaseCardParser<TCard extends BaseCard> implements CardParser {\r\n    public deserialize(xml: Element): Card {\r\n        const card = this.createCard();\r\n\r\n        const idAttr = xml.getAttribute(\"id\");\r\n        if (idAttr === null) {\r\n            throw new Error(\"The id of a card must not be null\");\r\n        }\r\n        card.id = idAttr;\r\n\r\n        card.willPower = Number(xml.getAttribute(\"willPower\"));\r\n        if (card.willPower < 1 || card.willPower > 10) {\r\n            card.willPower = undefined;\r\n        }\r\n\r\n        const tags = xml.getAttribute(\"tags\");\r\n\r\n        card.tags = tags\r\n            ? [...this.getDefaultAttributes(), ...tags.split(\",\")]\r\n            : this.getDefaultAttributes();\r\n\r\n        this.parseAttributes(xml, card);\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            if (element.tagName === `${xml.tagName}.players`) {\r\n                card.players = this.parsePlayers(element);\r\n                continue;\r\n            }\r\n\r\n            this.parseElement(element, card);\r\n        }\r\n\r\n        if (card.players === undefined) {\r\n            card.players = [];\r\n        }\r\n\r\n        return card;\r\n    }\r\n\r\n    protected getDefaultAttributes(): string[] {\r\n        return [];\r\n    }\r\n\r\n    protected abstract parseAttributes(rootXml: Element, card: TCard): void;\r\n    protected abstract parseElement(element: Element, card: TCard): boolean;\r\n\r\n    protected abstract createCard(): TCard;\r\n\r\n    private parsePlayers(xml: Element): PlayerSetting[] {\r\n        const players: PlayerSetting[] = [];\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            const player = this.parsePlayer(element);\r\n            if (player !== undefined) {\r\n                players.push(player);\r\n            }\r\n        }\r\n\r\n        return players;\r\n    }\r\n\r\n    private parsePlayer(xml: Element): PlayerSetting | undefined {\r\n        const index = ParserHelper.parsePlayerTag(xml.tagName);\r\n        if (index === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        let requiredGender: GenderRequirement = \"None\";\r\n\r\n        const genderAttr = xml.getAttribute(\"gender\");\r\n        if (genderAttr) {\r\n            const genderReq = ParserHelper.parseGenderRequirement(genderAttr);\r\n\r\n            if (genderReq !== undefined) {\r\n                requiredGender = genderReq;\r\n            }\r\n        }\r\n\r\n        return new PlayerSetting(index, requiredGender);\r\n    }\r\n}\r\n","import { TextTranslation } from \"./text-translation\";\r\n\r\nexport class TextElement {\r\n    public weight: number = 1;\r\n    public translations!: TextTranslation[];\r\n}","export class TextTranslation {\r\n    constructor(public lang: string, public content: string) {}\r\n}\r\n","import { TextElement } from \"../cards/text-element\";\r\nimport { TextTranslation } from \"../cards/text-translation\";\r\n\r\n/** parses the text content of an element */\r\nexport class TextContentParser {\r\n    public result: TextElement[];\r\n\r\n    private isConditionalElement: boolean | undefined = undefined;\r\n\r\n    constructor() {\r\n        this.result = [];\r\n    }\r\n\r\n    public addElement(xml: Element): boolean {\r\n        switch (xml.tagName) {\r\n            case \"Case\":\r\n                if (this.isConditionalElement === false) {\r\n                    return false;\r\n                }\r\n                this.isConditionalElement = true;\r\n\r\n                this.result.push(this.parseTextElement(xml));\r\n                return true;\r\n            case \"Text\":\r\n                if (this.isConditionalElement === true) {\r\n                    return false;\r\n                } else if (this.isConditionalElement === undefined) {\r\n                    this.result.push({ translations: [], weight: 1 });\r\n                }\r\n\r\n                this.isConditionalElement = false;\r\n                this.result[0].translations.push(this.parseTranslation(xml));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private parseTextElement(element: Element): TextElement {\r\n        const translations: TextTranslation[] = [];\r\n        const textElement = new TextElement();\r\n\r\n        const weight = Number(element.getAttribute(\"weight\"));\r\n        if (!isNaN(weight)) {\r\n            textElement.weight = weight;\r\n        }\r\n\r\n        const texts = element.getElementsByTagName(\"Text\");\r\n        for (let i = 0; i < texts.length; i++) {\r\n            const textXmlNode = texts[i];\r\n            translations.push(this.parseTranslation(textXmlNode));\r\n        }\r\n\r\n        textElement.translations = translations;\r\n        return textElement;\r\n    }\r\n\r\n    private parseTranslation(element: Element) {\r\n        const lang = element.getAttribute(\"lang\");\r\n        if (lang === null) {\r\n            throw new Error(\"lang attribute not found on element\");\r\n        }\r\n\r\n        if (element.textContent === null) {\r\n            throw new Error(\"The text content of the element is empty.\");\r\n        }\r\n        \r\n        return new TextTranslation(lang, element.textContent);\r\n    }\r\n}\r\n","import { TextCard } from \"../cards/text-card\";\r\nimport { BaseCardParser } from \"./base-card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\nimport { TextContentParser } from \"./text-content-parser\";\r\n\r\nexport abstract class TextCardParser<TCard extends TextCard> extends BaseCardParser<TCard> {\r\n    private textContentParser = new TextContentParser();\r\n\r\n    protected parseAttributes(rootXml: Element, card: TCard): void {\r\n        const followUpAttr = rootXml.getAttribute(\"followUpProbability\");\r\n        if (followUpAttr !== null) {\r\n            const followUpProbability = Number(followUpAttr);\r\n            if (isNaN(followUpProbability)) {\r\n                throw new Error(\r\n                    `The follow up propability ${followUpAttr} could not be parsed as a number (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpPropability = followUpProbability;\r\n        }\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay !== null) {\r\n            const seconds = ParserHelper.parseTimeSpanStringToSeconds(followUpDelay);\r\n            if (seconds === undefined) {\r\n                throw new Error(\r\n                    `Could not parse followUpDelay ${followUpDelay} as a timespan (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpDelay = seconds;\r\n        } else {\r\n            card.followUpDelay = 0;\r\n        }\r\n    }\r\n\r\n    protected parseElement(element: Element, card: TCard): boolean {\r\n        switch (element.tagName) {\r\n            case \"Text\":\r\n            case \"Case\":\r\n                card.content = this.textContentParser.result;\r\n                return this.textContentParser.addElement(element);\r\n        }\r\n\r\n        if (element.tagName === `${card.type}.followUp`) {\r\n            const parser = new TextContentParser();\r\n\r\n            const subElements = element.getElementsByTagName(\"*\");\r\n            for (let i = 0; i < subElements.length; i++) {\r\n                const subElement = subElements[i];\r\n                if (subElement.parentElement !== element) {\r\n                    continue;\r\n                }\r\n\r\n                parser.addElement(subElement);\r\n            }\r\n\r\n            card.followUp = parser.result;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { BaseCard } from \"./base-card\";\r\nimport { TextElement } from \"./text-element\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport _ from \"lodash\";\r\n\r\nexport abstract class TextCard extends BaseCard {\r\n    /** the propability (0-1) that this card follows up */\r\n    public followUpPropability: number = 1;\r\n\r\n    /** the delay of the follow up in seconds */\r\n    public followUpDelay!: number;\r\n\r\n    public content!: TextElement[];\r\n    public followUp!: TextElement[];\r\n\r\n    public condition: (status: GameStatus) => boolean = status => {\r\n        return _.some(this.content, x => _.some(x.translations, y => y.lang === status.language));\r\n    };\r\n}\r\n","import { GameStatus } from \"../game-status\";\r\nimport { Card } from \"./card\";\r\nimport { PlayerSetting } from \"./player-setting\";\r\n\r\n/** A very basic implementation of Card  */\r\nexport abstract class BaseCard implements Card {\r\n  public id!: string;\r\n  public willPower!: number | undefined;\r\n  public players!: PlayerSetting[];\r\n  public tags!: string[];\r\n  public condition!: (status: GameStatus) => boolean;\r\n\r\n  public readonly abstract type: string;\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class FactCard extends TextCard {\r\n    public readonly type: string = \"FactCard\";\r\n    public isTrueFact: boolean = false;\r\n}\r\n","import { TextCardParser } from \"../../core/parsing/text-card-parser\";\r\nimport { FactCard } from \"../cards/fact-card\";\r\n\r\nexport class FactCardParser extends TextCardParser<FactCard> {\r\n    protected createCard(): FactCard {\r\n        return new FactCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: FactCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const attr = rootXml.getAttribute(\"is\");\r\n        card.isTrueFact = attr === null ? true : this.toBool(attr);\r\n    }\r\n\r\n    protected toBool(value?: string): boolean {\r\n        if (value === \"true\") {\r\n            return true;\r\n        }\r\n\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return !!+value;\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class VirusCard extends TextCard {\r\n    public readonly type: string = \"VirusCard\";\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { VirusCard } from '../cards/virus-card';\r\n\r\nexport class VirusCardParser extends TextCardParser<VirusCard> {\r\n    protected createCard(): VirusCard {\r\n        return new VirusCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: VirusCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay === null) {\r\n            card.followUpDelay = 60 * 5; // 5 minutes default\r\n        }\r\n    }\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DefaultTextCardParser<T extends TextCard> extends TextCardParser<T> {\r\n    constructor(private factory: new () => T) {\r\n        super();\r\n    }\r\n\r\n    protected createCard(): T {\r\n        return new this.factory();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DownCard extends TextCard {\r\n    public readonly type: string = \"DownCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NeverEverCard extends TextCard {\r\n    public readonly type: string = \"NeverEverCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class JokeCard extends TextCard {\r\n    public readonly type: string = \"JokeCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class QuestionCard extends TextCard {\r\n    public readonly type: string = \"QuestionCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class TaskCard extends TextCard {\r\n    public readonly type: string = \"TaskCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class WouldYouRatherCard extends TextCard {\r\n    public readonly type: string = \"WyrCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DrinkCard extends TextCard {\r\n    public readonly type: string = \"DrinkCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class GroupGameCard extends TextCard {\r\n    public readonly type: string = \"GroupGameCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NoIdeaLosesCard extends TextCard {\r\n    public readonly type: string = \"NoIdeaLosesCard\";\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { FactCardParser } from \"./parsing/fact-card-parser\";\r\nimport { VirusCardParser } from \"./parsing/virus-card-parser\";\r\nimport { DefaultTextCardParser } from \"./parsing/default-text-card-parser\";\r\nimport { DownCard } from \"./cards/down-card\";\r\nimport { NeverEverCard } from \"./cards/never-ever-card\";\r\nimport { JokeCard } from \"./cards/joke-card\";\r\nimport { QuestionCard } from \"./cards/question-card\";\r\nimport { TaskCard } from \"./cards/task-card\";\r\nimport { WouldYouRatherCard } from \"./cards/would-you-rather-card\";\r\nimport { DrinkCard } from \"./cards/drink-card\";\r\nimport { GroupGameCard } from \"./cards/group-game-card\";\r\nimport { NoIdeaLosesCard } from \"./cards/no-idea-loses-card\";\r\n\r\ntype ParserRegistration = { [type: string]: () => CardParser };\r\n\r\nexport const parsers: ParserRegistration = {\r\n    FactCard: () => new FactCardParser(),\r\n    VirusCard: () => new VirusCardParser(),\r\n    DownCard: () => new DefaultTextCardParser<DownCard>(DownCard),\r\n    NeverEverCard: () => new DefaultTextCardParser<NeverEverCard>(NeverEverCard),\r\n    JokeCard: () => new DefaultTextCardParser<JokeCard>(JokeCard),\r\n    QuestionCard: () => new DefaultTextCardParser<QuestionCard>(QuestionCard),\r\n    TaskCard: () => new DefaultTextCardParser<TaskCard>(TaskCard),\r\n    WyrCard: () => new DefaultTextCardParser<WouldYouRatherCard>(WouldYouRatherCard),\r\n    DrinkCard: () => new DefaultTextCardParser<DrinkCard>(DrinkCard),\r\n    GroupGameCard: () => new DefaultTextCardParser<GroupGameCard>(GroupGameCard),\r\n    NoIdeaLosesCard: () => new DefaultTextCardParser<NoIdeaLosesCard>(NoIdeaLosesCard),\r\n};\r\n","import axios from \"axios\";\r\nimport { CardsLoader } from \"../../core/cards-loader\";\r\nimport { Card } from \"../../core/cards/card\";\r\nimport { DefaultCardParserFactory } from \"../../impl/default-card-parser-factory\";\r\n\r\nconst parserFactory = new DefaultCardParserFactory();\r\nconst loader = new CardsLoader(requestFile, parserFactory);\r\n\r\nasync function requestFile(url: string) : Promise<string> {\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n}\r\n\r\nexport async function loadCards(url: string): Promise<Card[]> {\r\n    return loader.loadFromUrl(url);\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { CardParserFactory } from \"../core/parsing/card-parser-factory\";\r\nimport { parsers } from \"./registrations\";\r\n\r\nexport class DefaultCardParserFactory implements CardParserFactory {\r\n    private parsers: { [type: string]: () => CardParser };\r\n\r\n    constructor() {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    public createParser(cardType: string): CardParser | undefined {\r\n        if (cardType in this.parsers) {\r\n            return this.parsers[cardType]();\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n","import * as cardsLoader from \"./api/cards-loader\";\r\n\r\nexport default {\r\n    api: {\r\n        cardsLoader,\r\n    },\r\n};\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { from, of } from \"rxjs\";\r\nimport { catchError, filter, map, mergeMap } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport { loadSourceAsync } from \"./actions\";\r\n\r\nexport const loadSourceEpic: Epic<RootAction, RootAction, RootState, Services> = (\r\n    action$,\r\n    _state$,\r\n    { api },\r\n) =>\r\n    action$.pipe(\r\n        filter(isActionOf(loadSourceAsync.request)),\r\n        mergeMap(action =>\r\n            from(api.cardsLoader.loadCards(action.payload)).pipe(\r\n                map(cards => loadSourceAsync.success({ url: action.payload, cards })),\r\n                catchError((message: string) =>\r\n                    of(loadSourceAsync.failure({ url: action.payload, message })),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n","import { LocalizeContextProps } from \"react-localize-redux\";\r\nimport { Translator } from \"GameModels\";\r\n\r\nexport function toTranslator(localize: LocalizeContextProps): Translator {\r\n    return {\r\n        languageCode: localize.activeLanguage.code,\r\n        translate: x => localize.translate(x) as string,\r\n    }\r\n}","import { ParsingOptions } from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { Theme } from \"@material-ui/core\";\r\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\r\n\r\nexport function getRootStyles(): CSSProperties {\r\n    return {\r\n        backgroundColor: \"transparent\",\r\n        height: \"100%\",\r\n        fontSize: 25,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        color: \"white\",\r\n        cursor: \"pointer\",\r\n    };\r\n}\r\n\r\nexport function getContentStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        textAlign: \"center\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            width: \"100%\",\r\n            marginLeft: 30,\r\n            marginRight: 30,\r\n            fontSize: 20,\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"80%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"60%\",\r\n        },\r\n    }\r\n}\r\n\r\nexport function spaceHeaderStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        visibility: \"hidden\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            display: \"none\",\r\n        }\r\n    };\r\n}\r\n\r\nfunction MyParagaph({ children, ...props }: any) {\r\n    return (\r\n        <p {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction MyH3({ children, ...props }: any) {\r\n    return (\r\n        <h3 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h3>\r\n    );\r\n}\r\n\r\nfunction MyH4({ children, ...props }: any) {\r\n    return (\r\n        <h4 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h4>\r\n    );\r\n}\r\n\r\nexport const defaultMarkdownOptions: ParsingOptions = {\r\n    overrides: {\r\n        p: {\r\n            component: MyParagaph,\r\n            props: {},\r\n        },\r\n        h3: {\r\n            component: MyH3,\r\n            props: {},\r\n        },\r\n        h4: {\r\n            component: MyH4,\r\n            props: {},\r\n        },\r\n    },\r\n};\r\n","export abstract class TextFragment {}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RawTextFragment extends TextFragment {\r\n    constructor(public text: string) {\r\n        super();\r\n    }\r\n}","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport abstract class VariableFragment extends TextFragment {\r\n}","import { VariableFragment } from \"./variable-fragment\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\n\r\nexport class PlayerReferenceFragment extends VariableFragment {\r\n    constructor(public playerIndex: number = 1, public gender: GenderRequirement = \"None\") {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SipsFragment extends VariableFragment {\r\n    constructor(public minSips: number = 1, public sipsIndex: number = 1) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomNumberFragment extends TextFragment {\r\n    constructor(public numbers: RandomNumber[]) {\r\n        super();\r\n    }\r\n}\r\n\r\nexport interface RandomNumber {\r\n    getCount(): number;\r\n}\r\n\r\nexport class NumberRange implements RandomNumber {\r\n    constructor(public min: number, public max: number) {}\r\n\r\n    getCount(): number {\r\n        return this.max - this.min;\r\n    }\r\n}\r\n\r\nexport class StaticNumber implements RandomNumber {\r\n    constructor(public i: number) {}\r\n\r\n    getCount(): number {\r\n        return 1;\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomTextFragment extends TextFragment {\r\n    constructor(public texts: string[]) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class GenderBasedSelectionFragment extends TextFragment {\r\n    constructor(\r\n        public femaleText: string,\r\n        public maleText?: string,\r\n        public referencedPlayerIndex?: number,\r\n    ) {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SocialMediaPlatformFragment extends VariableFragment {\r\n}","import { ParserHelper } from \"./../parser-helper\";\r\nimport { CardTextDecoder } from \"./card-text-decoder\";\r\nimport { TextFragment } from \"../../text-fragment\";\r\nimport * as Consts from \"./text-decoder-consts\";\r\nimport { RawTextFragment } from \"../../fragments/raw-text-fragment\";\r\nimport { PlayerReferenceFragment } from \"../../fragments/player-reference-fragment\";\r\nimport { SipsFragment } from \"../../fragments/sips-fragment\";\r\nimport {\r\n    RandomNumberFragment,\r\n    RandomNumber,\r\n    NumberRange,\r\n    StaticNumber,\r\n} from \"../../fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"../../fragments/random-text-fragment\";\r\nimport { GenderBasedSelectionFragment } from \"../../fragments/gender-based-selection-fragment\";\r\nimport { SocialMediaPlatformFragment } from \"@core/fragments/social-media-platform-fragment\";\r\n\r\nexport class DefaultTextDecoder implements CardTextDecoder {\r\n    decode(s: string): TextFragment[] {\r\n        const result: TextFragment[] = [];\r\n\r\n        let index = 0;\r\n        let lastTokenIndex = 0;\r\n\r\n        do {\r\n            if (s[index] == Consts.VarStartChar) {\r\n                if (lastTokenIndex !== index) {\r\n                    result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                }\r\n\r\n                const token = this.readToken(s, index, Consts.VarEndChar);\r\n                index = token.index;\r\n\r\n                result.push(this.parseVariableFragment(token.value));\r\n            } else if (s[index] === Consts.SelectionStartChar) {\r\n                if (index > 1 && s[index - 1] === Consts.SelectionModifierStartChar) {\r\n                    // handle !{...}\r\n                    index--;\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    index++;\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseRandomSelectionFragment(content.value));\r\n                } else {\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseGenderSelectionFragment(content.value));\r\n                }\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n            lastTokenIndex = index;\r\n        } while (++index < s.length);\r\n\r\n        if (lastTokenIndex !== s.length) {\r\n            result.push(new RawTextFragment(s.substring(lastTokenIndex)));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseVariableFragment(content: string): TextFragment {\r\n        content = content.toLowerCase();\r\n\r\n        if (content.startsWith(Consts.PlayerVariable)) {\r\n            // Samples:\r\n            // [Player1:f]\r\n            // [Player1]\r\n            // [Player]\r\n\r\n            const playerRef = new PlayerReferenceFragment();\r\n\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let playerTag: string;\r\n            if (parameterBegin === -1) {\r\n                playerTag = content;\r\n            } else {\r\n                playerTag = content.substring(0, parameterBegin);\r\n\r\n                const genderString = content.substring(parameterBegin + 1);\r\n                const gender = ParserHelper.parseGenderRequirement(genderString);\r\n                if (gender === undefined) {\r\n                    throw new Error(\r\n                        `Gender parameter of player tag could not be parsed: ${content}`,\r\n                    );\r\n                }\r\n\r\n                playerRef.gender = gender;\r\n            }\r\n\r\n            playerRef.playerIndex = this.parsePlayerIndex(playerTag);\r\n            return playerRef;\r\n        }\r\n\r\n        if (content.startsWith(Consts.SipsVariable)) {\r\n            const sipsFragment = new SipsFragment();\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let sipsTag: string;\r\n            if (parameterBegin === -1) {\r\n                sipsTag = content;\r\n            } else {\r\n                sipsTag = content.substring(0, parameterBegin);\r\n                sipsFragment.minSips = Number(content.substring(parameterBegin + 1));\r\n                if (isNaN(sipsFragment.minSips)) {\r\n                    throw new Error(`The sips amount of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            if (sipsTag.length > Consts.SipsVariable.length) {\r\n                sipsFragment.sipsIndex = Number(sipsTag.substring(Consts.SipsVariable.length));\r\n                if (isNaN(sipsFragment.sipsIndex)) {\r\n                    throw new Error(`The sips index of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            return sipsFragment;\r\n        }\r\n\r\n        if (content === Consts.SocialMediaVariable) {\r\n            return new SocialMediaPlatformFragment();\r\n        }\r\n\r\n        return new RawTextFragment(content);\r\n    }\r\n\r\n    public parseRandomSelectionFragment(content: string): TextFragment {\r\n        // Samples:\r\n        // 12,54,56-90\r\n        // 12,hello,not,19\r\n\r\n        const isNumericSelection = /^[0-9,-]+$/.test(content);\r\n        if (isNumericSelection) {\r\n            const numbers = this.parseNumberArray(content);\r\n            return new RandomNumberFragment(numbers);\r\n        }\r\n\r\n        const texts = this.splitQuoted(content, \",\");\r\n        return new RandomTextFragment(texts);\r\n    }\r\n\r\n    public parseNumberArray(content: string): RandomNumber[] {\r\n        const result: RandomNumber[] = [];\r\n        let currentNumber: RandomNumber | null = null;\r\n\r\n        let numberStart = 0;\r\n        let isRangeToken = false;\r\n\r\n        let i = 0;\r\n        while (true) {\r\n            for (; i < content.length; i++) {\r\n                const c = content[i];\r\n\r\n                if (!isNaN(Number(c))) {\r\n                    continue;\r\n                }\r\n\r\n                if (c === \"-\") {\r\n                    if (isRangeToken) {\r\n                        throw new Error(\"Can only have one range identifier per field\");\r\n                    }\r\n                    isRangeToken = true;\r\n\r\n                    currentNumber = new NumberRange(Number(content.substring(numberStart, i)), 0);\r\n                    numberStart = i + 1;\r\n                    continue;\r\n                }\r\n\r\n                if (c === \",\") {\r\n                    break;\r\n                }\r\n\r\n                throw new Error(\"Invalid character found: \" + c);\r\n            }\r\n\r\n            if (i === numberStart) {\r\n                throw new Error(`A number was expected at position ${i} in string \"${content}\"`);\r\n            }\r\n\r\n            const num = Number(content.substring(numberStart, i));\r\n            if (isRangeToken) {\r\n                (currentNumber as NumberRange).max = num;\r\n            } else {\r\n                currentNumber = new StaticNumber(num);\r\n            }\r\n\r\n            result.push(currentNumber!);\r\n\r\n            if (i === content.length) {\r\n                break;\r\n            }\r\n\r\n            currentNumber = null;\r\n            isRangeToken = false;\r\n            numberStart = ++i;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public splitQuoted(value: string, delimiter: string): string[] {\r\n        let tokenStart = 0;\r\n        let result: string[] = [];\r\n\r\n        while (value.length > tokenStart - 1) {\r\n            let withinQuotes = false;\r\n\r\n            if (value[tokenStart] === '\"') {\r\n                withinQuotes = true;\r\n                tokenStart++;\r\n            }\r\n\r\n            let i = tokenStart;\r\n            do {\r\n                if (value[i] === delimiter) {\r\n                    if (withinQuotes) continue;\r\n\r\n                    result.push(value.substring(tokenStart, i));\r\n                    tokenStart = i + 1;\r\n                    break;\r\n                }\r\n\r\n                if (value[i] == '\"') {\r\n                    if (!withinQuotes) {\r\n                        continue; //allow quotes in the middle\r\n                    }\r\n\r\n                    if (i == value.length - 1) {\r\n                        //if its the last char\r\n                        result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                        return result;\r\n                    }\r\n\r\n                    const nextChar = value[i + 1];\r\n                    if (nextChar == '\"') {\r\n                        i++;\r\n                        continue; //escaped quotes\r\n                    }\r\n\r\n                    if (nextChar != delimiter)\r\n                        throw new Error(\"The delimiter must come after the closing quotes.\");\r\n\r\n                    result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                    tokenStart = i + 2;\r\n                    break;\r\n                }\r\n\r\n                if (i == value.length - 1) {\r\n                    if (withinQuotes) {\r\n                        throw new Error(\"The text must end with a quote\");\r\n                    }\r\n\r\n                    result.push(value.substring(tokenStart, i + 1));\r\n                    return result;\r\n                }\r\n            } while (++i < value.length);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseGenderSelectionFragment(content: string): GenderBasedSelectionFragment {\r\n        const fragment = new GenderBasedSelectionFragment(\"\");\r\n\r\n        const splitterIndex = content.indexOf(Consts.SelectionSplitterChar);\r\n        const reference = content.indexOf(Consts.SelectionReferenceChar);\r\n\r\n        if (reference !== -1) {\r\n            fragment.referencedPlayerIndex = this.parsePlayerIndex(\r\n                content.substring(reference + 1),\r\n            );\r\n            content = content.substring(0, reference);\r\n        }\r\n\r\n        if (splitterIndex === -1) {\r\n            fragment.femaleText = content;\r\n        } else {\r\n            fragment.maleText = content.substring(0, splitterIndex);\r\n            fragment.femaleText = content.substring(splitterIndex + 1, content.length);\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    public parsePlayerIndex(value: string): number {\r\n        if (value.length > Consts.PlayerVariable.length) {\r\n            const index = Number(value.substring(Consts.PlayerVariable.length));\r\n            if (isNaN(index)) {\r\n                throw new Error(`The player index of \"${value}\" could not be parsed.`);\r\n            }\r\n\r\n            return index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    public readToken(\r\n        value: string,\r\n        index: number,\r\n        endChar: string,\r\n    ): { value: string; index: number } {\r\n        const length = value.length;\r\n        const tokenStart = index;\r\n\r\n        while (++index < length) {\r\n            const char = value[index];\r\n\r\n            if (char === Consts.EscapeChar) {\r\n                index++;\r\n                continue;\r\n            }\r\n\r\n            if (char === endChar) {\r\n                index++;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return { index, value: value.substring(tokenStart + 1, index - 1) };\r\n    }\r\n}\r\n","export const VarStartChar: string = \"[\";\r\nexport const VarEndChar: string = \"]\";\r\nexport const EscapeChar: string = \"\\\\\";\r\nexport const SelectionStartChar: string = \"{\";\r\nexport const SelectionModifierStartChar: string = \"!\";\r\nexport const SelectionEndChar: string = \"}\";\r\n\r\nexport const PlayerVariable: string = \"player\";\r\nexport const SipsVariable: string = \"sips\";\r\nexport const VariableParametersStart: string = \":\";\r\nexport const SocialMediaVariable: string = \"socialmediaplatform\";\r\n\r\nexport const SelectionSplitterChar: string = \"/\";\r\nexport const SelectionReferenceChar: string = \"|\";\r\nexport const ArrayDelimiter: string = \",\";\r\n","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GenderBasedSelectionFragment } from \"@core/fragments/gender-based-selection-fragment\";\r\nimport { PlayerReferenceFragment } from \"@core/fragments/player-reference-fragment\";\r\nimport { NumberRange, RandomNumberFragment, StaticNumber } from \"@core/fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"@core/fragments/random-text-fragment\";\r\nimport { RawTextFragment } from \"@core/fragments/raw-text-fragment\";\r\nimport { SipsFragment } from \"@core/fragments/sips-fragment\";\r\nimport { SocialMediaPlatformFragment } from \"@core/fragments/social-media-platform-fragment\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { RandomUtils } from \"@core/selection/selection-algorithm\";\r\nimport { TextFragment } from \"@core/text-fragment\";\r\nimport _ from \"lodash\";\r\n\r\nexport class TextFormatter {\r\n    public static getRequiredPlayers(fragments: TextFragment[], playerSettings: PlayerSetting[]) {\r\n        const requiredPlayers = new Array<PlayerSetting>();\r\n\r\n        const players = _.groupBy(\r\n            fragments\r\n                .filter(x => x instanceof PlayerReferenceFragment)\r\n                .map(x => x as PlayerReferenceFragment),\r\n            \"playerIndex\",\r\n        );\r\n\r\n        for (const key in players) {\r\n            if (players.hasOwnProperty(key)) {\r\n                const player = players[key][0];\r\n\r\n                let requiredGender = player.gender;\r\n\r\n                if (requiredGender === \"None\") {\r\n                    const rootSetting = playerSettings.find(\r\n                        x => x.playerIndex === player.playerIndex,\r\n                    );\r\n                    if (rootSetting !== undefined) {\r\n                        requiredGender = rootSetting.gender;\r\n                    }\r\n                }\r\n\r\n                requiredPlayers.push({ playerIndex: player.playerIndex, gender: requiredGender });\r\n            }\r\n        }\r\n\r\n        return requiredPlayers;\r\n    }\r\n\r\n    public static getRequiredSips(fragments: TextFragment[]): SipsFragment[] {\r\n        const sips = _.groupBy(\r\n            fragments.filter(x => x instanceof SipsFragment).map(x => x as SipsFragment),\r\n            \"sipsIndex\",\r\n        );\r\n        return Object.values(sips).map(x => x[0]);\r\n    }\r\n\r\n    public static format(\r\n        fragments: TextFragment[],\r\n        players: { [index: number]: PlayerInfo },\r\n        sips: { [index: number]: number },\r\n        socialMediaPlatform: string,\r\n        translate: (key: string) => string,\r\n        selection: RandomUtils,\r\n        options: Partial<FormatOptions>,\r\n    ): string {\r\n        let result = \"\";\r\n        let lastPlayerFragment: PlayerReferenceFragment | null = null;\r\n\r\n        for (const fragment of fragments) {\r\n            if (fragment instanceof RawTextFragment) {\r\n                result += fragment.text;\r\n            } else if (fragment instanceof PlayerReferenceFragment) {\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n                result += players[fragment.playerIndex].name;\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                lastPlayerFragment = fragment;\r\n            } else if (fragment instanceof SipsFragment) {\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                const sip = sips[fragment.sipsIndex];\r\n                if (sip === 1) {\r\n                    result += translate(\"oneSip\");\r\n                } else {\r\n                    result += `${sip} ${translate(\"sips\")}`;\r\n                }\r\n\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n            } else if (fragment instanceof GenderBasedSelectionFragment) {\r\n                let referencedPlayer: number;\r\n                if (fragment.referencedPlayerIndex !== undefined) {\r\n                    referencedPlayer = fragment.referencedPlayerIndex;\r\n                } else if (lastPlayerFragment !== null) {\r\n                    referencedPlayer = lastPlayerFragment.playerIndex;\r\n                } else {\r\n                    const playerKeys = Object.keys(players);\r\n                    if (playerKeys.length === 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    referencedPlayer = Number(playerKeys[0]);\r\n                }\r\n\r\n                const player = players[referencedPlayer];\r\n                const text = player.gender === \"Female\" ? fragment.femaleText : fragment.maleText;\r\n                if (text !== undefined) {\r\n                    result += text;\r\n                }\r\n            } else if (fragment instanceof RandomTextFragment) {\r\n                const text = selection.selectRandomWeighted(fragment.texts, () => 1);\r\n                result += text;\r\n            } else if (fragment instanceof RandomNumberFragment) {\r\n                const number = selection.selectRandomWeighted(fragment.numbers, x => x.getCount());\r\n                if (number === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (number instanceof NumberRange) {\r\n                    const random =\r\n                        number.min + Math.round((number.max - number.min) * selection.getRandom());\r\n                    result += random;\r\n                } else if (number instanceof StaticNumber) {\r\n                    result += number.i;\r\n                }\r\n            } else if (fragment instanceof SocialMediaPlatformFragment) {\r\n                result += socialMediaPlatform;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport interface FormatOptions {\r\n    boldPlayerNames: boolean;\r\n    boldSips: boolean;\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { DefaultTextDecoder } from \"@core/parsing/text-decoder/default-text-decoder\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { FollowUpSlide, SelectedPlayer, Translator } from \"GameModels\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../../../store\";\r\nimport * as actions from \"../../actions\";\r\nimport { TextFormatter } from \"../../formatter/text-formatter\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { CardPresenter } from \"./card-presenter\";\r\n\r\nexport interface TextSlideState {\r\n    markdownContent: string;\r\n}\r\n\r\nexport abstract class TextSlidePresenter<\r\n    TState extends TextSlideState,\r\n    TCard extends TextCard\r\n> extends CardPresenter<TCard> {\r\n    constructor(protected translator: Translator, cardType: string, slideType: string) {\r\n        super(cardType, slideType);\r\n    }\r\n\r\n    protected initializeCard(card: TCard, cardRef: CardRef): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const result = new Array<RootAction>();\r\n\r\n        const text = this.selectText(selection, card);\r\n        const { formatted, players } = this.formatText(text, card, null, selection);\r\n\r\n        const state = this.initializeState(formatted, card, players, selection);\r\n        result.push(\r\n            actions.setSlideState({\r\n                state,\r\n                insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n            }),\r\n        );\r\n\r\n        if (_.some(card.followUp)) {\r\n            // dont check for correct translation as the language may change\r\n            if (Math.random() <= card.followUpPropability) {\r\n                const due = new Date();\r\n                due.setSeconds(due.getSeconds() + card.followUpDelay);\r\n\r\n                result.push(actions.enqueueFollowUp(this.createFollowUp(cardRef, players, due)));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected initializeFollowUpCard(card: TCard, param: any): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n\r\n        try {\r\n            const { text, players } = this.selectFollowUpText(selection, card, param);\r\n            const { formatted } = this.formatText(text, card, players || [], selection);\r\n\r\n            const state = this.initializeFollowUpState(formatted, card, selection, param);\r\n            return [\r\n                actions.setSlideState({\r\n                    state,\r\n                    insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n                }),\r\n            ];\r\n        } catch (error) {\r\n            //no follow up found\r\n            return [actions.requestSlideAsync.request(this.translator)];\r\n        }\r\n    }\r\n\r\n    protected abstract initializeState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): TState;\r\n\r\n    protected abstract initializeFollowUpState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        selection: SelectionAlgorithm,\r\n        param: any,\r\n    ): TState;\r\n\r\n    protected createFollowUp(cardRef: CardRef, players: SelectedPlayer[], due: Date): FollowUpSlide {\r\n        return {\r\n            due: due,\r\n            slideType: this.slideType,\r\n            selectedCard: cardRef,\r\n            param: { definedPlayers: players },\r\n        };\r\n    }\r\n\r\n    protected selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return selectText(selection, selectedCard, this.translator);\r\n    }\r\n\r\n    protected formatText(\r\n        text: string,\r\n        card: TCard,\r\n        definedPlayers: SelectedPlayer[] | null,\r\n        selection: SelectionAlgorithm,\r\n    ): { formatted: string; players: SelectedPlayer[] } {\r\n        return formatText(text, card, definedPlayers, selection, this.translator);\r\n    }\r\n\r\n    selectFollowUpText(\r\n        selection: SelectionAlgorithm,\r\n        selectedCard: TextCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const lang = this.translator.languageCode;\r\n\r\n        const followUps = selectedCard.followUp.filter(x =>\r\n            _.some(x.translations, y => y.lang.toLowerCase() === lang),\r\n        );\r\n        if (followUps.length === 0) {\r\n            throw new Error(\"No follow ups found\");\r\n        }\r\n\r\n        let players: SelectedPlayer[] | undefined;\r\n        if (\"definedPlayers\" in param) {\r\n            players = param.definedPlayers;\r\n        } else {\r\n            players = undefined;\r\n        }\r\n\r\n        const content = selection.selectRandomWeighted(followUps, x => x.weight)!;\r\n        const text = content.translations.find(x => x.lang === lang)!.content;\r\n        return { text, players };\r\n    }\r\n}\r\n\r\nexport function formatText<TCard extends TextCard>(\r\n    text: string,\r\n    card: TCard,\r\n    definedPlayers: SelectedPlayer[] | null,\r\n    selection: SelectionAlgorithm,\r\n    translator: Translator,\r\n): { formatted: string; players: SelectedPlayer[] } {\r\n    const fragments = new DefaultTextDecoder().decode(text);\r\n    const playerRequirements = TextFormatter.getRequiredPlayers(fragments, card.players);\r\n\r\n    const players = gameEngine.selectPlayers(\r\n        selection,\r\n        playerRequirements,\r\n        definedPlayers || [],\r\n        card.tags,\r\n    );\r\n\r\n    const requiredSips = TextFormatter.getRequiredSips(fragments);\r\n\r\n    const indexedPlayers: { [index: number]: PlayerInfo } = {};\r\n    for (const player of players) {\r\n        indexedPlayers[player.index] = player.player;\r\n    }\r\n\r\n    const sips: { [index: number]: number } = {};\r\n    for (const sipInfo of requiredSips) {\r\n        sips[sipInfo.sipsIndex] = selection.getSips(sipInfo.minSips);\r\n    }\r\n\r\n    const socialMediaPlatform = store.getState().settings.socialMediaPlatform;\r\n\r\n    const formatted = TextFormatter.format(\r\n        fragments,\r\n        indexedPlayers,\r\n        sips,\r\n        socialMediaPlatform,\r\n        x => translator.translate(`game.textFormatter.${x}`),\r\n        selection,\r\n        { boldPlayerNames: true, boldSips: true },\r\n    );\r\n\r\n    return { formatted: formatted, players };\r\n}\r\n\r\nexport function selectText(\r\n    selection: SelectionAlgorithm,\r\n    selectedCard: TextCard,\r\n    translator: Translator,\r\n): string {\r\n    const lang = translator.languageCode;\r\n\r\n    const viableContents = selectedCard.content.filter(x =>\r\n        _.some(x.translations, y => y.lang.toLocaleLowerCase() === lang),\r\n    );\r\n    const content = selection.selectRandomWeighted(viableContents, x => x.weight)!;\r\n    return content.translations.find(x => x.lang === lang)!.content;\r\n}\r\n","import { SlidePresenter } from \"./slide-presenter\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { ReactNode } from \"react\";\r\nimport * as actions from \"../../actions\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport { CardRef } from \"@core/cards/card-ref\";\r\n\r\nexport abstract class CardPresenter<TCard extends Card> implements SlidePresenter {\r\n    abstract backgroundColor: string;\r\n    requiredCards: string[];\r\n\r\n    constructor(protected cardType: string, public slideType: string) {\r\n        this.requiredCards = [cardType];\r\n    }\r\n\r\n    initialize(): ActionType<any>[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const cardRef = selection.selectCard(this.cardType);\r\n\r\n        return [actions.applyCard(cardRef), ...this.initializeCard(cardRef.card as TCard, cardRef)];\r\n    }\r\n\r\n    initializeFollowUp(card: CardRef | null, param: any): ActionType<any>[] {\r\n        return this.initializeFollowUpCard(card!.card as TCard, param, card!);\r\n    }\r\n\r\n    abstract render(): ReactNode;\r\n    protected abstract initializeCard(card: TCard, cardRef: CardRef): ActionType<any>[];\r\n    protected abstract initializeFollowUpCard(card: TCard, param: any, cardRef: CardRef): ActionType<any>[];\r\n}\r\n","export default {\r\n    down: \"#c0392b\", //pomegrenate (red)\r\n    drink: \"#2980b9\", //belize hole (blue)\r\n    fact: \"#f39c12\", //orange\r\n    groupGame: \"#16a085\", //green sea\r\n    neverEver: \"#d35400\", //pumpkin\r\n    noIdeaLoses: \"#192a56\", //pico void (dark blue)\r\n    truthOrDare: \"#2c3e50\", //Midnight blue\r\n    virus: \"#27ae60\", //nephritis (green)\r\n    wouldYouRather: \"#00b894\", //mint leaf (purple)\r\n    task: \"#a29bfe\", //shy moment (blue)\r\n};","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { PlayerSelectionInsights } from \"@core/selection/insights\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    Button,\r\n    createStyles,\r\n    Paper,\r\n    Theme,\r\n    Typography,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport * as actions from \"../actions\";\r\nimport * as gameEngine from \"../game-engine\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { SlidePresenter } from \"./base/slide-presenter\";\r\nimport { formatText, selectText } from \"./base/text-slide-presenter\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TruthOrDareSlideState,\r\n    players: state.settings.players,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: actions.requestSlideAsync.request,\r\n    setState: actions.setSlideState,\r\n    applyCard: actions.applyCard,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            cursor: \"default\",\r\n        },\r\n        clickableRoot: {\r\n            ...getRootStyles()\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1.5rem\",\r\n            },\r\n        },\r\n        spaceHeader: {\r\n            visibility: \"hidden\",\r\n            marginTop: 15,\r\n        },\r\n        questionPaper: {\r\n            padding: theme.spacing.unit * 2,\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                padding: theme.spacing.unit * 3,\r\n                width: theme.spacing.unit * 50,\r\n            },\r\n        },\r\n        questionButtonsContainer: {\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            marginTop: theme.spacing.unit,\r\n        },\r\n    });\r\n\r\ntype MappedActions = typeof dispatchProps;\r\n\r\ntype Props = MappedActions &\r\n    ReturnType<typeof mapStateToProps> &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction QuestionComponent(props: Props) {\r\n    const { state, players, nextSlide, classes } = props;\r\n    const player = players.find(x => x.id === state.selectedPlayer);\r\n    if (player === undefined) {\r\n        nextSlide(toTranslator(props));\r\n        return <div />;\r\n    }\r\n\r\n    const select = (decision: TruthOrDare) =>\r\n        new TruthOrDareSlide(toTranslator(props)).select(decision, props, player);\r\n\r\n    const springProps = useSpring({\r\n        opacity: 1,\r\n        transform: \"scale(1, 1)\",\r\n        from: { opacity: 0, transform: \"scale(2.5, 2.5)\" },\r\n    });\r\n\r\n    return (\r\n        <animated.div style={springProps}>\r\n            <Paper className={classes.questionPaper}>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    <Translate\r\n                        id=\"slides.truthordare.playerTruthordare\"\r\n                        data={{ name: player.name }}\r\n                    />\r\n                </Typography>\r\n                <div className={classes.questionButtonsContainer}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ marginRight: 15 }}\r\n                        onClick={() => select(\"Truth\")}\r\n                    >\r\n                        <Translate id=\"slides.truthordare.truth\" />\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => select(\"Dare\")}>\r\n                        <Translate id=\"slides.truthordare.dare\" />\r\n                    </Button>\r\n                </div>\r\n            </Paper>\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nfunction DareComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <Translate id=\"slides.truthordare.truth\" /> <Translate id=\"slides.truthordare.or\" />{\" \"}\r\n            <b>\r\n                <Translate id=\"slides.truthordare.dare\" />\r\n            </b>\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <b>\r\n                <Translate id=\"slides.truthordare.truth\" />\r\n            </b>{\" \"}\r\n            <Translate id=\"slides.truthordare.or\" /> <Translate id=\"slides.truthordare.dare\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthOrDareComponent(props: Props) {\r\n    const { classes, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    if (state.isDeciding) {\r\n        return <div className={classes.root}>{QuestionComponent(props)}</div>;\r\n    }\r\n\r\n    if (state.decision === \"Dare\") {\r\n        return DareComponent(props);\r\n    } else {\r\n        return TruthComponent(props);\r\n    }\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TruthOrDareComponent) as React.ComponentType;\r\n\r\ntype TruthOrDare = \"Truth\" | \"Dare\";\r\n\r\ninterface TruthOrDareSlideState {\r\n    selectedPlayer: string;\r\n    isDeciding: boolean;\r\n    decision?: TruthOrDare;\r\n    markdownContent?: string;\r\n}\r\n\r\nexport class TruthOrDareSlide implements SlidePresenter {\r\n    backgroundColor = colors.truthOrDare;\r\n\r\n    constructor(private translator: Translator) {}\r\n\r\n    public slideType = \"TruthOrDareSlide\";\r\n    public requiredCards = [\"TaskCard\", \"QuestionCard\"];\r\n\r\n    public select(decision: TruthOrDare, actions: MappedActions, player: PlayerInfo) {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const cardType = decision === \"Dare\" ? \"TaskCard\" : \"QuestionCard\";\r\n        const cardRef = selection.selectCard(cardType);\r\n        const card = cardRef.card as TextCard;\r\n\r\n        const selectedText = selectText(selection, card, this.translator);\r\n        const text = `#### ${this.translator.translate(\r\n            \"slides.truthordare.instruction\",\r\n        )}\\n${selectedText}`;\r\n\r\n        const { formatted } = formatText(\r\n            text,\r\n            card,\r\n            [{ index: 99, player }],\r\n            selection,\r\n            this.translator,\r\n        );\r\n\r\n        actions.applyCard(cardRef);\r\n\r\n        const state: TruthOrDareSlideState = {\r\n            isDeciding: false,\r\n            selectedPlayer: player.id,\r\n            markdownContent: formatted,\r\n            decision,\r\n        };\r\n        actions.setState({ state, insights: selection.insights.playerSelection });\r\n    }\r\n\r\n    initialize(): RootAction[] {\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const player = gameEngine.selectPlayers(\r\n            selection,\r\n            [new PlayerSetting(1, \"None\")],\r\n            [],\r\n            [],\r\n        )[0].player;\r\n\r\n        return [\r\n            this.setState(\r\n                { isDeciding: true, selectedPlayer: player.id },\r\n                selection.insights.playerSelection,\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private setState(\r\n        state: TruthOrDareSlideState,\r\n        insights: PlayerSelectionInsights | null = null,\r\n    ): RootAction {\r\n        return actions.setSlideState({ state, insights });\r\n    }\r\n\r\n    initializeFollowUp(): RootAction[] {\r\n        throw new Error(\"Method not supported.\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\nimport { compose } from \"redux\";\r\nimport { DownCard } from \"src/impl/cards/down-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DownSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DownSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.down.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Spring\r\n                    config={config.wobbly}\r\n                    from={{ transform: \"translate(-100px, 0px)\" }}\r\n                    to={{ transform: \"translate(0px, 0px)\" }}\r\n                >\r\n                    {props => (\r\n                        <div style={props as any}>\r\n                            {header}\r\n                            <Markdown\r\n                                children={state.markdownContent}\r\n                                options={defaultMarkdownOptions}\r\n                            />\r\n                            <div className={classes.spaceHeader}>{header}</div>\r\n                        </div>\r\n                    )}\r\n                </Spring>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(DownSlideComponent) as React.ComponentType;\r\n\r\ninterface DownSlideState extends TextSlideState {}\r\nexport class DownSlide extends TextSlidePresenter<DownSlideState, DownCard> {\r\n    backgroundColor = colors.down;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DownCard\", \"DownSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { FactCard } from \"src/impl/cards/fact-card\";\r\nimport * as actions from \"../actions\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { CardRef } from \"@core/cards/card-ref\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as FactSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction FactSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id={`slides.fact.title${state.isFollowUp ? (state.isTrue ? \".true\" : \".false\") : \"\"}`} />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface FactSlideFollowUpParam {\r\n    mode: FactSlideMode;\r\n    players: SelectedPlayer[];\r\n    isTrue: boolean;\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize\r\n)(FactSlideComponent) as React.ComponentType;\r\n\r\ntype FactSlideMode = \"singleplayer\" | \"multiplayer\";\r\nconst availableFactSlideModes: FactSlideMode[] = [\"singleplayer\", \"multiplayer\"];\r\n\r\ninterface FactSlideState extends TextSlideState {\r\n    isFollowUp: boolean;\r\n    mode: FactSlideMode;\r\n    isTrue: boolean;\r\n}\r\n\r\nexport class FactSlide extends TextSlidePresenter<FactSlideState, FactCard> {\r\n    private selectedMode: FactSlideMode;\r\n    private players?: SelectedPlayer[];\r\n    backgroundColor = colors.fact;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"FactCard\", \"FactSlide\");\r\n\r\n        this.selectedMode =\r\n            availableFactSlideModes[Math.floor(availableFactSlideModes.length * Math.random())];\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        const cardText = super.selectText(selection, selectedCard);\r\n        const instruction = this.translator.translate(`slides.fact.${this.selectedMode}`);\r\n\r\n        return `#### ${instruction}\\n${cardText}`;\r\n    }\r\n\r\n    selectFollowUpText(\r\n        _selection: SelectionAlgorithm,\r\n        selectedCard: FactCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const { mode, players } = param as FactSlideFollowUpParam;\r\n        const { isTrueFact } = selectedCard;\r\n\r\n        const text = this.translator.translate(`slides.fact.${mode}.${isTrueFact}`);\r\n        return { text, players };\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        card: FactCard,\r\n        players: SelectedPlayer[],\r\n    ): FactSlideState {\r\n        this.players = players;\r\n\r\n        return {\r\n            isFollowUp: false,\r\n            markdownContent: markdownContent,\r\n            mode: this.selectedMode,\r\n            isTrue: card.isTrueFact,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string, card: FactCard,  param: any): FactSlideState {\r\n        const { mode } = param as FactSlideFollowUpParam;\r\n        return {\r\n            isFollowUp: true,\r\n            markdownContent: markdownContent,\r\n            mode,\r\n            isTrue: card.isTrueFact,\r\n        };\r\n    }\r\n\r\n    protected initializeCard(card: FactCard, cardRef: CardRef): RootAction[] {\r\n        return [...super.initializeCard(card, cardRef), actions.enqueueFollowUp({\r\n            due: new Date(),\r\n            selectedCard: cardRef,\r\n            slideType: \"FactSlide\",\r\n            param: {\r\n                mode: this.selectedMode,\r\n                players: this.players,\r\n            } as FactSlideFollowUpParam,\r\n        })];\r\n    }\r\n}\r\n","import { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport {\r\n    getRootStyles,\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { ReactNode } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStyles, Theme, WithStyles, Typography, withStyles } from \"@material-ui/core\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { NeverEverCard } from \"src/impl/cards/never-ever-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as State,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NeverEverComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h5\">\r\n            <Translate id=\"slides.neverever.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    const springProps = useSpring({\r\n        opacity: 1,\r\n        transform: \"rotate(0deg)\",\r\n        from: { opacity: 0, transform: \"rotate(20deg)\" },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <animated.div style={springProps} className={classes.content}>\r\n                {header}\r\n                <Typography variant=\"h5\" className={classes.instruction}>\r\n                    <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                </Typography>\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.neverever.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </animated.div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NeverEverComponent) as React.ComponentType;\r\n\r\ninterface State extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class NeverEverSlide extends TextSlidePresenter<State, NeverEverCard> {\r\n    backgroundColor = colors.neverEver;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NeverEverCard\", \"NeverEverSlide\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: NeverEverCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2), // at least two sips so the text can be plural\r\n        };\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator, SelectedPlayer } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WouldYouRatherCard } from \"src/impl/cards/would-you-rather-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as WouldYouRatherSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction WouldYouRatherSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.wouldyourather.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.wouldyourather.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(WouldYouRatherSlideComponent) as React.ComponentType;\r\n\r\ninterface WouldYouRatherSlideState extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class WouldYouRatherSlide extends TextSlidePresenter<\r\n    WouldYouRatherSlideState,\r\n    WouldYouRatherCard\r\n> {\r\n    backgroundColor = colors.wouldYouRather;\r\n    constructor(translator: Translator) {\r\n        super(translator, \"WyrCard\", \"WouldYouRatherSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: WouldYouRatherCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): WouldYouRatherSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2), // at least two sips so the text can be plural\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): WouldYouRatherSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { DrinkCard } from \"src/impl/cards/drink-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DrinkSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DrinkSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(DrinkSlideComponent) as React.ComponentType;\r\n\r\ninterface DrinkSlideState extends TextSlideState {}\r\nexport class DrinkSlide extends TextSlidePresenter<DrinkSlideState, DrinkCard> {\r\n    backgroundColor = colors.drink;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DrinkCard\", \"DrinkSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DrinkSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DrinkSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { VirusCard } from \"src/impl/cards/virus-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as VirusSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction VirusSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.virus.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(VirusSlideComponent) as React.ComponentType;\r\n\r\ninterface VirusSlideState extends TextSlideState {}\r\nexport class VirusSlide extends TextSlidePresenter<VirusSlideState, VirusCard> {\r\n    backgroundColor = colors.virus;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"VirusCard\", \"VirusSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): VirusSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): VirusSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { NoIdeaLosesCard } from \"src/impl/cards/no-idea-loses-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as NoIdeaLosesSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NoIdeaLosesSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NoIdeaLosesSlideComponent) as React.ComponentType;\r\n\r\ninterface NoIdeaLosesSlideState extends TextSlideState {}\r\nexport class NoIdeaLosesSlide extends TextSlidePresenter<NoIdeaLosesSlideState, NoIdeaLosesCard> {\r\n    backgroundColor = colors.noIdeaLoses;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NoIdeaLosesCard\", \"NoIdeaLosesSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): NoIdeaLosesSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): NoIdeaLosesSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { GroupGameCard } from \"src/impl/cards/group-game-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as GroupGameSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction GroupGameSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.groupgame.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(GroupGameSlideComponent) as React.ComponentType;\r\n\r\ninterface GroupGameSlideState extends TextSlideState {}\r\nexport class GroupGameSlide extends TextSlidePresenter<GroupGameSlideState, GroupGameCard> {\r\n    backgroundColor = colors.groupGame;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"GroupGameCard\", \"GroupGameSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): GroupGameSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): GroupGameSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { TaskCard } from \"src/impl/cards/task-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TaskSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction TaskSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.task.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TaskSlideComponent) as React.ComponentType;\r\n\r\ninterface TaskSlideState extends TextSlideState {}\r\nexport class TaskSlide extends TextSlidePresenter<TaskSlideState, TaskCard> {\r\n    backgroundColor = colors.task;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"TaskCard\", \"TaskSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        let task = super.selectText(selection, selectedCard);\r\n        if (/[A-Z-a-z]$/g.test(task)) {\r\n            task = task + \".\";\r\n        }\r\n\r\n        return \"[Player99]: \" + task + \" \" + this.translator.translate(\"slides.task.instruction\");\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): TaskSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): TaskSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { TruthOrDareSlide } from './slides/TruthOrDareSlide';\r\nimport { DownSlide } from \"./slides/DownSlide\";\r\nimport { SlidePresenter } from \"./slides/base/slide-presenter\";\r\nimport { FactSlide } from \"./slides/FactSlide\";\r\nimport { NeverEverSlide } from \"./slides/NeverEverSlide\";\r\nimport { Translator } from \"GameModels\";\r\nimport { WouldYouRatherSlide } from './slides/WouldYouRatherSlide';\r\nimport { DrinkSlide } from './slides/DrinkSlide';\r\nimport { VirusSlide } from './slides/VirusSlide';\r\nimport { NoIdeaLosesSlide } from './slides/NoIdeaLosesSlide';\r\nimport { GroupGameSlide } from './slides/GroupGameSlide';\r\nimport { TaskSlide } from './slides/TaskSlide';\r\n\r\nexport type SlideComponents = { [type: string]: new(translator: Translator) => SlidePresenter };\r\n\r\nexport const slideComponents: SlideComponents = {\r\n    DownSlide,\r\n    FactSlide,\r\n    NeverEverSlide,\r\n    TruthOrDareSlide,\r\n    WouldYouRatherSlide,\r\n    DrinkSlide,\r\n    VirusSlide,\r\n    NoIdeaLosesSlide,\r\n    GroupGameSlide,\r\n    TaskSlide,\r\n};\r\n","import { MelinaAlgorithm } from \"./../../core/selection/melina-algorithm\";\r\nimport { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { filter, mergeMap, tap, ignoreElements } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../store/index\";\r\nimport * as actions from \"./actions\";\r\nimport { getRandomSelectionAlgorithm } from \"./game-engine\";\r\nimport { slideComponents } from \"./component-registry\";\r\nimport { of } from \"rxjs\";\r\nimport { Translator } from \"GameModels\";\r\nimport { getSlideRegistrations } from \"./slides-processor\";\r\n\r\nexport const nextSlideEpic: Epic<RootAction, RootAction, RootState, Services> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.requestSlideAsync.request)),\r\n        mergeMap(x => of(...nextSlide(x.payload))),\r\n    );\r\n\r\nexport const redirectOnGameStartedEpic: Epic<\r\n    RootAction,\r\n    RootAction,\r\n    RootState,\r\n    Services\r\n> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.startGame)),\r\n        tap(action => action.payload.push(\"/game\")),\r\n        ignoreElements(),\r\n    );\r\n\r\nfunction nextSlide(translator: Translator): RootAction[] {\r\n    const now = new Date();\r\n    let state = store.getState();\r\n\r\n    const dueFollowUps = state.game.followUp.filter(x => x.due < now);\r\n    if (dueFollowUps.length > 0) {\r\n        const followUp = _.sortBy(dueFollowUps, x => x.due.getSeconds())[0];\r\n\r\n        const factory = slideComponents[followUp.slideType];\r\n        const slideInitalizer = new factory(translator);\r\n        const slideActions = slideInitalizer.initializeFollowUp(\r\n            followUp.selectedCard,\r\n            followUp.param,\r\n        );\r\n\r\n        return [actions.activateFollowUp(followUp), ...slideActions];\r\n    }\r\n\r\n    let selection = getRandomSelectionAlgorithm(state);\r\n    const slides = getSlideRegistrations(slideComponents);\r\n\r\n    const { willPower, memory } = selection.recomputeWillPower(state.game.willPowerMemory);\r\n    const willPowerActions = new Array<RootAction>();\r\n\r\n    if (willPower !== state.game.currentWillPower) {\r\n        if (!state.game.isWillPowerLocked) {\r\n            willPowerActions.push(actions.setWillPower(willPower));\r\n            state = { ...state, game: { ...state.game, currentWillPower: willPower } };\r\n            selection = getRandomSelectionAlgorithm(state);\r\n        }\r\n    }\r\n\r\n    if (memory.length > 0) {\r\n        willPowerActions.push(actions.addWillPowerMemory(memory));\r\n    }\r\n\r\n    const slideType = selection.selectNextSlide(slides);\r\n    if (slideType === undefined) {\r\n        // TODO: end game\r\n        throw new Error(\"Game Finished\");\r\n    }\r\n\r\n    const factory = slideComponents[slideType];\r\n    const slideInitalizer = new factory(translator);\r\n    const slideActions = slideInitalizer.initialize();\r\n\r\n    return [\r\n        actions.requestSlideAsync.success({\r\n            slide: slideType,\r\n            insights: (selection as MelinaAlgorithm).insights.slideWeights!,\r\n        }),\r\n        ...slideActions,\r\n        ...willPowerActions\r\n    ];\r\n}\r\n","import { SlideComponents } from \"./component-registry\";\r\nimport { SlideRegistration } from \"@core/slide-registration\";\r\n\r\nexport function getSlideRegistrations(components: SlideComponents): SlideRegistration[] {\r\n    const result = new Array<SlideRegistration>();\r\n\r\n    for (const component in components) {\r\n        if (components.hasOwnProperty(component)) {\r\n            const element = components[component];\r\n            const slide = new element({ languageCode: \"en\", translate: () => \"\" });\r\n            result.push({ slideType: slide.slideType, requestedCards: slide.requiredCards });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { combineEpics } from \"redux-observable\";\r\nimport * as settingsEpics from \"../features/settings/epics\";\r\nimport * as gameEpics from \"../features/game/epics\";\r\n\r\nexport default combineEpics(...Object.values(settingsEpics), ...Object.values(gameEpics));\r\n","import { compose } from \"redux\";\r\n\r\n// @ts-ignore\r\nexport const composeEnhancers =\r\n    (process.env.NODE_ENV === \"development\" &&\r\n        window &&\r\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n","import { PlayerSelectionInsights, SlideSelectionInsights } from './../../core/selection/insights';\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport * as actions from \"./actions\";\r\nimport { FollowUpSlide } from \"GameModels\";\r\nimport cuid from 'cuid';\r\nimport { CardRef } from '@core/cards/card-ref';\r\n\r\nexport type GameState = Readonly<{\r\n    isStarted: boolean;\r\n\r\n    selectedSlide: string | null;\r\n    selectedCard: CardRef | null;\r\n\r\n    slideState: any | null;\r\n\r\n    currentWillPower: number;\r\n    isWillPowerLocked: boolean;\r\n    willPowerMemory: string[];\r\n\r\n    playerInsights: PlayerSelectionInsights | null;\r\n    slideInsights: SlideSelectionInsights | null;\r\n\r\n    startTime: Date | null;\r\n\r\n    cardsHistory: CardRef[];\r\n    slidesHistory: string[];\r\n    followUp: FollowUpSlide[];\r\n    activeFollowUp: FollowUpSlide | null;\r\n    currentSlideStatus: string;\r\n}>;\r\n\r\nexport default combineReducers<GameState, RootAction>({\r\n    cardsHistory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return [action.payload, ...state];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slidesHistory: (state = [], action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return [action.payload.slide, ...state];\r\n        }\r\n        return state;\r\n    },\r\n    isStarted: (state = false, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.startGame):\r\n                return true;\r\n            case getType(actions.cancelGame):\r\n                return false;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    selectedCard: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return action.payload;\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.selectedCard;\r\n        }\r\n        return state;\r\n    },\r\n    selectedSlide: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return action.payload.slide;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.slideType;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slideState: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n            case getType(actions.activateFollowUp):\r\n                return null;\r\n            case getType(actions.setSlideState):\r\n                return action.payload.state;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    followUp: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.enqueueFollowUp):\r\n                return [...state, action.payload];\r\n            case getType(actions.activateFollowUp):\r\n                return state.filter(x => x.due !== action.payload.due);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    activeFollowUp: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    startTime: (state = null, action) => {\r\n        if (action.type === getType(actions.startGame)) {\r\n            return new Date();\r\n        }\r\n        return state;\r\n    },\r\n    isWillPowerLocked: (state = false, action) => {\r\n        if (action.type === getType(actions.setWillPowerLocked)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentWillPower: (state = 1, action) => {\r\n        if (action.type === getType(actions.setWillPower)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    willPowerMemory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addWillPowerMemory):\r\n                return [...state, ...action.payload];\r\n            case getType(actions.startGame):\r\n                return [];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    playerInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.setSlideState)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    slideInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentSlideStatus: (state = \"\", action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return cuid();\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport { PlayerArrangement } from \"@core/player-arrangement\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport * as actions from \"./actions\";\r\nimport { slideWeights } from \"../../preferences\";\r\nimport _ from \"lodash\";\r\n\r\nexport type SettingsState = Readonly<{\r\n    players: PlayerInfo[];\r\n    arrangements: PlayerArrangement[];\r\n    preferOppositeGenders: boolean;\r\n    slides: Array<Weighted<string>>;\r\n    socialMediaPlatform: string;\r\n    sources: SourceInfo[];\r\n    tags: Array<Weighted<string>>;\r\n}>;\r\n\r\nexport default combineReducers<SettingsState, RootAction>({\r\n    players: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayer):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayer):\r\n                return state.filter(x => x.id !== action.payload);\r\n            case getType(actions.updatePlayer):\r\n                return state.map(player =>\r\n                    player.id === action.payload.id ? action.payload : player,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    sources: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addSource):\r\n                return [...state, action.payload];\r\n            case getType(actions.removeSource):\r\n                return state.filter(x => x.url !== action.payload);\r\n            case getType(actions.loadSourceAsync.request):\r\n                return state.map(item =>\r\n                    item.url === action.payload ? { ...item, isLoading: true } : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.success):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? {\r\n                              ...item,\r\n                              cards: action.payload.cards,\r\n                              errorMessage: undefined,\r\n                              isLoading: false,\r\n                              tags: _.uniq(_.flatten(action.payload.cards.map(x => x.tags)).map(x => (x as string).toLowerCase()))\r\n                          }\r\n                        : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.failure):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? { ...item, isLoading: false, errorMessage: action.payload.message }\r\n                        : item,\r\n                );\r\n            case getType(actions.setSourceWeight):\r\n                return state.map(item =>\r\n                    item.url === action.payload.value\r\n                        ? { ...item, weight: action.payload.weight }\r\n                        : item,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    arrangements: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayerArrangment):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayerArrangment):\r\n                return state.filter(x => x.p1 !== action.payload);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    preferOppositeGenders: (state = true, action) => {\r\n        if (action.type === getType(actions.setPreferOppositeGenders)) {\r\n            return action.payload;\r\n        }\r\n        return state;\r\n    },\r\n    slides: (state = GetSlideWeightedArray(), action) => {\r\n        switch (action.type) {\r\n            case getType(actions.setSlideWeight):\r\n                return state.map(x => (x.value === action.payload.value ? action.payload : x));\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    socialMediaPlatform: (state = \"Snapchat\", action) => {\r\n        if (action.type === getType(actions.setSocialMediaPlatform)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    tags: (state = [], action) => {\r\n        if (action.type === getType(actions.setTagWeight)) {\r\n            const value = action.payload.value.toLowerCase();\r\n            const existingTag = state.find(x => x.value === value);\r\n            if (existingTag !== undefined) {\r\n                return state.map(x => x.value === value ? {value, weight: action.payload.weight} : x);\r\n            } else {\r\n                return [...state, action.payload];\r\n            }\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n\r\nfunction GetSlideWeightedArray() {\r\n    const weightsList: Weighted<string>[] = [];\r\n    for (const key in slideWeights) {\r\n        if (slideWeights.hasOwnProperty(key)) {\r\n            const element = slideWeights[key];\r\n            weightsList.push({ value: key, weight: element });\r\n        }\r\n    }\r\n\r\n    return weightsList;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"../features/game/reducer\";\r\nimport settingsReducer from \"../features/settings/reducer\";\r\nimport { localizeReducer } from \"react-localize-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    game: gameReducer,\r\n    settings: settingsReducer,\r\n    localize: localizeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport services from \"../services\";\r\nimport rootEpic from \"./root-epic\";\r\nimport { composeEnhancers } from \"./utils\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nexport const epicMiddleware = createEpicMiddleware<RootAction, RootAction, RootState, Services>({\r\n    dependencies: services,\r\n});\r\n\r\n// configure middlewares\r\nconst middlewares = [epicMiddleware];\r\n\r\n// compose enchancers\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n// rehydrate state on app start\r\nconst initialState = {};\r\n\r\n// create store\r\nconst store = createStore(rootReducer, initialState, enhancer);\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\n// export store singleton instance\r\nexport default store;\r\n","import { CardDeck } from \"@core/card-deck\";\r\nimport { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GameStatus } from \"@core/game-status\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer } from \"GameModels\";\r\nimport seedrandom from \"seedrandom\";\r\nimport store from \"../../store\";\r\n\r\nexport function selectPlayers(\r\n    selection: SelectionAlgorithm,\r\n    players: PlayerSetting[],\r\n    predefined: SelectedPlayer[],\r\n    tags: string[],\r\n): SelectedPlayer[] {\r\n    const result = selection.selectPlayers(\r\n        players.map(x => x.gender),\r\n        players.map(x => {\r\n            const p = predefined.find(y => y.index === x.playerIndex);\r\n            if (p === undefined) {\r\n                return null;\r\n            }\r\n\r\n            return p.player;\r\n        }),\r\n        tags,\r\n    );\r\n    const selected = result.map((x, i) => ({ index: players[i].playerIndex, player: x }));\r\n\r\n    return selected;\r\n}\r\n\r\nexport function getRandomSelectionAlgorithm(state?: RootState): SelectionAlgorithm {\r\n    if (state === undefined) {\r\n        state = store.getState();\r\n    }\r\n\r\n    const random = seedrandom();\r\n    return new MelinaAlgorithm(extractGameStatus(state), random);\r\n}\r\n\r\nfunction extractGameStatus(state: RootState): GameStatus {\r\n    const currentStatus: GameStatus = {\r\n        decks: state.settings.sources\r\n            .filter(x => x.cards !== undefined)\r\n            .map(item => {\r\n                const result: CardDeck = { ...item, cards: item.cards || [] };\r\n                return result;\r\n            }),\r\n        cardsHistory: state.game.cardsHistory,\r\n        language: state.localize.languages.find(x => x.active)!.code,\r\n        players: state.settings.players,\r\n        slides: state.settings.slides,\r\n        tags: state.settings.tags,\r\n        arrangements: state.settings.arrangements,\r\n        preferOppositeGenders: state.settings.preferOppositeGenders,\r\n        slidesHistory: state.game.slidesHistory,\r\n        startTime: state.game.startTime!,\r\n        willPower: state.game.currentWillPower,\r\n    };\r\n\r\n    return currentStatus;\r\n}\r\n","import { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    createStyles,\r\n    Typography,\r\n    withStyles,\r\n    WithStyles,\r\n    FormControl,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\nimport { toFixedEnd } from \"@utils/string-extensions\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Cell,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from \"recharts\";\r\nimport { compose } from \"redux\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { parsers } from \"../../../impl/registrations\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n});\r\n\r\nconst styles = createStyles({\r\n    chart: {\r\n        width: 200,\r\n        height: 300,\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles> & LocalizeContextProps;\r\ntype State = { selectedCardType: string | null };\r\n\r\nclass InsightsCards extends Component<Props, State> {\r\n    readonly state = { selectedCardType: null };\r\n\r\n    setSelectedCardType = (type: string) => {\r\n        this.setState({ selectedCardType: type === \"\" ? null : type });\r\n    };\r\n\r\n    render() {\r\n        const { translate, currentWillPower } = this.props;\r\n        const { selectedCardType } = this.state;\r\n\r\n        const cardTypes = [\"\", ...Object.keys(parsers)];\r\n\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const insights = selection.getAllCardDeckStatistics(selectedCardType);\r\n\r\n        const decksStatistics = percentageFixedTotal(insights.decks, x => x.weight, 1000).map(\r\n            x => ({\r\n                value: x.part / 10,\r\n                name: x.value.value.url,\r\n            }),\r\n        );\r\n\r\n        const willPowerStatistics = percentageFixedTotal(\r\n            insights.willPower,\r\n            x => x.weight,\r\n            1000,\r\n        ).map(x => ({\r\n            value: x.part / 10,\r\n            name: x.value.value.willPower || translate(\"insights.universal\"),\r\n            info: x.value.value,\r\n        }));\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.cardsDist\" />\r\n                </Typography>\r\n                <Grid container alignItems=\"flex-end\" spacing={16}>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select\r\n                                style={{ width: 200, marginTop: 10 }}\r\n                                value={selectedCardType || \"\"}\r\n                                displayEmpty={true}\r\n                                renderValue={x => x || translate(\"insights.allCards\")}\r\n                                onChange={ev => this.setSelectedCardType(ev.target.value)}\r\n                                input={<Input />}\r\n                            >\r\n                                {cardTypes.map(x => (\r\n                                    <MenuItem key={x} value={x}>\r\n                                        {x || translate(\"insights.allCards\")}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>{`${translate(\"insights.cards\")}: ${insights.totalCards}`}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <BarChart data={decksStatistics}>\r\n                        <CartesianGrid />\r\n                        <XAxis dataKey=\"name\" tickFormatter={x => toFixedEnd(x, 18)} />\r\n                        <YAxis tickFormatter={x => x + \"%\"} />\r\n                        <Tooltip\r\n                            formatter={x => x + \"%\"}\r\n                            labelFormatter={url =>\r\n                                translate(\"insights.cardDeckName\", {\r\n                                    url,\r\n                                    cards: insights.decks.find(x => x.value.url === url)!.value\r\n                                        .cards.length,\r\n                                })\r\n                            }\r\n                        />\r\n                        <Bar\r\n                            name={translate(\"insights.part\") as string}\r\n                            dataKey=\"value\"\r\n                            fill=\"#8884d8\"\r\n                            maxBarSize={20}\r\n                        />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.willPowerDist\" />\r\n                </Typography>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <BarChart data={willPowerStatistics}>\r\n                        <CartesianGrid />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis tickFormatter={x => x + \"%\"} />\r\n                        <Tooltip\r\n                            formatter={(x, _, e) =>\r\n                                `${x}% (${e.payload.info.count} ${translate(\"insights.cards\")})`\r\n                            }\r\n                        />\r\n                        <Bar\r\n                            dataKey=\"value\"\r\n                            maxBarSize={20}\r\n                            name={translate(\"insights.part\") as string}\r\n                        >\r\n                            {willPowerStatistics.map((entry, index) => (\r\n                                <Cell\r\n                                    fill={\r\n                                        entry.info.willPower === currentWillPower\r\n                                            ? \"#e74c3c\"\r\n                                            : \"#8884d8\"\r\n                                    }\r\n                                    key={index}\r\n                                />\r\n                            ))}\r\n                        </Bar>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(InsightsCards) as React.ComponentType;\r\n","export function toFixedEnd(s: string, length: number) {\r\n    if (length > s.length) {\r\n        return s;\r\n    }\r\n\r\n    return \"..\" + s.substring(s.length - length - 2, s.length);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InsightsCurrentSlide from \"./InsightsCurrentSlide\";\r\nimport InsightsWillPowerView from \"./InsightsWillPowerView\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport InsightsCards from \"./InsightsCards\";\r\n\r\nexport default class InsightsView extends Component {\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <InsightsWillPowerView />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 10}}>\r\n                    <InsightsCurrentSlide />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 20}}>\r\n                    <InsightsCards />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport {\r\n    AppBar,\r\n    Slide,\r\n    createStyles,\r\n    WithStyles,\r\n    withStyles,\r\n    Toolbar,\r\n    Button,\r\n    Typography,\r\n    Theme,\r\n} from \"@material-ui/core\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\nimport { withRouter, RouterProps } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport InsightsView from \"./InsightsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        margin: theme.spacing.unit,\r\n        overflowY: \"auto\",\r\n        overflowX: \"hidden\",\r\n    },\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction InsightsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.insights\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <InsightsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(InsightsDialog) as React.ComponentType;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { slideComponents } from \"../component-registry\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & LocalizeContextProps;\r\n\r\nfunction SlideWrapper(props: Props) {\r\n    const { selectedSlide } = props;\r\n\r\n    if (selectedSlide === null) {\r\n        return <Typography variant=\"h3\">Loading game...</Typography>;\r\n    }\r\n\r\n    const factory = slideComponents[selectedSlide];\r\n    const slideInitalizer = new factory(toTranslator(props));\r\n    const springProps = useSpring({backgroundColor: slideInitalizer.backgroundColor, height: \"100%\"});\r\n\r\n    return <animated.div style={springProps}>{slideInitalizer.render()}</animated.div>;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n)(SlideWrapper) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport GameOptions from \"./GameOptions\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport SettingsDialog from \"./SettingsDialog\";\r\nimport InsightsDialog from \"./InsightsDialog\";\r\nimport SlideWrapper from \"./SlideWrapper\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { RootState } from \"DrinctetTypes\";\r\n\r\nconst dispatchProps = {\r\n    requestSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    current: state.game.currentSlideStatus,\r\n});\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps & ReturnType<typeof mapStateToProps>;\r\n\r\nclass GameComponent extends Component<Props> {\r\n    public componentDidMount() {\r\n        this.props.requestSlide(toTranslator(this.props));\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\", position: \"relative\", overflow: \"hidden\" }}>\r\n                <SlideWrapper />\r\n                <div style={{ top: 10, right: 10, position: \"absolute\" }}>\r\n                    <GameOptions />\r\n                </div>\r\n                <Switch>\r\n                    <Route path=\"/game/settings\" component={SettingsDialog} />\r\n                    <Route path=\"/game/insights\" component={InsightsDialog} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n)(GameComponent) as React.ComponentType;\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\r\nimport WelcomeView from \"./features/welcome/components/WelcomeView\";\r\nimport GameComponent from \"./features/game/components/GameComponent\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    isStarted: state.game.isStarted,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction App({ isStarted }: Props) {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={WelcomeView} />\r\n                <Route\r\n                    path=\"/game\"\r\n                    render={() => (!isStarted ? <Redirect to=\"/\" /> : (<GameComponent />))}\r\n                />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"tslib\";\r\nimport \"typeface-roboto\";\r\nimport App from \"./App\";\r\nimport \"./env\";\r\nimport { addPlayer, addSource, loadSourceAsync } from \"./features/settings/actions\";\r\nimport \"./index.css\";\r\nimport store from \"./store\";\r\nimport { initialize, LocalizeProvider, NamedLanguage } from \"react-localize-redux\";\r\nimport drinctetTranslations from \"./loc/drinctet.json\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { defaultSources } from \"./preferences\";\r\n\r\nfor (const src of defaultSources) {\r\n    store.dispatch(addSource(src));\r\n    store.dispatch(loadSourceAsync.request(src));\r\n}\r\n\r\nstore.dispatch(addPlayer({ name: \"Vincent\", gender: \"Male\" }));\r\nstore.dispatch(addPlayer({ name: \"Melina\", gender: \"Female\" }));\r\nstore.dispatch(addPlayer({ name: \"Bursod\", gender: \"Male\" }));\r\nstore.dispatch(addPlayer({ name: \"Larny\", gender: \"Female\" }));\r\nstore.dispatch(addPlayer({ name: \"Sven\", gender: \"Male\" }));\r\nstore.dispatch(addPlayer({ name: \"Hufeld\", gender: \"Male\" }));\r\n\r\nvar userLang = (navigator.language || ((navigator as any).userLanguage as string) || \"en\").split(\r\n    \"-\",\r\n)[0];\r\n\r\nconst languages: NamedLanguage[] = [\r\n    { code: \"en\", name: \"English\" },\r\n    { code: \"de\", name: \"Deutsch\" },\r\n];\r\nstore.dispatch(\r\n    initialize({\r\n        languages,\r\n        translation: drinctetTranslations,\r\n        options: { renderToStaticMarkup, defaultLanguage: userLang },\r\n    }),\r\n);\r\n\r\nconst Root = () => (\r\n    <div style={{ height: \"100%\" }}>\r\n        <Provider store={store}>\r\n            <LocalizeProvider store={store}>\r\n                <App />\r\n            </LocalizeProvider>\r\n        </Provider>\r\n    </div>\r\n);\r\n\r\nrender(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}