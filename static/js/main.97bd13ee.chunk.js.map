{"version":3,"sources":["env.ts","features/settings/actions.ts","features/settings/components/AddPlayerForm.tsx","core/player-info.ts","features/settings/selectors.ts","features/settings/components/PlayerListItem.tsx","features/settings/components/PlayerList.tsx","features/settings/components/AddSourceForm.tsx","features/settings/components/SourcesListItem.tsx","features/settings/components/SourcesList.tsx","features/settings/components/configuration/ChangeLanguage.tsx","features/settings/components/configuration/PlayerSettings.tsx","preferences.ts","features/settings/components/configuration/SocialMediaPlatform.tsx","features/settings/components/configuration/ItemPreferences.tsx","utils/statistics.ts","features/settings/components/configuration/SlidePreferences.tsx","features/settings/components/configuration/TagsPerferences.tsx","features/settings/components/Configuration.tsx","features/settings/components/SettingsView.tsx","features/welcome/components/DrinctetHeader.tsx","features/game/actions.ts","features/welcome/components/StartButton.tsx","features/welcome/components/WelcomeView.tsx","features/game/components/GameOptions.tsx","features/game/components/SettingsDialog.tsx","features/game/components/InsightsCurrentSlide.tsx","features/game/components/InsightsWillPowerView.tsx","core/selection/utils.ts","core/selection/selection-algorithm-base.ts","core/selection/insights.ts","core/selection/melina-algorithm.ts","core/cards-loader.ts","core/cards/player-setting.ts","core/parsing/parser-helper.ts","core/parsing/base-card-parser.ts","core/cards/text-element.ts","core/cards/text-translation.ts","core/parsing/text-content-parser.ts","core/parsing/text-card-parser.ts","core/cards/text-card.ts","core/cards/base-card.ts","impl/cards/fact-card.ts","impl/parsing/fact-card-parser.ts","impl/cards/down-card.ts","impl/parsing/down-card-parser.ts","impl/cards/never-ever-card.ts","impl/parsing/never-ever-card-parser.ts","impl/cards/joke-card.ts","impl/parsing/joke-card-parser.ts","impl/cards/question-card.ts","impl/parsing/question-card-parser.ts","impl/cards/task-card.ts","impl/registrations.tsx","impl/parsing/task-card-parser.ts","services/api/cards-loader.ts","impl/default-card-parser-factory.ts","services/index.ts","features/settings/epics.ts","features/game/utils.ts","features/game/slides/base/helper.tsx","features/game/slides/base/card-presenter.ts","core/text-fragment.ts","core/fragments/random-text-fragment.ts","core/fragments/variable-fragment.ts","core/fragments/sips-fragment.ts","core/fragments/player-reference-fragment.ts","core/fragments/raw-text-fragment.ts","core/fragments/random-number-fragment.ts","core/fragments/gender-based-selection-fragment.ts","core/parsing/text-decoder/default-text-decoder.ts","core/parsing/text-decoder/text-decoder-consts.ts","features/game/formatter/text-formatter.ts","features/game/slides/base/text-slide-presenter.ts","features/game/slides/TruthOrDareSlide.tsx","features/game/slides/DownSlide.tsx","features/game/slides/FactSlide.tsx","features/game/slides/NeverEverSlide.tsx","features/game/component-registry.ts","features/game/epics.ts","features/game/slides-processor.ts","store/root-epic.ts","store/utils.ts","features/game/reducer.ts","features/settings/reducer.ts","store/root-reducer.ts","store/index.ts","features/game/game-engine.ts","features/game/components/InsightsCards.tsx","utils/string-extensions.ts","features/game/components/InsightsView.tsx","features/game/components/InsightsDialog.tsx","features/game/components/SlideWrapper.tsx","features/game/components/GameComponent.tsx","App.tsx","index.tsx"],"names":["process","LOCAL_STORAGE_VERSION","addPlayer","createStandardAction","map","playerInfo","payload","name","gender","id","cuid","updatePlayer","removePlayer","addSource","url","isLoading","errorMessage","undefined","cards","weight","tags","removeSource","loadSourceAsync","createAsyncAction","setSourceWeight","setPreferOppositeGenders","addPlayerArrangment","removePlayerArrangment","setSocialMediaPlatform","setSlideWeight","setTagWeight","dispatchProps","AddPlayerForm","state","handlePlayerNameChange","ev","_this","setState","currentTarget","value","handleAddClick","endsWith","props","handleFormKeyDown","e","key","preventDefault","this","translate","react","onKeyDown","style","display","Input_default","a","flexGrow","type","placeholder","onChange","Button_default","marginLeft","disabled","onClick","react_localize_redux_es","React","connect","withLocalize","PlayerInfo","Object","classCallCheck","getPlayers","players","getSources","sources","getIconButtonStyle","margin","width","height","PlayerListItem","_ref","onRemoveClick","onSwapGenderClick","onNameChanged","react_default","createElement","IconButton_default","aria-label","objectSpread","marginRight","index_es","react_fontawesome_index_es","icon","faMars","faVenus","error","onBlur","tabIndex","Delete_default","fontSize","selectors","settings","List_default","player","ListItem_default","components_PlayerListItem","loadSource","request","AddSourceForm","handleUrlChange","findIndex","x","_this2","sourceExists","LoadingItem","LoadingFailedItem","onReloadClick","color","variant","component","concat","WeightSlider","_ref2","onChangeWeight","lab_index_es","max","min","step","padding","_","n","withStyles","theme","createStyles","root","backgroundColor","palette","background","paper","title","textOverflow","wordBreak","overflow","fullWidth","withTheme","_ref3","classes","cardsCount","badgeContent","className","showZero","avatar","checked","b","titleTypographyProps","action","subheader","source","components_SourcesListItem","length","activeLanguage","languages","setActiveLanguage","container","item","xs","sm","md","lg","htmlFor","inputProps","code","target","lang","preferOppositeGenders","arrangements","section","marginTop","arrangmentItem","borderBottom","paddingBottom","arrangementSelect","defineProperty","breakpoints","down","control","c","label","filter","p2","arrangment","find","p1","arrangedPlayerId","alignItems","input","y","socialMediaPlatforms","slideWeights","FactSlide","DownSlide","NeverEverSlide","TruthOrDareSlide","higherArrangementPropabilityTags","platform","socialMediaPlatform","gutterBottom","ItemPreferences","_this$props","items","opacity","v","percentageFixedTotal","values","getPercentage","percentageValues","percent","total","reduce","result","Array","sum","prevBaseline","i","_percentageValues$i","sumRounded","Math","round","push","part","slides","slidePercentages","configuration_ItemPreferences","data","count","decks","weights","uniq","flatMap","Configuration","spacing","direction","marginBottom","configuration_ChangeLanguage","configuration_PlayerSettings","SocialMediaPlatform","configuration_SlidePreferences","TagsPerferences","SettingsView","handleChange","_event","handleChangeIndex","index","position","indicatorColor","textColor","lib_default","axis","ignoreNativeScroll","containerStyle","onChangeIndex","flexDirection","components_AddPlayerForm","components_PlayerList","components_AddSourceForm","components_SourcesList","overflowX","components_Configuration","responsiveHeader","responsiveSubTitle","Typography_default","startGame","cancelGame","requestSlideAsync","applyCard","setSlideState","enqueueFollowUp","activateFollowUp","setWillPowerLocked","setWillPower","addWillPowerMemory","styles","&:hover","compose","withRouter","history","arePlayersSelected","areSourcesAdded","areSourcesLoading","Fab_default","size","header","WelcomeView","possibleConstructorReturn","getPrototypeOf","call","viewportHeight","window","innerHeight","updateHeight","bind","assertThisInitialized","addEventListener","removeEventListener","justify","components_DrinctetHeader","components_SettingsView","components_StartButton","Component","button","GameOptions","anchorEl","handleMenuOpenClick","event","handleClose","handleNavigate","path","isOpen","MoreVert_default","open","onClose","PaperProps","Settings_default","DonutLarge_default","Feedback_default","selectedSlide","game","activeFollowUp","Transition","assign","appBar","flex","content","dialogPaper","fullscreenPaper","withMobileDialog","breakpoint","fullScreen","Dialog_default","TransitionComponent","maxWidth","paperScrollPaper","paperFullScreen","scrollableTable","tableCellNoBreak","whiteSpace","renderPlayerInsights","playerInsights","predefined","join","renderPredefinedPlayers","rounds","statistics","number","element","p","playerId","paddingLeft","conditionalBold","chosen","isBold","InsightsCurrentSlide","card","wp","willPower","slide","slideInsights","renderSlideWeights","selectedCard","toggleContainer","justifyContent","currentWillPower","isLocked","isWillPowerLocked","exclusive","children","row","defaultRandomGenerator","random","selectRandomWeighted","getWeight","arguments","totalWeight","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","randomWeight","_i","Insights","playerSelection","MelinaAlgorithm","_SelectionAlgorithmBa","_getPrototypeOf2","_len","args","_key","apply","deckExhaustionLimit","insights","inherits","createClass","weighted","weightCards","status","deckWeights","willPowerWeights","deck","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","willPowerWeightsArray","hasOwnProperty","Number","playerSettings","definedPlayers","Error","forArrangement","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop2","arrangement","_iterator3","resultCounter","_loop","sourceList","includes","malesCount","femalesCount","selectionRoundInsights","some","toLowerCase","console","log","dominant","changed","cardType","weightedDecks","weightedCards","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop3","toConsumableArray","_iterator4","selected","selectRandomFromWeightedList","availableSlides","_this3","uniqueCardTypes","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_loop4","_iterator7","requestedCards","cardTypeRatings","_i3","allCards","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","cardDeck","weightedSlides","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_loop5","slideSettings","slideType","factor","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iterator6","_this4","filtered","weightedTag","totalCards","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_loop6","exhaustionFactor","percentage","cardsHistory","pow","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","rateWillPower","getHistoryFactor","getTagsFactor","_iterator10","memory","addedMemory","now","Date","getHours","slidesCount","slidesHistory","tagWeights","historyPosition","cardWillPower","filteredDecks","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","verifyPlayerSpecification","weightedZero","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","tag","checkIfWeightedZero","condition","specification","specificationMales","actualMales","specificationFemales","actualFemales","SelectionAlgorithmBase","CardsLoader","requestFile","parserFactory","domParser","DOMParser","_loadFromUrl","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","loadFile","abrupt","stop","_x","_loadFile","_callee2","xml","xmlDoc","cardElements","xmlElement","parser","_context2","sent","parseFromString","getElementsByTagName","parentElement","documentElement","nodeName","parseDeckReference","createParser","deserialize","indexOf","_x2","_x3","_x4","getAttribute","deckWhitelist","referenceRequests","cardRefs","idAttr","cardId","PlayerSetting","playerIndex","ParserHelper","s","startsWith","substring","isNaN","genderRequirementMap","split","m","male","f","female","o","opposite","same","BaseCardParser","createCard","getDefaultAttributes","parseAttributes","subElements","tagName","parseElement","parsePlayers","parsePlayer","parsePlayerTag","requiredGender","genderAttr","genderReq","parseGenderRequirement","TextElement","translations","TextTranslation","TextContentParser","isConditionalElement","parseTextElement","parseTranslation","textElement","texts","textXmlNode","textContent","TextCardParser","_BaseCardParser","textContentParser","rootXml","followUpAttr","followUpProbability","followUpPropability","followUpDelay","seconds","parseTimeSpanStringToSeconds","addElement","subElement","followUp","TextCard","_BaseCard","language","BaseCard","FactCard","_TextCard","isTrueFact","FactCardParser","_TextCardParser","get","prototype","attr","toBool","DownCard","DownCardParser","NeverEverCard","NeverEverCardParser","JokeCard","JokeCardParser","QuestionCard","QuestionCardParser","TaskCard","genderRequirement","parsers","TaskCardParser","loader","DefaultCardParserFactory","response","axios","loadCards","_loadCards","loadFromUrl","services","api","cardsLoader","loadSourceEpic","action$","_state$","pipe","isActionOf","mergeMap","from","success","catchError","message","of","failure","toTranslator","localize","languageCode","getContentStyles","textAlign","up","spaceHeaderStyles","visibility","defaultMarkdownOptions","overrides","objectWithoutProperties","marginBlockStart","marginBlockEnd","h3","_ref4","h4","_ref5","CardPresenter","requiredCards","gameEngine","selectCard","actions","initializeCard","param","initializeFollowUpCard","TextFragment","RandomTextFragment","_TextFragment","VariableFragment","SipsFragment","_VariableFragment","minSips","sipsIndex","PlayerReferenceFragment","RawTextFragment","text","RandomNumberFragment","numbers","NumberRange","StaticNumber","GenderBasedSelectionFragment","femaleText","maleText","referencedPlayerIndex","DefaultTextDecoder","lastTokenIndex","token","readToken","parseVariableFragment","parseRandomSelectionFragment","parseGenderSelectionFragment","playerTag","playerRef","parameterBegin","genderString","parsePlayerIndex","sipsTag","sipsFragment","test","parseNumberArray","splitQuoted","currentNumber","numberStart","isRangeToken","num","delimiter","tokenStart","withinQuotes","replace","nextChar","fragment","splitterIndex","reference","endChar","char","TextFormatter","decode","fragments","sips","selection","options","lastPlayerFragment","boldPlayerNames","boldSips","sip","referencedPlayer","playerKeys","keys","getCount","getRandom","requiredPlayers","groupBy","rootSetting","TextSlidePresenter","_CardPresenter","translator","selectText","_this$formatText","formatText","formatted","initializeState","due","setSeconds","getSeconds","createFollowUp","_this$selectFollowUpT","selectFollowUpText","initializeFollowUpState","followUps","formatter","parseTextFragments","getRequiredPlayers","requiredSips","getRequiredSips","indexedPlayers","sipInfo","getSips","format","viableContents","toLocaleLowerCase","nextSlide","slideState","cursor","clickableRoot","spaceHeader","questionPaper","unit","questionButtonsContainer","isDeciding","selectedPlayer","select","decision","QuestionComponent","esm","markdownContent","DareComponent","TruthComponent","selectedText","getRandomSelectionAlgorithm","_TextSlidePresenter","DownSlide_Component","isFollowUp","availableFactSlideModes","selectedMode","floor","FactSlide_Component","cardText","instruction","_selection","mode","_card","slideComponents","NeverEverSlide_Component","_players","nextSlideEpic","store","getState","dueFollowUps","sortBy","factory","slideInitalizer","slideActions","initializeFollowUp","components","getSlideRegistrations","_selection$recomputeW","recomputeWillPower","willPowerMemory","willPowerActions","selectNextSlide","initialize","redirectOnGameStartedEpic","tap","ignoreElements","combineEpics","settingsEpics","gameEpics","composeEnhancers","combineReducers","getType","isStarted","startTime","flatten","weightsList","GetSlideWeightedArray","rootReducer","gameReducer","settingsReducer","localizeReducer","epicMiddleware","createEpicMiddleware","dependencies","middlewares","enhancer","applyMiddleware","createStore","run","rootEpic","selectPlayers","seedrandom","active","extractGameStatus","chart","getAllCardDeckStatistics","decksStatistics","willPowerStatistics","es6","dataKey","tickFormatter","labelFormatter","fill","maxBarSize","entry","InsightsView","components_InsightsWillPowerView","components_InsightsCurrentSlide","components_InsightsCards","overflowY","InsightsView_InsightsView","SlideWrapper","render","requestSlide","GameComponent","in","components_SlideWrapper","top","right","components_GameOptions","Switch","Route","SettingsDialog","InsightsDialog","BrowserRouter","exact","components_GameComponent","Redirect","to","src_step","src_iterator","src_iteratorNormalCompletion","src","dispatch","userLang","navigator","userLanguage","translation","drinctetTranslations","renderToStaticMarkup","defaultLanguage","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.97bd13ee.chunk.js","sourcesContent":["// @ts-ignore\r\nprocess.env.LOCAL_STORAGE_VERSION = 1;","import { PlayerArrangement } from './../../core/player-arrangement';\r\nimport { Weighted } from \"@core/weighted\";\r\nimport cuid from \"cuid\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { createAsyncAction, createStandardAction } from \"typesafe-actions\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport { Gender, PlayerInfo } from \"@core/player-info\";\r\n\r\nexport const addPlayer = createStandardAction(\"ADD_PLAYER\").map(\r\n    (playerInfo: { name: string; gender: Gender }): { payload: PlayerInfo } => ({\r\n        payload: {\r\n            name: playerInfo.name,\r\n            gender: playerInfo.gender,\r\n            id: cuid(),\r\n        },\r\n    }),\r\n);\r\nexport const updatePlayer = createStandardAction(\"UPDATE_PLAYER\")<PlayerInfo>();\r\nexport const removePlayer = createStandardAction(\"REMOVE_PLAYER\")<string>();\r\n\r\nexport const addSource = createStandardAction(\"ADD_SOURCE\").map(\r\n    (url: string): { payload: SourceInfo } => ({\r\n        payload: {\r\n            url,\r\n            isLoading: false,\r\n            errorMessage: undefined,\r\n            cards: undefined,\r\n            weight: 0.5,\r\n            tags: []\r\n        },\r\n    }),\r\n);\r\nexport const removeSource = createStandardAction(\"REMOVE_SOURCE\")<string>();\r\n\r\nexport const loadSourceAsync = createAsyncAction(\r\n    \"LOAD_SOURCE_REQUEST\",\r\n    \"LOAD_SOURCE_SUCCESS\",\r\n    \"LOAD_SOURCE_FAILURE\",\r\n)<string, { url: string; cards: Card[] }, { url: string; message: string }>();\r\n\r\nexport const setSourceWeight = createStandardAction(\"SET_SOURCE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setPreferOppositeGenders = createStandardAction(\"SET_PREFER_OPPOSITE_GENDERS\")<\r\n    boolean\r\n>();\r\n\r\nexport const addPlayerArrangment = createStandardAction(\"ADD_PLAYER_ARRANGEMENT\")<PlayerArrangement>();\r\nexport const removePlayerArrangment = createStandardAction(\"REMOVE_PLAYER_ARRANGEMENT\")<string>();\r\n\r\nexport const setSocialMediaPlatform = createStandardAction(\"SET_SOCIAL_MEDIA_PLATFORM\")<string>();\r\n\r\nexport const setSlideWeight = createStandardAction(\"SET_SLIDE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setTagWeight = createStandardAction(\"SET_TAG_WEIGHT\")<Weighted<string>>();\r\n","import * as React from \"react\";\r\nimport { addPlayer } from \"../actions\";\r\nimport { Gender } from \"../../../core/player-info\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\n\r\nconst dispatchProps = {\r\n    addPlayer,\r\n};\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    name: string;\r\n};\r\n\r\nclass AddPlayerForm extends React.Component<Props, State> {\r\n    readonly state = { name: \"\" };\r\n\r\n    handlePlayerNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ name: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        let gender: Gender = \"Male\";\r\n        if (this.state.name.endsWith(\"a\"))\r\n            //sorry Luca\r\n            gender = \"Female\";\r\n\r\n        this.props.addPlayer({ name: this.state.name, gender });\r\n        this.setState({ name: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.name) this.handleAddClick();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { name } = this.state;\r\n        const { translate } = this.props;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        placeholder={translate(\"settings.players.playerName\") as string}\r\n                        onChange={this.handlePlayerNameChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!name}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    dispatchProps,\r\n)(withLocalize(AddPlayerForm));\r\n","export class PlayerInfo {\r\n    constructor(public id: string, public name: string, public gender: Gender) {}\r\n}\r\n\r\nexport type Gender = \"Male\" | \"Female\";\r\n","import {SettingsState} from \"./reducer\";\r\n\r\nexport const getPlayers = (state: SettingsState) => state.players;\r\n\r\nexport const getSources = (state: SettingsState) => state.sources;\r\n","import { Gender } from \"../../../core/player-info\";\r\nimport React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVenus, faMars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\ninterface Props {\r\n    name: string;\r\n    gender: Gender;\r\n    onRemoveClick: () => void;\r\n    onSwapGenderClick: () => void;\r\n    onNameChanged: (name: string) => void;\r\n}\r\n\r\nconst getIconButtonStyle = (): React.CSSProperties => ({\r\n    margin: -10,\r\n    width: 48,\r\n    height: 48,\r\n});\r\n\r\nfunction PlayerListItem({ name, gender, onRemoveClick, onSwapGenderClick, onNameChanged }: Props) {\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <IconButton\r\n                aria-label=\"Swap Gender\"\r\n                onClick={onSwapGenderClick}\r\n                style={{ ...getIconButtonStyle(), marginRight: 0 }}\r\n            >\r\n                <Icon>\r\n                    <FontAwesomeIcon icon={gender === \"Male\" ? faMars : faVenus} />\r\n                </Icon>\r\n            </IconButton>\r\n            <Input\r\n                error={!name}\r\n                onBlur={() => {\r\n                    if (!name) onRemoveClick();\r\n                }}\r\n                style={{ flexGrow: 1, marginLeft: 5, marginRight: 5 }}\r\n                placeholder=\"Will be removed!\"\r\n                value={name}\r\n                onChange={ev => onNameChanged(ev.currentTarget.value)}\r\n            />\r\n            <IconButton\r\n                aria-label=\"Delete\"\r\n                onClick={onRemoveClick}\r\n                style={{ ...getIconButtonStyle(), marginLeft: 0 }}\r\n                tabIndex={-1}\r\n            >\r\n                <DeleteIcon fontSize=\"default\" />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerListItem;\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlayerInfo } from \"../../../core/player-info\";\r\nimport { removePlayer, updatePlayer } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport PlayerListItem from \"./PlayerListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  players: selectors.getPlayers(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n  removePlayer,\r\n  updatePlayer,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction PlayerList({ players, removePlayer, updatePlayer }: Props) {\r\n  return (\r\n    <List>\r\n      {players.map(player => (\r\n        <ListItem key={player.id}>\r\n          <ListItemText>\r\n            <PlayerListItem\r\n              name={player.name}\r\n              gender={player.gender}\r\n              onRemoveClick={() => removePlayer(player.id)}\r\n              onNameChanged={name =>\r\n                updatePlayer(new PlayerInfo(player.id, name, player.gender))\r\n              }\r\n              onSwapGenderClick={() =>\r\n                updatePlayer(\r\n                  new PlayerInfo(\r\n                    player.id,\r\n                    player.name,\r\n                    player.gender === \"Female\" ? \"Male\" : \"Female\",\r\n                  ),\r\n                )\r\n              }\r\n            />\r\n          </ListItemText>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(PlayerList);\r\n","import Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addSource, loadSourceAsync } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    addSource,\r\n    loadSource: loadSourceAsync.request,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    url: string;\r\n};\r\n\r\nclass AddSourceForm extends React.Component<Props, State> {\r\n    readonly state = { url: \"\" };\r\n\r\n    handleUrlChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ url: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        if (!this.state.url || this.props.sources.findIndex(x => x.url === this.state.url) > -1) {\r\n            return;\r\n        }\r\n\r\n        this.props.addSource(this.state.url);\r\n        this.props.loadSource(this.state.url);\r\n        this.setState({ url: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.url) {\r\n                this.handleAddClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { url } = this.state;\r\n        const { translate } = this.props;\r\n        const sourceExists = this.props.sources.findIndex(x => x.url === this.state.url) > -1;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={url}\r\n                        placeholder={translate(\"settings.sources.sourceUrl\") as string}\r\n                        error={sourceExists}\r\n                        onChange={this.handleUrlChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!url || sourceExists}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(AddSourceForm));\r\n","import {\r\n    Card,\r\n    CardHeader,\r\n    Typography,\r\n    Link,\r\n    Checkbox,\r\n    withStyles,\r\n    Theme,\r\n    createStyles,\r\n    LinearProgress,\r\n    Badge,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface LoadingFailedItemProps {\r\n    errorMessage: string | undefined;\r\n    onReloadClick: () => void;\r\n}\r\n\r\ninterface WeightProps {\r\n    weight: number;\r\n    onChangeWeight: (value: number) => void;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n        },\r\n        title: {\r\n            textOverflow: \"elipsis\",\r\n            wordBreak: \"break-all\",\r\n            overflow: \"hidden\",\r\n        },\r\n        fullWidth: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LoadingFailedItemProps, WeightProps, WithStyles<typeof styles> {\r\n    url: string;\r\n    isLoading: boolean;\r\n    cardsCount: number;\r\n    weight: number;\r\n    onRemoveClick: () => void;\r\n}\r\n\r\nfunction LoadingItem() {\r\n    return <LinearProgress />;\r\n}\r\n\r\nfunction LoadingFailedItem({ errorMessage, onReloadClick }: LoadingFailedItemProps) {\r\n    return (\r\n        <Typography color=\"secondary\" variant=\"body1\" component=\"small\">\r\n            {`${errorMessage}`}\r\n            <Link\r\n                style={{ marginLeft: 15 }}\r\n                component=\"button\"\r\n                variant=\"body1\"\r\n                onClick={onReloadClick}\r\n            >\r\n                Reload\r\n            </Link>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nfunction WeightSlider({ weight, onChangeWeight }: WeightProps) {\r\n    return (\r\n        <Slider\r\n            max={1}\r\n            min={0}\r\n            step={0.05}\r\n            style={{ margin: 10, padding: '4px 0px' }}\r\n            value={weight}\r\n            onChange={(_, n) => onChangeWeight(n)}\r\n        />\r\n    );\r\n}\r\n\r\nfunction SourcesListItem({\r\n    url,\r\n    classes,\r\n    isLoading,\r\n    errorMessage,\r\n    cardsCount,\r\n    weight,\r\n    onRemoveClick,\r\n    onReloadClick,\r\n    onChangeWeight,\r\n}: Props) {\r\n    return (\r\n        <Badge\r\n            badgeContent={cardsCount}\r\n            color=\"primary\"\r\n            max={9999}\r\n            className={classes.fullWidth}\r\n            showZero={false}\r\n        >\r\n            <Card className={classes.fullWidth}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Checkbox\r\n                            checked={weight !== 0}\r\n                            style={{ margin: -10 }}\r\n                            onChange={(_, b) => (b ? onChangeWeight(0.5) : onChangeWeight(0))}\r\n                        />\r\n                    }\r\n                    titleTypographyProps={{ className: classes.title }}\r\n                    title={url}\r\n                    action={\r\n                        <IconButton onClick={onRemoveClick}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    subheader={\r\n                        isLoading ? (\r\n                            <LoadingItem />\r\n                        ) : errorMessage ? (\r\n                            <LoadingFailedItem\r\n                                errorMessage={errorMessage}\r\n                                onReloadClick={onReloadClick}\r\n                            />\r\n                        ) : (\r\n                            <WeightSlider weight={weight} onChangeWeight={onChangeWeight} />\r\n                        )\r\n                    }\r\n                />\r\n            </Card>\r\n        </Badge>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(SourcesListItem);\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadSourceAsync, removeSource, setSourceWeight } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport SourcesListItem from \"./SourcesListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    loadSource: loadSourceAsync.request,\r\n    removeSource,\r\n    setSourceWeight,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SourcesList({ sources, removeSource, loadSource, setSourceWeight }: Props) {\r\n    return (\r\n        <List>\r\n            {sources.map(source => (\r\n                <ListItem key={source.url}>\r\n                    <ListItemText>\r\n                        <SourcesListItem\r\n                            url={source.url}\r\n                            isLoading={source.isLoading}\r\n                            errorMessage={source.errorMessage}\r\n                            cardsCount={(source.cards && source.cards.length) || 0}\r\n                            weight={source.weight}\r\n                            onChangeWeight={weight =>\r\n                                setSourceWeight({ value: source.url, weight })\r\n                            }\r\n                            onRemoveClick={() => removeSource(source.url)}\r\n                            onReloadClick={() => loadSource(source.url)}\r\n                        />\r\n                    </ListItemText>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(SourcesList);\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\n\r\nconst styles = () =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ntype Props = LocalizeContextProps & WithStyles<typeof styles>;\r\n\r\nfunction ChangeLanguage({ activeLanguage, languages, setActiveLanguage, classes }: Props) {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12} sm={10} md={8} lg={6}>\r\n                <FormControl className={classes.root}>\r\n                    <InputLabel htmlFor=\"language-input\">\r\n                        <Translate id=\"settings.configuration.language\" />\r\n                    </InputLabel>\r\n                    <Select\r\n                        inputProps={{\r\n                            id: \"language-input\",\r\n                        }}\r\n                        style={{ width: \"100%\" }}\r\n                        value={activeLanguage.code}\r\n                        onChange={ev => setActiveLanguage(ev.target.value)}\r\n                    >\r\n                        {languages.map(lang => (\r\n                            <MenuItem key={lang.code} value={lang.code}>{lang.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(withLocalize(ChangeLanguage));\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    Typography,\r\n    Switch,\r\n    FormControlLabel,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Theme,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n} from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    preferOppositeGenders: state.settings.preferOppositeGenders,\r\n    players: state.settings.players,\r\n    arrangements: state.settings.arrangements,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        section: {\r\n            marginTop: 10,\r\n        },\r\n        arrangmentItem: {\r\n            borderBottom: \"1px solid #d8d8d8\",\r\n            paddingBottom: 5,\r\n        },\r\n        arrangementSelect: {\r\n            width: 200,\r\n            [theme.breakpoints.down(\"xs\")]: {\r\n                width: \"100%\",\r\n            },\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles>;\r\n\r\nfunction PlayerSettings({\r\n    preferOppositeGenders,\r\n    setPreferOppositeGenders,\r\n    classes,\r\n    players,\r\n    arrangements,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.playerSettings\" />\r\n            </Typography>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={preferOppositeGenders}\r\n                        onChange={(_, c) => setPreferOppositeGenders(c)}\r\n                    />\r\n                }\r\n                label={<Translate id=\"settings.configuration.playerSettings.pairOppositeGenders\" />}\r\n            />\r\n            <Typography className={classes.section} variant=\"subtitle2\">\r\n                <Translate id=\"settings.configuration.arrangements\" />\r\n            </Typography>\r\n            <Typography>\r\n                <Translate id=\"settings.configuration.arrangements.description\" />\r\n            </Typography>\r\n            <Grid container>\r\n                {players\r\n                    .filter(player => arrangements.findIndex(x => x.p2 === player.id) === -1)\r\n                    .map(player => {\r\n                        const arrangment = arrangements.find(x => x.p1 === player.id);\r\n                        const arrangedPlayerId = arrangment === undefined ? \"\" : arrangment.p2;\r\n                        return (\r\n                            <Grid\r\n                                item\r\n                                container\r\n                                alignItems=\"flex-end\"\r\n                                className={classes.arrangmentItem}\r\n                                key={player.id}\r\n                            >\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <Typography variant=\"subtitle1\">{player.name}</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <FormControl className={classes.arrangementSelect}>\r\n                                        <InputLabel htmlFor=\"player-selection\">\r\n                                            <Translate id=\"settings.configuration.arrangements.pairWith\" />\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            value={arrangedPlayerId}\r\n                                            onChange={ev => {\r\n                                                const value = ev.target.value;\r\n                                                if (value === \"\") {\r\n                                                    removePlayerArrangment(player.id);\r\n                                                } else {\r\n                                                    addPlayerArrangment({\r\n                                                        p1: player.id,\r\n                                                        p2: value,\r\n                                                    });\r\n                                                }\r\n                                            }}\r\n                                            input={<Input id=\"player-selection\" />}\r\n                                        >\r\n                                            <MenuItem value=\"\">\r\n                                                <em>\r\n                                                    <Translate id=\"settings.configuration.arrangements.none\" />\r\n                                                </em>\r\n                                            </MenuItem>\r\n                                            {players\r\n                                                .filter(\r\n                                                    x =>\r\n                                                        x.id !== player.id &&\r\n                                                        arrangements.findIndex(\r\n                                                            y =>\r\n                                                                (y.p1 === x.id || y.p2 === x.id) &&\r\n                                                                y.p1 !== player.id,\r\n                                                        ) === -1,\r\n                                                )\r\n                                                .map(x => (\r\n                                                    <MenuItem key={x.id} value={x.id}>\r\n                                                        {x.name}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withStyles(styles)(withLocalize(PlayerSettings)));\r\n","export const socialMediaPlatforms = [\"Snapchat\", \"Instagram\", \"Facebook\"];\r\n\r\nexport const defaultSources = [\r\n    \"bullshitfact.xml\",\r\n    \"ichundderalkohol.xml\",\r\n    \"ConversationStartersWorld.NeverHaveIEver.xml\",\r\n    \"Bevil.xml\"\r\n    // \"https://raw.githubusercontent.com/Anapher/Drinctet/master/web/public/bullshitfact.xml\",\r\n];\r\n\r\nexport const slideWeights: { [key: string]: number } = {\r\n    FactSlide: 0,\r\n    DownSlide: 0,\r\n    NeverEverSlide: 0,\r\n    TruthOrDareSlide: 1,\r\n};\r\n\r\n// if a card has one of these tags and an arranged player is selected\r\n// the propability that their counterpart is selected is increased further\r\nexport const higherArrangementPropabilityTags = [\"sexual\"];\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport * as React from \"react\";\r\nimport { Typography, FormControl, Select, Input, MenuItem } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { setSocialMediaPlatform } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { socialMediaPlatforms } from \"../../../../preferences\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    platform: state.settings.socialMediaPlatform,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSocialMediaPlatform,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction ChangeLanguage({ platform, setSocialMediaPlatform }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.socialMediaPlatform\" />\r\n            </Typography>\r\n            <Typography gutterBottom>\r\n                <Translate id=\"settings.configuration.socialMediaPlatform.description\" />\r\n            </Typography>\r\n            <FormControl>\r\n                <Select style={{width: 200, marginTop: 10}}\r\n                    value={platform}\r\n                    onChange={ev => setSocialMediaPlatform(ev.target.value)}\r\n                    input={<Input />}\r\n                >\r\n                    {socialMediaPlatforms.map(x => (\r\n                        <MenuItem key={x} value={x}>\r\n                            {x}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(ChangeLanguage));\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface Props {\r\n    items: Weighted<string>[];\r\n    onChangeWeight: (item: Weighted<string>) => void;\r\n}\r\n\r\nclass ItemPreferences extends React.Component<Props> {\r\n    render() {\r\n        const { items, onChangeWeight } = this.props;\r\n\r\n        return (\r\n            <Grid container>\r\n                {items.map(x => (\r\n                    <Grid key={x.value} item container alignItems=\"center\">\r\n                        <Grid item xs={4} lg={2}>\r\n                            <Typography\r\n                                style={{\r\n                                    opacity: x.weight === 0 ? 0.5 : 1,\r\n                                }}\r\n                            >\r\n                                {x.value}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8} lg={10}>\r\n                            <Slider\r\n                                max={1}\r\n                                min={0}\r\n                                style={{ padding: \"20px 0\"}}\r\n                                step={0.05}\r\n                                value={x.weight}\r\n                                onChange={(_, v) => onChangeWeight({ value: x.value, weight: v })}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemPreferences;\r\n","export function percentageFixedTotal<T>(\r\n    values: T[],\r\n    getPercentage: (x: T) => number,\r\n    target: number,\r\n): Array<{ value: T; part: number }> {\r\n    // https://stackoverflow.com/a/13483486\r\n    const percentageValues = values.map(value => ({ value, percent: getPercentage(value) }));\r\n    const total = percentageValues.reduce((x, y) => x + y.percent, 0);\r\n\r\n    const result = new Array<{ value: T; part: number }>();\r\n    let sum = 0;\r\n    let prevBaseline = 0;\r\n\r\n    for (let i = 0; i < percentageValues.length; i++) {\r\n        const {value, percent} = percentageValues[i];\r\n\r\n        sum += percent / total * target;\r\n        const sumRounded = Math.round(sum);\r\n\r\n        result.push({ value, part: sumRounded - prevBaseline });\r\n        prevBaseline = sumRounded;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setSlideWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slides: state.settings.slides,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSlideWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SlidePreferences({ slides, setSlideWeight }: Props) {\r\n    const totalCards = 50;\r\n    const slidePercentages = percentageFixedTotal(slides, x => x.weight, totalCards);\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.slides\" />\r\n            </Typography>\r\n            <ItemPreferences items={slides} onChangeWeight={x => setSlideWeight(x)} />\r\n            <Translate id=\"settings.configuration.slidesProjection\" data={{count: totalCards}} />\r\n            {slidePercentages.map((x, i) => (\r\n                <React.Fragment key={x.value.value}>\r\n                    <b>{x.value.value}</b>: {x.part}\r\n                    {i < slidePercentages.length -1 ? \", \" : null}\r\n                </React.Fragment>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(SlidePreferences));\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setTagWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tags: state.settings.tags,\r\n    decks: state.settings.sources,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setTagWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction TagPreferences({ tags, decks, setTagWeight }: Props) {\r\n    const allTags = _.uniq(decks.flatMap(x => x.tags));\r\n    const weights = allTags.map(x => tags.find(y => y.value === x) || { value: x, weight: 0.5 });\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.tags\" />\r\n            </Typography>\r\n            <ItemPreferences items={weights} onChangeWeight={x => setTagWeight(x)} />\r\n            {weights.length === 0 ? (\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    <Translate id=\"settings.configuration.tags.none\" />\r\n                </Typography>\r\n            ) : (\r\n                undefined\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(TagPreferences));\r\n","import * as React from \"react\";\r\nimport ChangeLanguage from \"./configuration/ChangeLanguage\";\r\nimport PlayerSettings from \"./configuration/PlayerSettings\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport SocialMediaPlatform from \"./configuration/SocialMediaPlatform\";\r\nimport SlidePreferences from \"./configuration/SlidePreferences\";\r\nimport TagsPerferences from \"./configuration/TagsPerferences\";\r\n\r\nclass Configuration extends React.Component {\r\n    render() {\r\n        return (\r\n            <Grid style={{ padding: 24 }}>\r\n                <Grid container spacing={32} direction=\"column\">\r\n                    <Grid item style={{ marginBottom: 20 }}>\r\n                        <ChangeLanguage />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <PlayerSettings />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SocialMediaPlatform />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SlidePreferences />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TagsPerferences />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configuration;\r\n","import * as React from \"react\";\r\nimport { AppBar, Tabs, Tab, Theme, Grid } from \"@material-ui/core\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/core/styles\";\r\nimport AddPlayerForm from \"./AddPlayerForm\";\r\nimport PlayerList from \"./PlayerList\";\r\nimport AddSourceForm from \"./AddSourceForm\";\r\nimport SourcesList from \"./SourcesList\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport Configuration from \"./Configuration\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LocalizeContextProps, WithStyles<typeof styles> {\r\n    theme: Theme;\r\n}\r\n\r\ninterface State {\r\n    value: number;\r\n}\r\n\r\nclass SettingsView extends React.Component<Props, State> {\r\n    readonly state = {\r\n        value: 0,\r\n    };\r\n\r\n    handleChange = (_event: any, value: number) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    handleChangeIndex = (index: number) => {\r\n        this.setState({ value: index });\r\n    };\r\n\r\n    render() {\r\n        const { theme, classes, translate } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={this.state.value}\r\n                        onChange={this.handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                    >\r\n                        <Tab label={translate(\"settings.players\")} />\r\n                        <Tab label={translate(\"settings.sources\")} />\r\n                        <Tab label={translate(\"settings.configuration\")} />\r\n                    </Tabs>\r\n                </AppBar>\r\n                <SwipeableViews\r\n                    axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                    index={this.state.value}\r\n                    ignoreNativeScroll={true}\r\n                    style={{ flexGrow: 1 }}\r\n                    containerStyle={{ height: \"100%\" }}\r\n                    onChangeIndex={this.handleChangeIndex}\r\n                >\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ marginTop: 24, marginLeft: 24, marginRight: 24 }}>\r\n                            <AddPlayerForm />\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                flexGrow: 1,\r\n                                height: 0,\r\n                                overflow: \"auto\",\r\n                                margin: \"24px 24px 0 24px\",\r\n                            }}\r\n                        >\r\n                            <PlayerList />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ marginTop: 24, marginLeft: 24, marginRight: 24 }}>\r\n                            <AddSourceForm />\r\n                        </div>\r\n                        <div style={{ flexGrow: 1, height: 0, overflow: \"auto\" }}>\r\n                            <SourcesList />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ flexGrow: 1, height: 0, overflowX: \"hidden\" }}>\r\n                            <Configuration />\r\n                        </div>\r\n                    </Grid>\r\n                </SwipeableViews>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLocalize(withStyles(styles, { withTheme: true })(SettingsView));\r\n","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        responsiveHeader: {\r\n            fontSize: \"4rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"2rem\",\r\n            },\r\n        },\r\n        responsiveSubTitle: {\r\n            fontSize: \"1.5rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1rem\",\r\n            },\r\n        },\r\n    });\r\n\r\nfunction DrinctetHeader({ classes }: WithStyles<typeof styles>) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\" className={classes.responsiveHeader}>\r\n                Drinctet\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.responsiveSubTitle}>\r\n                The goal is to drink that!\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(DrinctetHeader);\r\n","import { PlayerSelectionInsights } from './../../core/selection/insights';\r\nimport { Card } from '@core/cards/card';\r\nimport { createStandardAction, createAsyncAction } from \"typesafe-actions\";\r\nimport { FollowUpSlide, Translator } from 'GameModels';\r\nimport { History } from 'history';\r\nimport { SlideSelectionInsights } from '@core/selection/insights';\r\n\r\nexport const startGame = createStandardAction(\"START_GAME\")<History>();\r\n\r\nexport const cancelGame = createStandardAction(\"CANCEL_GAME\")();\r\n\r\nexport const requestSlideAsync = createAsyncAction(\r\n    \"NEXT_SLIDE_REQUEST\",\r\n    \"NEXT_SLIDE_SUCCESS\",\r\n    \"NEXT_SLIDE_FAILURE\",\r\n)<Translator, {slide: string, insights: SlideSelectionInsights | null}, string>();\r\n\r\nexport const applyCard = createStandardAction(\"APPLY_CARD\")<Card>();\r\n\r\nexport const setSlideState = createStandardAction(\"SET_SLIDE_STATE\")<{state: any, insights: PlayerSelectionInsights | null}>();\r\n\r\nexport const enqueueFollowUp = createStandardAction(\"ADD_FOLLOW_UP\")<FollowUpSlide>();\r\nexport const activateFollowUp = createStandardAction(\"ACTIVATE_FOLLOW_UP\")<FollowUpSlide>();\r\n\r\nexport const setWillPowerLocked = createStandardAction(\"SET_WILL_POWER_LOCKED\")<boolean>();\r\nexport const setWillPower = createStandardAction(\"SET_WILL_POWER\")<number>();\r\nexport const addWillPowerMemory = createStandardAction(\"ADD_WILL_POWER_MEMORY\")<string[]>();\r\n","import { withStyles, WithStyles, createStyles } from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { startGame } from \"../../game/actions\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        color: \"white\",\r\n        width: \"100%\",\r\n        backgroundColor: \"#e74c3c\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#c0392b\",\r\n        },\r\n    },\r\n});\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    settings: state.settings,\r\n});\r\n\r\nconst dispatchProps = {\r\n    startGame,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps &\r\n    RouteComponentProps;\r\n\r\nfunction StartButton(props: Props) {\r\n    const { classes, startGame, settings, history } = props;\r\n\r\n    const arePlayersSelected = settings.players.length > 0;\r\n    const areSourcesAdded = settings.sources.filter(x => x.cards !== undefined).length > 0;\r\n    const areSourcesLoading = settings.sources.filter(x => x.isLoading).length > 0;\r\n\r\n    return (\r\n        <Fab\r\n            variant=\"extended\"\r\n            size=\"large\"\r\n            disabled={!arePlayersSelected || !areSourcesAdded || areSourcesLoading}\r\n            classes={{ root: classes.root }}\r\n            onClick={() => startGame(history)}\r\n        >\r\n            <Translate id=\"welcome.startGame\" />\r\n        </Fab>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withRouter\r\n)(StartButton) as React.ComponentType;\r\n","import { Grid, createStyles, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\nimport DrinctetHeader from \"./DrinctetHeader\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    header: {\r\n        margin: 20,\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ntype Props = WithStyles<typeof styles>;\r\n\r\ninterface State {\r\n    viewportHeight: number;\r\n}\r\n\r\nclass WelcomeView extends Component<Props, State> {\r\n    readonly state = {\r\n        viewportHeight: window.innerHeight,\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.updateHeight = this.updateHeight.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    updateHeight(): void {\r\n        this.setState({ viewportHeight: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { viewportHeight } = this.state;\r\n        return (\r\n            <div className={classes.root}>\r\n                {viewportHeight > 500 ? (\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12} md={6} className={classes.header}>\r\n                            <DrinctetHeader />\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : null}\r\n                <div style={{ flexGrow: 1, height: 0 }}>\r\n                    <Grid container justify=\"center\" style={{ height: \"100%\" }}>\r\n                        <Grid item xs={12} md={6}>\r\n                            <SettingsView />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Grid container justify=\"center\">\r\n                    <Grid item xs={12} md={6} container justify=\"center\">\r\n                        <Grid item xs={10} lg={8} style={{ padding: \"10px 20px 20px 20px\" }}>\r\n                            <StartButton />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(WelcomeView);\r\n","import {\r\n    createStyles,\r\n    IconButton,\r\n    ListItemIcon,\r\n    Menu,\r\n    MenuItem,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport FeedbackIcon from \"@material-ui/icons/Feedback\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component, ComponentType } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\n\r\nconst styles = createStyles({\r\n    button: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles> &\r\n    RouterProps;\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n    activeFollowUp: state.game.activeFollowUp,\r\n});\r\n\r\nconst dispatchProps = {};\r\n\r\ninterface State {\r\n    anchorEl: HTMLElement | null;\r\n}\r\n\r\nclass GameOptions extends Component<Props, State> {\r\n    readonly state: State = {\r\n        anchorEl: null,\r\n    };\r\n\r\n    handleMenuOpenClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    handleNavigate = (path: string) => {\r\n        this.handleClose();\r\n        this.props.history.push(`/game/${path}`);\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { anchorEl } = this.state;\r\n        const isOpen = anchorEl !== null;\r\n\r\n        return (\r\n            <div>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={this.handleMenuOpenClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={isOpen}\r\n                    onClose={this.handleClose}\r\n                    PaperProps={{\r\n                        style: {\r\n                            width: 200,\r\n                        },\r\n                    }}\r\n                >\r\n                    <MenuItem\r\n                        onClick={() => this.handleNavigate(\"settings\")}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SettingsIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.settings\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => this.handleNavigate(\"insights\")}>\r\n                        <ListItemIcon>\r\n                            <DonutLargeIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.insights\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.handleClose}>\r\n                        <ListItemIcon>\r\n                            <FeedbackIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.reportCard\" />\r\n                    </MenuItem>\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    withLocalize,\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withRouter,\r\n)(GameOptions) as ComponentType;\r\n","import { AppBar, Button, createStyles, Slide, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogPaper: {\r\n        height: \"80vh\"\r\n    },\r\n    fullscreenPaper: {\r\n        height: \"100vh\"\r\n    }\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction SettingsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n                classes={{paperScrollPaper: classes.dialogPaper, paperFullScreen: classes.fullscreenPaper}}\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.settings\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <SettingsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(SettingsDialog) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slide: state.game.selectedSlide,\r\n    slideInsights: state.game.slideInsights,\r\n    playerInsights: state.game.playerInsights,\r\n    players: state.settings.players,\r\n    card: state.game.selectedCard,\r\n});\r\n\r\nconst styles = createStyles({\r\n    section: {\r\n        marginTop: 10,\r\n    },\r\n    scrollableTable: {\r\n        overflow: \"auto\",\r\n        width: \"100%\",\r\n    },\r\n    tableCellNoBreak: {\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles>;\r\n\r\nfunction renderPredefinedPlayers({ playerInsights, players }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography>\r\n                <Translate id=\"insights.predefinedPlayers\" />\r\n                {\": \"}\r\n                {playerInsights!.predefined\r\n                    .map(x => players.find(y => y.id === x))\r\n                    .filter(x => x != null)\r\n                    .map(x => x!.name)\r\n                    .join(\", \")}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderPlayerInsights(props: Props) {\r\n    const { playerInsights, players, classes } = props;\r\n    return (\r\n        <div className={classes.scrollableTable}>\r\n            {playerInsights!.predefined.length > 0 ? renderPredefinedPlayers(props) : null}\r\n            {playerInsights!.rounds.map((x, i) => {\r\n                const statistics = percentageFixedTotal(x, x => x.weight, 1000);\r\n                return (\r\n                    <table key={i}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className={classes.tableCellNoBreak}>\r\n                                    <Typography>\r\n                                        <Translate id=\"insights.player\" data={{ number: i + 1 }} />:\r\n                                    </Typography>\r\n                                </td>\r\n                                {statistics.map(y => {\r\n                                    const player = players.find(p => p.id === y.value.playerId);\r\n                                    let element: JSX.Element;\r\n                                    if (player === undefined) {\r\n                                        element = (\r\n                                            <span>\r\n                                                <i>\r\n                                                    <Translate id=\"insights.playerRemoved\" />\r\n                                                </i>{\" \"}\r\n                                                ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    } else {\r\n                                        element = (\r\n                                            <span>\r\n                                                {player.name} ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <td key={y.value.playerId} style={{ paddingLeft: 10 }}>\r\n                                            <Typography>\r\n                                                {conditionalBold(element, y.value.chosen)}\r\n                                            </Typography>\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction conditionalBold(element: JSX.Element, isBold: boolean): JSX.Element {\r\n    if (isBold) {\r\n        return <b>{element}</b>;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nfunction renderSlideWeights({ slide, slideInsights }: Props) {\r\n    const slides = slideInsights!.weights;\r\n    const statistics = percentageFixedTotal(slides, x => x.weight, 1000);\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {statistics.map(x => (\r\n                    <tr key={x.value.value}>\r\n                        <td>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.value.value}</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                        <td style={{ paddingLeft: 10 }}>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.part / 10}%</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nclass InsightsCurrentSlide extends Component<Props> {\r\n    render() {\r\n        const { playerInsights, classes, card } = this.props;\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.currentSlide\" />\r\n                </Typography>\r\n                <Typography>\r\n                    <Translate id=\"insights.currentCard\" />\r\n                    {\": \"}\r\n                    {card === null ? (\r\n                        <i>\r\n                            <Translate id=\"insights.noCard\" />\r\n                        </i>\r\n                    ) : (\r\n                        <span>\r\n                            <Translate\r\n                                id=\"insights.cardInfo\"\r\n                                data={{\r\n                                    name: card.type,\r\n                                    id: card.id,\r\n                                    wp: card.willPower === undefined ? <Translate id=\"insights.universal\"/> : card.willPower,\r\n                                }}\r\n                            />\r\n                        </span>\r\n                    )}\r\n                </Typography>\r\n                {renderSlideWeights(this.props)}\r\n\r\n                <Typography variant=\"h6\" className={classes.section}>\r\n                    <Translate id=\"insights.playerSelection\" />\r\n                </Typography>\r\n                {playerInsights === null ? (\r\n                    <Typography>\r\n                        <i>\r\n                            <Translate id=\"insights.noPlayers\" />\r\n                        </i>\r\n                    </Typography>\r\n                ) : (\r\n                    renderPlayerInsights(this.props)\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsCurrentSlide) as React.ComponentType;\r\n","import { createStyles, FormControlLabel, FormGroup, Switch, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { setWillPower, setWillPowerLocked } from \"../actions\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n    isLocked: state.game.isWillPowerLocked,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n};\r\n\r\nconst styles = \r\n    createStyles({\r\n        toggleContainer: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & WithStyles<typeof styles>;\r\n\r\nfunction InsightsWillPowerView({\r\n    currentWillPower,\r\n    isLocked,\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n    classes,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                <Translate id=\"insights.willPower\" />\r\n            </Typography>\r\n            <div className={classes.toggleContainer}>\r\n                <ToggleButtonGroup\r\n                    exclusive\r\n                    value={currentWillPower}\r\n                    onChange={(_, y) => setWillPower(y)}\r\n                    children={[1, 2, 3, 4, 5].map(x => (\r\n                        <ToggleButton key={x} value={x}>\r\n                            {x}\r\n                        </ToggleButton>\r\n                    ))}\r\n                />\r\n            </div>\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch checked={isLocked} onChange={(_, x) => setWillPowerLocked(x)} />\r\n                    }\r\n                    label={<Translate id=\"insights.lockWillPower\" />}\r\n                />\r\n            </FormGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsWillPowerView) as React.ComponentType;\r\n","import { Weighted } from \"./../weighted\";\r\n\r\nexport type RNG = () => number;\r\nconst defaultRandomGenerator: RNG = () => Math.random();\r\n\r\nexport function selectRandomWeighted<T>(\r\n    items: T[],\r\n    getWeight: (item: T) => number,\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    if (items.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const weights: Array<{ item: T; weight: number }> = [];\r\n    let totalWeight: number = 0;\r\n    for (const item of items) {\r\n        const weight = getWeight(item);\r\n        weights.push({ item, weight });\r\n\r\n        totalWeight += weight;\r\n    }\r\n\r\n    let randomWeight = totalWeight * random();\r\n    for (const { item, weight } of weights) {\r\n        if (weight === 0) {\r\n            continue;\r\n        }\r\n        randomWeight -= weight;\r\n\r\n        if (randomWeight <= 0) {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function selectRandomFromWeightedList<T>(\r\n    items: Weighted<T>[],\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    const result = selectRandomWeighted(items, item => item.weight, random);\r\n    if (result === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    return result.value;\r\n}\r\n","import { Card } from \"@core/cards/card\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { SelectionAlgorithm } from \"./selection-algorithm\";\r\nimport { selectRandomWeighted, selectRandomFromWeightedList, RNG } from \"./utils\";\r\nimport { Weighted } from \"@core/weighted\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport abstract class SelectionAlgorithmBase implements SelectionAlgorithm {\r\n    protected readonly random: RNG;\r\n\r\n    constructor(protected readonly status: GameStatus, random: RNG) {\r\n        this.random = random;\r\n    }\r\n\r\n    public abstract selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[];\r\n    public abstract selectNextSlide(availableSlides: SlideRegistration[]): string | undefined;\r\n    public abstract selectCard<TCard extends Card>(cardType: string): TCard;\r\n    public abstract getSips(min: number): number;\r\n    public abstract recomputeWillPower(memory: string[]): { willPower: number; memory: string[] };\r\n\r\n    public getRandom(): number {\r\n        return this.random();\r\n    }\r\n\r\n    public selectRandomWeighted<T>(items: T[], getWeight: (item: T) => number): T | undefined {\r\n        return selectRandomWeighted(items, getWeight, () => this.random());\r\n    }\r\n\r\n    protected selectRandomFromWeightedList<T>(items: Weighted<T>[]): T | undefined {\r\n        return selectRandomFromWeightedList(items, () => this.random());\r\n    }\r\n}\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { CardDeck } from \"@core/card-deck\";\r\n\r\nexport class Insights {\r\n    public playerSelection: PlayerSelectionInsights | null = null;\r\n    public slideWeights: SlideSelectionInsights | null  = null;\r\n}\r\n\r\nexport interface PlayerSelectionInsights {\r\n    predefined: string[];\r\n    rounds: Array<PlayerSelection[]>;\r\n}\r\n\r\nexport interface SlideSelectionInsights {\r\n    weights: Weighted<string>[];\r\n}\r\n\r\nexport interface PlayerSelection {\r\n    chosen: boolean;\r\n    weight: number;\r\n    playerId: string;\r\n}\r\n\r\nexport interface CardsInsight {\r\n    decks: Weighted<CardDeck>[];\r\n    willPower: Weighted<number | null>[];\r\n}\r\n","import { CardDeck } from \"../card-deck\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { PlayerInfo, Gender } from \"../player-info\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { Weighted } from \"../weighted\";\r\nimport { SelectionAlgorithmBase } from \"./selection-algorithm-base\";\r\nimport _ from \"lodash\";\r\nimport { higherArrangementPropabilityTags } from \"../../preferences\";\r\nimport { Insights, PlayerSelectionInsights, PlayerSelection, CardsInsight } from \"./insights\";\r\n\r\nexport class MelinaAlgorithm extends SelectionAlgorithmBase {\r\n    /** the percentage of cards that were played from one deck once the cards get weighted much lower */\r\n    private readonly deckExhaustionLimit = 0.1;\r\n\r\n    public readonly insights: Insights = new Insights();\r\n\r\n    public getAllCardDeckStatistics(): CardsInsight {\r\n        const weighted = this.weightCards(this.status.decks, null);\r\n        const deckWeights = new Array<Weighted<CardDeck>>();\r\n        const willPowerWeights: { [willPower: number]: number } = {};\r\n\r\n        for (const element of weighted) {\r\n            deckWeights.push({\r\n                value: element.deck,\r\n                weight: element.cards.reduce((x, y) => x + y.weight, 0) * element.deck.weight,\r\n            });\r\n\r\n            for (const card of element.cards) {\r\n                if (willPowerWeights[card.value.willPower || 0] === undefined) {\r\n                    willPowerWeights[card.value.willPower || 0] = 0;\r\n                }\r\n                willPowerWeights[card.value.willPower || 0] += card.weight * element.deck.weight;\r\n            }\r\n        }\r\n        \r\n        const willPowerWeightsArray = new Array<Weighted<number | null>>();\r\n        for (const willPower in willPowerWeights) {\r\n            if (willPowerWeights.hasOwnProperty(willPower)) {\r\n                const element = willPowerWeights[willPower];\r\n                willPowerWeightsArray.push({\r\n                    value: Number(willPower) === 0 ? null : Number(willPower),\r\n                    weight: element,\r\n                });\r\n            }\r\n        }\r\n\r\n        return { decks: deckWeights, willPower: willPowerWeightsArray };\r\n    }\r\n\r\n    public selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[] {\r\n        if (playerSettings.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (playerSettings.length > this.status.players.length) {\r\n            throw new Error(\"More players were requested than available.\");\r\n        }\r\n\r\n        const forArrangement = new Array<string>();\r\n        const result: (PlayerInfo | null)[] = playerSettings.map((_, i) =>\r\n            definedPlayers.length > i ? definedPlayers[i] : null,\r\n        );\r\n\r\n        for (const player of definedPlayers.filter(x => x !== null).map(x => x!)) {\r\n            const arrangement = this.status.arrangements.find(\r\n                x => x.p1 === player.id || x.p2 === player.id,\r\n            );\r\n\r\n            if (arrangement !== undefined) {\r\n                if (arrangement.p1 === player.id) {\r\n                    forArrangement.push(arrangement.p2);\r\n                } else {\r\n                    forArrangement.push(arrangement.p1);\r\n                }\r\n            }\r\n        }\r\n\r\n        let resultCounter = 0;\r\n        const insights: PlayerSelectionInsights = {\r\n            predefined: definedPlayers.filter(x => x != null).map(x => x!.id),\r\n            rounds: [],\r\n        };\r\n\r\n        while (result.findIndex(x => x === null) !== -1) {\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                if (result[i] !== null) {\r\n                    continue;\r\n                }\r\n\r\n                const gender = playerSettings[i];\r\n                let sourceList: PlayerInfo[];\r\n\r\n                switch (gender) {\r\n                    case \"None\":\r\n                        sourceList = this.status.players;\r\n                        break;\r\n                    case \"Male\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Male\");\r\n                        break;\r\n                    case \"Female\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Female\");\r\n                        break;\r\n                    default:\r\n                        continue;\r\n                }\r\n\r\n                const source = sourceList.filter(x => !_.includes(result, x));\r\n                const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n                const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n\r\n                const selectionRoundInsights = new Array<PlayerSelection>();\r\n                const player = this.selectRandomWeighted(source, p => {\r\n                    let weight = 1;\r\n\r\n                    if (_.some(forArrangement, x => x === p.id)) {\r\n                        if (\r\n                            _.some(higherArrangementPropabilityTags, x =>\r\n                                _.some(tags, y => x === y.toLowerCase()),\r\n                            )\r\n                        ) {\r\n                            weight += source.length;\r\n                        } else {\r\n                            // everyone has ~ the weight 1\r\n                            weight += source.length * 0.5;\r\n                        }\r\n                    }\r\n\r\n                    if (gender === \"None\" && this.status.preferOppositeGenders) {\r\n                        if (malesCount > femalesCount) {\r\n                            if (p.gender === \"Female\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        } else if (femalesCount > malesCount) {\r\n                            if (p.gender === \"Male\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    console.log(`${p.name} -> ${weight}`);\r\n                    selectionRoundInsights.push({ playerId: p.id, weight, chosen: false });\r\n                    return weight;\r\n                })!;\r\n\r\n                selectionRoundInsights.find(x => x.playerId === player.id)!.chosen = true;\r\n                insights.rounds.push(selectionRoundInsights);\r\n\r\n                result[i] = player;\r\n                resultCounter++;\r\n\r\n                const arrangement = this.status.arrangements.find(\r\n                    x => x.p1 === player.id || x.p2 === player.id,\r\n                );\r\n                if (arrangement !== undefined) {\r\n                    if (arrangement.p1 === player.id) {\r\n                        forArrangement.push(arrangement.p2);\r\n                    } else {\r\n                        forArrangement.push(arrangement.p1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (resultCounter === result.length) {\r\n                break;\r\n            }\r\n\r\n            // here we have to handle Same/Opposite genders\r\n\r\n            const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n            const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n            let dominant: Gender | null = null;\r\n\r\n            if (malesCount > femalesCount) dominant = \"Male\";\r\n            else if (femalesCount > malesCount) dominant = \"Female\";\r\n\r\n            if (dominant === null) {\r\n                // we try to change a 'Same' gender, so Same and opposite stay on different sites\r\n                // because the player gender will become dominant and opposite is always against dominant\r\n\r\n                let changed = false;\r\n                for (let i = 0; i < playerSettings.length; i++) {\r\n                    if (playerSettings[i] === \"Same\") {\r\n                        playerSettings[i] = \"None\";\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!changed) {\r\n                    // we have the problem here that we only have opposite genders left but we have no dominant gender.\r\n                    // We change the first opposite to none (so it gets filled) and all other to Same, so they will get\r\n                    // the same gender like the first item that was changed to Same\r\n\r\n                    for (let i = 0; i < playerSettings.length; i++) {\r\n                        if (playerSettings[i] === \"Opposite\") {\r\n                            if (!changed) {\r\n                                playerSettings[i] = \"None\";\r\n                                changed = true;\r\n                            } else {\r\n                                playerSettings[i] = \"Same\";\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                const gender = playerSettings[i];\r\n\r\n                switch (gender) {\r\n                    case \"Opposite\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Male\";\r\n                        } else {\r\n                            playerSettings[i] = \"Female\";\r\n                        }\r\n                        break;\r\n                    case \"Same\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Female\";\r\n                        } else {\r\n                            playerSettings[i] = \"Male\";\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.insights.playerSelection = insights;\r\n        return result.map(x => x!);\r\n    }\r\n\r\n    public selectCard<TCard extends Card>(cardType: string): TCard {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n        const weightedCards: Array<Weighted<Card>> = [];\r\n\r\n        for (const deck of weightedDecks) {\r\n            weightedCards.push(\r\n                ...deck.cards.map(x => ({ value: x.value, weight: x.weight * deck.deck.weight })),\r\n            );\r\n        }\r\n\r\n        const selected = this.selectRandomFromWeightedList(weightedCards);\r\n        if (selected === undefined) {\r\n            throw new Error(\"That should not actually happen\");\r\n        }\r\n\r\n        return selected as TCard;\r\n    }\r\n\r\n    public selectNextSlide(availableSlides: SlideRegistration[]): string | undefined {\r\n        const uniqueCardTypes: string[] = [];\r\n        for (const slide of availableSlides) {\r\n            for (const cardType of slide.requestedCards) {\r\n                if (uniqueCardTypes.findIndex(x => x === cardType) === -1) {\r\n                    uniqueCardTypes.push(cardType);\r\n                }\r\n            }\r\n        }\r\n\r\n        const cardTypeRatings: { [type: string]: number } = {};\r\n        for (const cardType of uniqueCardTypes) {\r\n            const weightedDecks = this.weightCards(\r\n                this.status.decks.filter(x => x.weight !== 0),\r\n                cardType,\r\n            );\r\n\r\n            const allCards: Array<Weighted<Card>> = [];\r\n            for (const cardDeck of weightedDecks) {\r\n                allCards.push(...cardDeck.cards);\r\n            }\r\n\r\n            if (allCards.length === 0) {\r\n                cardTypeRatings[cardType] = 0;\r\n            } else {\r\n                cardTypeRatings[cardType] =\r\n                    0.75 + (0.25 * allCards.reduce((x, y) => x + y.weight, 0)) / allCards.length;\r\n            }\r\n        }\r\n\r\n        const weightedSlides: Array<Weighted<SlideRegistration>> = [];\r\n        for (const slide of availableSlides) {\r\n            const slideSettings = this.status.slides.find(x => x.value === slide.slideType);\r\n\r\n            if (slideSettings === undefined || slideSettings.weight === 0) {\r\n                continue;\r\n            }\r\n\r\n            let factor = 1;\r\n            for (const cardType of slide.requestedCards) {\r\n                factor = Math.min(cardTypeRatings[cardType], factor);\r\n            }\r\n\r\n            weightedSlides.push({ weight: factor * slideSettings.weight, value: slide });\r\n        }\r\n\r\n        this.insights.slideWeights = {\r\n            weights: weightedSlides.map(x => ({ weight: x.weight, value: x.value.slideType })),\r\n        };\r\n\r\n        const selected = this.selectRandomWeighted(weightedSlides, slide => slide.weight);\r\n        if (selected === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return selected.value.slideType;\r\n    }\r\n\r\n    public getSips(min: number): number {\r\n        return min + 1;\r\n    }\r\n\r\n    protected weightCards(\r\n        decks: CardDeck[],\r\n        type: string | null,\r\n    ): Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> {\r\n        const filtered: CardDeck[] = decks.map(x => ({\r\n            cards: x.cards.filter(card => {\r\n                if (type !== null && card.type !== type) {\r\n                    return false;\r\n                }\r\n                return (\r\n                    card.tags.length === 0 ||\r\n                    card.tags.findIndex(x => {\r\n                        const weightedTag = this.status.tags.find(y => y.value === x);\r\n                        return weightedTag !== undefined && weightedTag.weight === 0;\r\n                    }) === -1\r\n                );\r\n            }),\r\n            url: x.url,\r\n            weight: x.weight,\r\n        }));\r\n\r\n        // cards are now of the correct type and playable\r\n\r\n        const totalCards = filtered.reduce((x, y) => x + y.cards.length, 0);\r\n\r\n        // every card should be rated by x when 0 < x <= 1\r\n        const result: Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> = [];\r\n\r\n        const willPower = this.status.willPower;\r\n\r\n        for (const deck of filtered) {\r\n            // cards from this deck that were already played\r\n            const cardsPlayed = this.status.cardsHistory.filter(\r\n                x => deck.cards.findIndex(y => y.id === x) > -1,\r\n            );\r\n\r\n            // compute the deck exhaustion factor\r\n            let exhaustionFactor: number;\r\n\r\n            const percentage = cardsPlayed.length / deck.cards.length;\r\n            if (percentage > this.deckExhaustionLimit) {\r\n                // cubic reduction\r\n                exhaustionFactor = Math.pow(1.1 - percentage, 2) * 0.5;\r\n            } else {\r\n                exhaustionFactor = 1;\r\n            }\r\n\r\n            const weightedCards: Array<Weighted<Card>> = [];\r\n            for (const card of deck.cards) {\r\n                const willPowerRating = this.rateWillPower(card.willPower, willPower);\r\n                const historyFactor = this.getHistoryFactor(\r\n                    card.id,\r\n                    this.status.cardsHistory,\r\n                    totalCards,\r\n                );\r\n                const tagsFactor = this.getTagsFactor(card.tags, this.status.tags);\r\n                const weight = exhaustionFactor * willPowerRating * historyFactor * tagsFactor;\r\n                if (weight === 0) {\r\n                    continue;\r\n                }\r\n\r\n                weightedCards.push({\r\n                    value: card,\r\n                    weight: weight,\r\n                });\r\n            }\r\n\r\n            result.push({ deck, cards: weightedCards });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public recomputeWillPower(memory: string[]): { willPower: number; memory: string[] } {\r\n        const addedMemory = new Array<string>();\r\n        const now = new Date();\r\n        let result = this.status.willPower;\r\n\r\n        if (!_.includes(memory, \"AFTER_10\") && (now.getHours() > 22 || now.getHours() < 8)) {\r\n            result++;\r\n            addedMemory.push(\"AFTER_10\");\r\n        }\r\n\r\n        const slidesCount = this.status.slidesHistory.length;\r\n        if (slidesCount % 12 === 0) {\r\n            const id = slidesCount / 12;\r\n            if (!_.includes(memory, `SLIDES_${id}`)) {\r\n                result++;\r\n                addedMemory.push(`SLIDES_${id}`);\r\n            }\r\n        }\r\n\r\n        return { willPower: result, memory: addedMemory };\r\n    }\r\n\r\n    protected getTagsFactor(tags: string[], tagWeights: Array<Weighted<string>>) {\r\n        const weights = tags\r\n            .map(x => tagWeights.find(y => y.value === x))\r\n            .filter(x => x !== undefined)\r\n            .map(x => x!.weight);\r\n        if (weights.length > 0) {\r\n            return Math.min(...weights);\r\n        }\r\n        return 0.5;\r\n    }\r\n\r\n    /** return a value between 0 and 1 that returns 1 if the card was never played and a smaller number if the card was played recently */\r\n    protected getHistoryFactor(id: string, history: string[], totalCards: number) {\r\n        const historyPosition = history.findIndex(x => x === id);\r\n        if (historyPosition === -1) {\r\n            return 1;\r\n        }\r\n\r\n        return historyPosition / totalCards;\r\n    }\r\n\r\n    /** return a value between 0 and 1 for the given will power */\r\n    protected rateWillPower(cardWillPower: number | undefined, willPower: number) {\r\n        if (cardWillPower === undefined) {\r\n            return 0.75;\r\n        }\r\n\r\n        // --- --- --- ||| --- --- --- ---\r\n        // 0.5 .75 .75  1  .25 .15 .05 .05\r\n\r\n        if (cardWillPower === willPower) {\r\n            return 1;\r\n        }\r\n\r\n        if (cardWillPower > willPower) {\r\n            const result = 0.35 - (cardWillPower - willPower) * 0.1;\r\n            return result < 0 ? 0 : result;\r\n        }\r\n\r\n        return 0.5;\r\n    }\r\n\r\n    protected filterDecks(decks: CardDeck[]): CardDeck[] {\r\n        const filteredDecks: CardDeck[] = [];\r\n\r\n        for (const deck of decks) {\r\n            // remove disabled decks\r\n            if (deck.weight <= 0) {\r\n                continue;\r\n            }\r\n\r\n            const cards: Card[] = [];\r\n            for (const card of deck.cards) {\r\n                if (!this.verifyPlayerSpecification(this.status.players, card.players)) {\r\n                    continue;\r\n                }\r\n\r\n                let weightedZero = false;\r\n                for (const tag of card.tags) {\r\n                    if (this.checkIfWeightedZero(tag, this.status.tags)) {\r\n                        weightedZero = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (weightedZero) {\r\n                    continue;\r\n                }\r\n\r\n                if (!card.condition(this.status)) {\r\n                    continue;\r\n                }\r\n\r\n                cards.push(card);\r\n            }\r\n\r\n            if (cards.length > 0) {\r\n                filteredDecks.push({ cards, weight: deck.weight, url: deck.url });\r\n            }\r\n        }\r\n\r\n        return filteredDecks;\r\n    }\r\n\r\n    protected checkIfWeightedZero<T>(value: T, weights: Array<Weighted<T>>): boolean {\r\n        return weights.findIndex(x => x.value === value && x.weight <= 0) > -1;\r\n    }\r\n\r\n    protected verifyPlayerSpecification(\r\n        players: PlayerInfo[],\r\n        specification: PlayerSetting[],\r\n    ): boolean {\r\n        if (specification.length > players.length) {\r\n            return false;\r\n        }\r\n\r\n        const specificationMales = specification.filter(x => x.gender === \"Male\").length;\r\n        const actualMales = players.filter(x => x.gender === \"Male\").length;\r\n\r\n        if (specificationMales > actualMales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationFemales = specification.filter(x => x.gender === \"Female\").length;\r\n        const actualFemales = players.filter(x => x.gender === \"Female\").length;\r\n        if (specificationFemales > actualFemales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationOpposite = specification.filter(x => x.gender === \"Opposite\").length;\r\n        if (specificationOpposite > Math.min(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        const specificationSame = specification.filter(x => x.gender === \"Same\").length;\r\n        if (specificationSame + 1 > Math.max(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Card } from \"./cards/card\";\r\nimport { CardParserFactory } from \"./parsing/card-parser-factory\";\r\n\r\nexport class CardsLoader {\r\n    private readonly domParser = new DOMParser();\r\n\r\n    constructor(\r\n        private requestFile: (url: string) => Promise<string>,\r\n        private parserFactory: CardParserFactory,\r\n    ) {}\r\n\r\n    public async loadFromUrl(url: string): Promise<Card[]> {\r\n        const result: Card[] = [];\r\n\r\n        await this.loadFile(url, result, undefined);\r\n        return result;\r\n    }\r\n\r\n    private async loadFile(url: string, result: Card[], requestedCards?: string[]): Promise<void> {\r\n        const xml = await this.requestFile(url);\r\n        \r\n        // the DOMParser doesn't like XML docs without a Root element\r\n        const xmlDoc = this.domParser.parseFromString(\"<Root>\" + xml + \"</Root>\", \"text/xml\");\r\n\r\n        const cardElements = xmlDoc.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < cardElements.length; i++) {\r\n            const xmlElement = cardElements[i];\r\n\r\n            if (xmlElement.parentElement !== xmlDoc.documentElement) {\r\n                continue;\r\n            }\r\n\r\n            if (xmlElement.nodeName === \"DeckReference\") {\r\n                await this.parseDeckReference(xmlElement, result, requestedCards);\r\n                continue;\r\n            }\r\n\r\n            const parser = this.parserFactory.createParser(xmlElement.nodeName);\r\n            if (parser === undefined) {\r\n                console.error(\r\n                    `The card ${xmlElement.nodeName} could not be parsed. No parser found.`,\r\n                );\r\n                continue;\r\n            }\r\n\r\n            const card = parser.deserialize(xmlElement);\r\n            if (requestedCards !== undefined && requestedCards.indexOf(card.id) === -1) {\r\n                continue;\r\n            }\r\n\r\n            result.push(card);\r\n        }\r\n    }\r\n\r\n    private parseDeckReference(\r\n        xmlElement: Element,\r\n        result: Card[],\r\n        requestedCards?: string[],\r\n    ): Promise<void> {\r\n        const url = xmlElement.getAttribute(\"url\");\r\n        if (url === null) {\r\n            throw new Error(\"The url on a deck reference must not be null.\");\r\n        }\r\n\r\n        const referenceRequests: string[] = [];\r\n\r\n        const cardRefs = xmlElement.getElementsByTagName(\"CardRef\");\r\n        for (let i = 0; i < cardRefs.length; i++) {\r\n            const cardRef = cardRefs[i];\r\n\r\n            const idAttr = cardRef.getAttribute(\"id\");\r\n            if (idAttr === null) {\r\n                continue;\r\n            }\r\n\r\n            referenceRequests.push(idAttr);\r\n        }\r\n\r\n        let deckWhitelist: string[] | undefined;\r\n        if (referenceRequests.length === 0) {\r\n            deckWhitelist = requestedCards;\r\n        } else {\r\n            if (requestedCards !== undefined) {\r\n                deckWhitelist = [];\r\n\r\n                // only request cards that are in the superior list aswell as in the reference list\r\n                for (const cardId of requestedCards) {\r\n                    if (referenceRequests.indexOf(cardId) > -1) {\r\n                        deckWhitelist.push(cardId);\r\n                    }\r\n                }\r\n            } else {\r\n                deckWhitelist = referenceRequests;\r\n            }\r\n        }\r\n\r\n        return this.loadFile(url, result, deckWhitelist);\r\n    }\r\n}\r\n","export class PlayerSetting {\r\n    constructor(public playerIndex: number, public gender: GenderRequirement = \"None\") {}\r\n}\r\n\r\nexport type GenderRequirement = 'None' | 'Male' | 'Female' | 'Opposite' | 'Same';\r\n","import { GenderRequirement } from \"../cards/player-setting\";\r\n\r\nexport class ParserHelper {\r\n    /** parse a player tag, e. g. \"Player\" or \"Player2\" or \"Player5000\" and return the index (1 if none is specified) or undefined */\r\n    public static parsePlayerTag(s: string): number | undefined {\r\n        const tagName = \"Player\";\r\n\r\n        if (!s.startsWith(tagName)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (s.length > tagName.length) {\r\n            const index = Number(s.substring(tagName.length));\r\n            return isNaN(index) ? undefined : index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /** parse a gender requirement string, e. g. \"m\", \"male\", \"Male\", etc. */\r\n    public static parseGenderRequirement(s: string): GenderRequirement |undefined {\r\n        s = s.toLowerCase();\r\n\r\n        if (s in this.genderRequirementMap) {\r\n            return this.genderRequirementMap[s];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** parse a timespan in the format hh:mm:ss or mm:ss */\r\n    public static parseTimeSpanStringToSeconds(s: string): number | undefined {\r\n        const a = s.split(\":\");\r\n\r\n        if (a.length > 3) {\r\n            return undefined;\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        for (let i = 0; i < a.length; i++) {\r\n            const p = Number(a[i]);\r\n            if (isNaN(p)) {\r\n                return undefined;\r\n            }\r\n\r\n            result += p * Math.pow(60, (a.length - i - 1));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static genderRequirementMap: { [id: string]: GenderRequirement } = {\r\n        m: \"Male\",\r\n        male: \"Male\",\r\n        f: \"Female\",\r\n        female: \"Female\",\r\n        o: \"Opposite\",\r\n        opposite: \"Opposite\",\r\n        s: \"Same\",\r\n        same: \"Same\",\r\n    };\r\n}\r\n","import { BaseCard } from \"../cards/base-card\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { CardParser } from \"./card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\n\r\nexport abstract class BaseCardParser<TCard extends BaseCard> implements CardParser {\r\n    public deserialize(xml: Element): Card {\r\n        const card = this.createCard();\r\n\r\n        const idAttr = xml.getAttribute(\"id\");\r\n        if (idAttr === null) {\r\n            throw new Error(\"The id of a card must not be null\");\r\n        }\r\n        card.id = idAttr;\r\n\r\n        card.willPower = Number(xml.getAttribute(\"willPower\"));\r\n        if (card.willPower < 1 || card.willPower > 10) {\r\n            card.willPower = undefined;\r\n        }\r\n\r\n        const tags = xml.getAttribute(\"tags\");\r\n\r\n        card.tags = tags\r\n            ? [...this.getDefaultAttributes(), ...tags.split(\",\")]\r\n            : this.getDefaultAttributes();\r\n\r\n        this.parseAttributes(xml, card);\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            if (element.tagName === `${xml.tagName}.players`) {\r\n                card.players = this.parsePlayers(element);\r\n                continue;\r\n            }\r\n\r\n            this.parseElement(element, card);\r\n        }\r\n\r\n        if (card.players === undefined) {\r\n            card.players = [];\r\n        }\r\n\r\n        return card;\r\n    }\r\n\r\n    protected getDefaultAttributes(): string[] {\r\n        return [];\r\n    }\r\n\r\n    protected abstract parseAttributes(rootXml: Element, card: TCard): void;\r\n    protected abstract parseElement(element: Element, card: TCard): boolean;\r\n\r\n    protected abstract createCard(): TCard;\r\n\r\n    private parsePlayers(xml: Element): PlayerSetting[] {\r\n        const players: PlayerSetting[] = [];\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            const player = this.parsePlayer(element);\r\n            if (player !== undefined) {\r\n                players.push(player);\r\n            }\r\n        }\r\n\r\n        return players;\r\n    }\r\n\r\n    private parsePlayer(xml: Element): PlayerSetting | undefined {\r\n        const index = ParserHelper.parsePlayerTag(xml.tagName);\r\n        if (index === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        let requiredGender: GenderRequirement = \"None\";\r\n\r\n        const genderAttr = xml.getAttribute(\"gender\");\r\n        if (genderAttr) {\r\n            const genderReq = ParserHelper.parseGenderRequirement(genderAttr);\r\n\r\n            if (genderReq !== undefined) {\r\n                requiredGender = genderReq;\r\n            }\r\n        }\r\n\r\n        return new PlayerSetting(index, requiredGender);\r\n    }\r\n}\r\n","import { TextTranslation } from \"./text-translation\";\r\n\r\nexport class TextElement {\r\n    public weight: number = 1;\r\n    public translations!: TextTranslation[];\r\n}","export class TextTranslation {\r\n    constructor(public lang: string, public content: string) {}\r\n}\r\n","import { TextElement } from \"../cards/text-element\";\r\nimport { TextTranslation } from \"../cards/text-translation\";\r\n\r\n/** parses the text content of an element */\r\nexport class TextContentParser {\r\n    public result: TextElement[];\r\n\r\n    private isConditionalElement: boolean | undefined = undefined;\r\n\r\n    constructor() {\r\n        this.result = [];\r\n    }\r\n\r\n    public addElement(xml: Element): boolean {\r\n        switch (xml.tagName) {\r\n            case \"Case\":\r\n                if (this.isConditionalElement === false) {\r\n                    return false;\r\n                }\r\n                this.isConditionalElement = true;\r\n\r\n                this.result.push(this.parseTextElement(xml));\r\n                return true;\r\n            case \"Text\":\r\n                if (this.isConditionalElement === true) {\r\n                    return false;\r\n                } else if (this.isConditionalElement === undefined) {\r\n                    this.result.push({ translations: [], weight: 1 });\r\n                }\r\n\r\n                this.isConditionalElement = false;\r\n                this.result[0].translations.push(this.parseTranslation(xml));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private parseTextElement(element: Element): TextElement {\r\n        const translations: TextTranslation[] = [];\r\n        const textElement = new TextElement();\r\n\r\n        const weight = Number(element.getAttribute(\"weight\"));\r\n        if (!isNaN(weight)) {\r\n            textElement.weight = weight;\r\n        }\r\n\r\n        const texts = element.getElementsByTagName(\"Text\");\r\n        for (let i = 0; i < texts.length; i++) {\r\n            const textXmlNode = texts[i];\r\n            translations.push(this.parseTranslation(textXmlNode));\r\n        }\r\n\r\n        textElement.translations = translations;\r\n        return textElement;\r\n    }\r\n\r\n    private parseTranslation(element: Element) {\r\n        const lang = element.getAttribute(\"lang\");\r\n        if (lang === null) {\r\n            throw new Error(\"lang attribute not found on element\");\r\n        }\r\n\r\n        if (element.textContent === null) {\r\n            throw new Error(\"The text content of the element is empty.\");\r\n        }\r\n        \r\n        return new TextTranslation(lang, element.textContent);\r\n    }\r\n}\r\n","import { TextCard } from \"../cards/text-card\";\r\nimport { BaseCardParser } from \"./base-card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\nimport { TextContentParser } from \"./text-content-parser\";\r\n\r\nexport abstract class TextCardParser<TCard extends TextCard> extends BaseCardParser<TCard> {\r\n    private textContentParser = new TextContentParser();\r\n\r\n    protected parseAttributes(rootXml: Element, card: TCard): void {\r\n        const followUpAttr = rootXml.getAttribute(\"followUpProbability\");\r\n        if (followUpAttr !== null) {\r\n            const followUpProbability = Number(followUpAttr);\r\n            if (isNaN(followUpProbability)) {\r\n                throw new Error(\r\n                    `The follow up propability ${followUpAttr} could not be parsed as a number (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpPropability = followUpProbability;\r\n        }\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay !== null) {\r\n            const seconds = ParserHelper.parseTimeSpanStringToSeconds(followUpDelay);\r\n            if (seconds === undefined) {\r\n                throw new Error(\r\n                    `Could not parse followUpDelay ${followUpDelay} as a timespan (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpDelay = seconds;\r\n        } else {\r\n            card.followUpDelay = 0;\r\n        }\r\n    }\r\n\r\n    protected parseElement(element: Element, card: TCard): boolean {\r\n        switch (element.tagName) {\r\n            case \"Text\":\r\n            case \"Case\":\r\n                card.content = this.textContentParser.result;\r\n                return this.textContentParser.addElement(element);\r\n        }\r\n\r\n        if (element.tagName === `${card.type}.followUp`) {\r\n            const parser = new TextContentParser();\r\n\r\n            const subElements = element.getElementsByTagName(\"*\");\r\n            for (let i = 0; i < subElements.length; i++) {\r\n                const subElement = subElements[i];\r\n                if (subElement.parentElement !== element) {\r\n                    continue;\r\n                }\r\n\r\n                parser.addElement(subElement);\r\n            }\r\n\r\n            card.followUp = parser.result;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { BaseCard } from \"./base-card\";\r\nimport { TextElement } from \"./text-element\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport _ from \"lodash\";\r\n\r\nexport abstract class TextCard extends BaseCard {\r\n    /** the propability (0-1) that this card follows up */\r\n    public followUpPropability: number = 1;\r\n\r\n    /** the delay of the follow up in seconds */\r\n    public followUpDelay!: number;\r\n\r\n    public content!: TextElement[];\r\n    public followUp!: TextElement[];\r\n\r\n    public condition: (status: GameStatus) => boolean = status => {\r\n        return _.some(this.content, x => _.some(x.translations, y => y.lang === status.language));\r\n    };\r\n}\r\n","import { GameStatus } from \"../game-status\";\r\nimport { Card } from \"./card\";\r\nimport { PlayerSetting } from \"./player-setting\";\r\n\r\n/** A very basic implementation of Card  */\r\nexport abstract class BaseCard implements Card {\r\n  public id!: string;\r\n  public willPower!: number | undefined;\r\n  public players!: PlayerSetting[];\r\n  public tags!: string[];\r\n  public condition!: (status: GameStatus) => boolean;\r\n\r\n  public readonly abstract type: string;\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class FactCard extends TextCard {\r\n    public readonly type: string = \"FactCard\";\r\n    public isTrueFact: boolean = false;\r\n}\r\n","import { TextCardParser } from \"../../core/parsing/text-card-parser\";\r\nimport { FactCard } from \"../cards/fact-card\";\r\n\r\nexport class FactCardParser extends TextCardParser<FactCard> {\r\n    protected createCard(): FactCard {\r\n        return new FactCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: FactCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const attr = rootXml.getAttribute(\"is\");\r\n        card.isTrueFact = attr === null ? true : this.toBool(attr);\r\n    }\r\n\r\n    protected toBool(value?: string): boolean {\r\n        if (value === \"true\") {\r\n            return true;\r\n        }\r\n\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return !!+value;\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DownCard extends TextCard {\r\n    public readonly type: string = \"DownCard\";\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { DownCard } from \"../cards/down-card\";\r\n\r\nexport class DownCardParser extends TextCardParser<DownCard> {\r\n    protected createCard(): DownCard {\r\n        return new DownCard();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NeverEverCard extends TextCard {\r\n    public readonly type: string = \"NeverEverCard\";\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { NeverEverCard } from \"../cards/never-ever-card\";\r\n\r\nexport class NeverEverCardParser extends TextCardParser<NeverEverCard> {\r\n    protected createCard(): NeverEverCard {\r\n        return new NeverEverCard();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class JokeCard extends TextCard {\r\n    public readonly type: string = \"JokeCard\";\r\n}\r\n","import { JokeCard } from './../cards/joke-card';\r\nimport { TextCardParser } from \"@core/parsing/text-card-parser\";\r\n\r\nexport class JokeCardParser extends TextCardParser<JokeCard> {\r\n    protected createCard(): JokeCard {\r\n        return new JokeCard();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class QuestionCard extends TextCard {\r\n    public readonly type: string = \"QuestionCard\";\r\n}\r\n","import { QuestionCard } from './../cards/question-card';\r\nimport { TextCardParser } from \"@core/parsing/text-card-parser\";\r\n\r\nexport class QuestionCardParser extends TextCardParser<QuestionCard> {\r\n    protected createCard(): QuestionCard {\r\n        return new QuestionCard();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\n\r\nexport class TaskCard extends TextCard {\r\n    public readonly type: string = \"TaskCard\";\r\n    public genderRequirement: GenderRequirement = \"None\";\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { FactCardParser } from \"./parsing/fact-card-parser\";\r\nimport { DownCardParser } from \"./parsing/down-card-parser\";\r\nimport { NeverEverCardParser } from \"./parsing/never-ever-card-parser\";\r\nimport { JokeCardParser } from \"./parsing/joke-card-parser\";\r\nimport { QuestionCardParser } from \"./parsing/question-card-parser\";\r\nimport { TaskCardParser } from \"./parsing/task-card-parser\";\r\n\r\ntype ParserRegistration = { [type: string]: new () => CardParser };\r\n\r\nexport const parsers: ParserRegistration = {\r\n    FactCard: FactCardParser,\r\n    DownCard: DownCardParser,\r\n    NeverEverCard: NeverEverCardParser,\r\n    JokeCard: JokeCardParser,\r\n    QuestionCard: QuestionCardParser,\r\n    TaskCard: TaskCardParser,\r\n};\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { TaskCard } from '../cards/task-card';\r\n\r\nexport class TaskCardParser extends TextCardParser<TaskCard> {\r\n    protected createCard(): TaskCard {\r\n        return new TaskCard();\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport { CardsLoader } from \"../../core/cards-loader\";\r\nimport { Card } from \"../../core/cards/card\";\r\nimport { DefaultCardParserFactory } from \"../../impl/default-card-parser-factory\";\r\n\r\nconst parserFactory = new DefaultCardParserFactory();\r\nconst loader = new CardsLoader(requestFile, parserFactory);\r\n\r\nasync function requestFile(url: string) : Promise<string> {\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n}\r\n\r\nexport async function loadCards(url: string): Promise<Card[]> {\r\n    return loader.loadFromUrl(url);\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { CardParserFactory } from \"../core/parsing/card-parser-factory\";\r\nimport { parsers } from \"./registrations\";\r\n\r\nexport class DefaultCardParserFactory implements CardParserFactory {\r\n    private parsers: { [type: string]: new () => CardParser };\r\n\r\n    constructor() {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    public createParser(cardType: string): CardParser | undefined {\r\n        if (cardType in this.parsers) {\r\n            return new this.parsers[cardType];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n","import * as cardsLoader from \"./api/cards-loader\";\r\n\r\nexport default {\r\n    api: {\r\n        cardsLoader,\r\n    },\r\n};\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { from, of } from \"rxjs\";\r\nimport { catchError, filter, map, mergeMap } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport { loadSourceAsync } from \"./actions\";\r\n\r\nexport const loadSourceEpic: Epic<RootAction, RootAction, RootState, Services> = (\r\n    action$,\r\n    _state$,\r\n    { api },\r\n) =>\r\n    action$.pipe(\r\n        filter(isActionOf(loadSourceAsync.request)),\r\n        mergeMap(action =>\r\n            from(api.cardsLoader.loadCards(action.payload)).pipe(\r\n                map(cards => loadSourceAsync.success({ url: action.payload, cards })),\r\n                catchError((message: string) =>\r\n                    of(loadSourceAsync.failure({ url: action.payload, message })),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n","import { LocalizeContextProps } from \"react-localize-redux\";\r\nimport { Translator } from \"GameModels\";\r\n\r\nexport function toTranslator(localize: LocalizeContextProps): Translator {\r\n    return {\r\n        languageCode: localize.activeLanguage.code,\r\n        translate: x => localize.translate(x) as string,\r\n    }\r\n}","import { ParsingOptions } from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { Theme } from \"@material-ui/core\";\r\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\r\n\r\nexport function getRootStyles(): CSSProperties {\r\n    return {\r\n        backgroundColor: \"#3498db\",\r\n        height: \"100%\",\r\n        fontSize: 25,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        color: \"white\",\r\n        cursor: \"pointer\",\r\n    };\r\n}\r\n\r\nexport function getContentStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        textAlign: \"center\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            width: \"100%\",\r\n            marginLeft: 30,\r\n            marginRight: 30,\r\n            fontSize: 20,\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"80%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"60%\",\r\n        },\r\n    }\r\n}\r\n\r\nexport function spaceHeaderStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        visibility: \"hidden\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            display: \"none\",\r\n        }\r\n    };\r\n}\r\n\r\nfunction MyParagaph({ children, ...props }: any) {\r\n    return (\r\n        <p {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction MyH3({ children, ...props }: any) {\r\n    return (\r\n        <h3 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h3>\r\n    );\r\n}\r\n\r\nfunction MyH4({ children, ...props }: any) {\r\n    return (\r\n        <h4 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h4>\r\n    );\r\n}\r\n\r\nexport const defaultMarkdownOptions: ParsingOptions = {\r\n    overrides: {\r\n        p: {\r\n            component: MyParagaph,\r\n            props: {},\r\n        },\r\n        h3: {\r\n            component: MyH3,\r\n            props: {},\r\n        },\r\n        h4: {\r\n            component: MyH4,\r\n            props: {},\r\n        },\r\n    },\r\n};\r\n","import { SlidePresenter } from \"./slide-presenter\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { ReactNode } from \"react\";\r\nimport * as actions from \"../../actions\";\r\nimport { ActionType } from \"typesafe-actions\";\r\n\r\nexport abstract class CardPresenter<TCard extends Card> implements SlidePresenter {\r\n    requiredCards: string[];\r\n\r\n    constructor(protected cardType: string, public slideType: string) {\r\n        this.requiredCards = [cardType];\r\n    }\r\n\r\n    initialize(): ActionType<any>[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const card = selection.selectCard(this.cardType) as TCard;\r\n\r\n        return [actions.applyCard(card), ...this.initializeCard(card)];\r\n    }\r\n\r\n    initializeFollowUp(card: Card | null, param: any): ActionType<any>[] {\r\n        return this.initializeFollowUpCard(card as TCard, param);\r\n    }\r\n\r\n    abstract render(): ReactNode;\r\n    protected abstract initializeCard(card: TCard): ActionType<any>[];\r\n    protected abstract initializeFollowUpCard(card: TCard, param: any): ActionType<any>[];\r\n}\r\n","export abstract class TextFragment {}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomTextFragment extends TextFragment {\r\n    constructor(public texts: string[]) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport abstract class VariableFragment extends TextFragment {\r\n}","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SipsFragment extends VariableFragment {\r\n    constructor(public minSips: number = 1, public sipsIndex: number = 1) {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\n\r\nexport class PlayerReferenceFragment extends VariableFragment {\r\n    constructor(public playerIndex: number = 1, public gender: GenderRequirement = \"None\") {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RawTextFragment extends TextFragment {\r\n    constructor(public text: string) {\r\n        super();\r\n    }\r\n}","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomNumberFragment extends TextFragment {\r\n    constructor(public numbers: RandomNumber[]) {\r\n        super();\r\n    }\r\n}\r\n\r\nexport interface RandomNumber {\r\n    getCount(): number;\r\n}\r\n\r\nexport class NumberRange implements RandomNumber {\r\n    constructor(public min: number, public max: number) {}\r\n\r\n    getCount(): number {\r\n        return this.max - this.min;\r\n    }\r\n}\r\n\r\nexport class StaticNumber implements RandomNumber {\r\n    constructor(public i: number) {}\r\n\r\n    getCount(): number {\r\n        return 1;\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class GenderBasedSelectionFragment extends TextFragment {\r\n    constructor(\r\n        public femaleText: string,\r\n        public maleText?: string,\r\n        public referencedPlayerIndex?: number,\r\n    ) {\r\n        super();\r\n    }\r\n}\r\n","import { ParserHelper } from \"./../parser-helper\";\r\nimport { CardTextDecoder } from \"./card-text-decoder\";\r\nimport { TextFragment } from \"../../text-fragment\";\r\nimport * as Consts from \"./text-decoder-consts\";\r\nimport { RawTextFragment } from \"../../fragments/raw-text-fragment\";\r\nimport { PlayerReferenceFragment } from \"../../fragments/player-reference-fragment\";\r\nimport { SipsFragment } from \"../../fragments/sips-fragment\";\r\nimport {\r\n    RandomNumberFragment,\r\n    RandomNumber,\r\n    NumberRange,\r\n    StaticNumber,\r\n} from \"../../fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"../../fragments/random-text-fragment\";\r\nimport { GenderBasedSelectionFragment } from \"../../fragments/gender-based-selection-fragment\";\r\n\r\nexport class DefaultTextDecoder implements CardTextDecoder {\r\n    decode(s: string): TextFragment[] {\r\n        const result: TextFragment[] = [];\r\n\r\n        let index = 0;\r\n        let lastTokenIndex = 0;\r\n\r\n        do {\r\n            if (s[index] == Consts.VarStartChar) {\r\n                if (lastTokenIndex !== index) {\r\n                    result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                }\r\n\r\n                const token = this.readToken(s, index, Consts.VarEndChar);\r\n                index = token.index;\r\n\r\n                result.push(this.parseVariableFragment(token.value));\r\n            } else if (s[index] === Consts.SelectionStartChar) {\r\n                if (index > 1 && s[index - 1] === Consts.SelectionModifierStartChar) {\r\n                    // handle !{...}\r\n                    index--;\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    index++;\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseRandomSelectionFragment(content.value));\r\n                } else {\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseGenderSelectionFragment(content.value));\r\n                }\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n            lastTokenIndex = index;\r\n        } while (++index < s.length);\r\n\r\n        if (lastTokenIndex !== s.length) {\r\n            result.push(new RawTextFragment(s.substring(lastTokenIndex)));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseVariableFragment(content: string): TextFragment {\r\n        content = content.toLowerCase();\r\n\r\n        if (content.startsWith(Consts.PlayerVariable)) {\r\n            // Samples:\r\n            // [Player1:f]\r\n            // [Player1]\r\n            // [Player]\r\n\r\n            const playerRef = new PlayerReferenceFragment();\r\n\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let playerTag: string;\r\n            if (parameterBegin === -1) {\r\n                playerTag = content;\r\n            } else {\r\n                playerTag = content.substring(0, parameterBegin);\r\n\r\n                const genderString = content.substring(parameterBegin + 1);\r\n                const gender = ParserHelper.parseGenderRequirement(genderString);\r\n                if (gender === undefined) {\r\n                    throw new Error(\r\n                        `Gender parameter of player tag could not be parsed: ${content}`,\r\n                    );\r\n                }\r\n\r\n                playerRef.gender = gender;\r\n            }\r\n\r\n            playerRef.playerIndex = this.parsePlayerIndex(playerTag);\r\n            return playerRef;\r\n        }\r\n\r\n        if (content.startsWith(Consts.SipsVariable)) {\r\n            const sipsFragment = new SipsFragment();\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let sipsTag: string;\r\n            if (parameterBegin === -1) {\r\n                sipsTag = content;\r\n            } else {\r\n                sipsTag = content.substring(0, parameterBegin);\r\n                sipsFragment.minSips = Number(content.substring(parameterBegin + 1));\r\n                if (isNaN(sipsFragment.minSips)) {\r\n                    throw new Error(`The sips amount of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            if (sipsTag.length > Consts.SipsVariable.length) {\r\n                sipsFragment.sipsIndex = Number(sipsTag.substring(Consts.SipsVariable.length));\r\n                if (isNaN(sipsFragment.sipsIndex)) {\r\n                    throw new Error(`The sips index of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            return sipsFragment;\r\n        }\r\n\r\n        return new RawTextFragment(content);\r\n    }\r\n\r\n    public parseRandomSelectionFragment(content: string): TextFragment {\r\n        // Samples:\r\n        // 12,54,56-90\r\n        // 12,hello,not,19\r\n\r\n        const isNumericSelection = /^[0-9,-]+$/.test(content);\r\n        if (isNumericSelection) {\r\n            const numbers = this.parseNumberArray(content);\r\n            return new RandomNumberFragment(numbers);\r\n        }\r\n\r\n        const texts = this.splitQuoted(content, \",\");\r\n        return new RandomTextFragment(texts);\r\n    }\r\n\r\n    public parseNumberArray(content: string): RandomNumber[] {\r\n        const result: RandomNumber[] = [];\r\n        let currentNumber: RandomNumber | null = null;\r\n\r\n        let numberStart = 0;\r\n        let isRangeToken = false;\r\n\r\n        let i = 0;\r\n        while (true) {\r\n            for (; i < content.length; i++) {\r\n                const c = content[i];\r\n\r\n                if (!isNaN(Number(c))) {\r\n                    continue;\r\n                }\r\n\r\n                if (c === \"-\") {\r\n                    if (isRangeToken) {\r\n                        throw new Error(\"Can only have one range identifier per field\");\r\n                    }\r\n                    isRangeToken = true;\r\n\r\n                    currentNumber = new NumberRange(Number(content.substring(numberStart, i)), 0);\r\n                    numberStart = i + 1;\r\n                    continue;\r\n                }\r\n\r\n                if (c === \",\") {\r\n                    break;\r\n                }\r\n\r\n                throw new Error(\"Invalid character found: \" + c);\r\n            }\r\n\r\n            if (i === numberStart) {\r\n                throw new Error(`A number was expected at position ${i} in string \"${content}\"`);\r\n            }\r\n\r\n            const num = Number(content.substring(numberStart, i));\r\n            if (isRangeToken) {\r\n                (currentNumber as NumberRange).max = num;\r\n            } else {\r\n                currentNumber = new StaticNumber(num);\r\n            }\r\n\r\n            result.push(currentNumber!);\r\n\r\n            if (i === content.length) {\r\n                break;\r\n            }\r\n\r\n            currentNumber = null;\r\n            isRangeToken = false;\r\n            numberStart = ++i;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public splitQuoted(value: string, delimiter: string): string[] {\r\n        let tokenStart = 0;\r\n        let result: string[] = [];\r\n\r\n        while (value.length > tokenStart - 1) {\r\n            let withinQuotes = false;\r\n\r\n            if (value[tokenStart] === '\"') {\r\n                withinQuotes = true;\r\n                tokenStart++;\r\n            }\r\n\r\n            let i = tokenStart;\r\n            do {\r\n                if (value[i] === delimiter) {\r\n                    if (withinQuotes) continue;\r\n\r\n                    result.push(value.substring(tokenStart, i));\r\n                    tokenStart = i + 1;\r\n                    break;\r\n                }\r\n\r\n                if (value[i] == '\"') {\r\n                    if (!withinQuotes) {\r\n                        continue; //allow quotes in the middle\r\n                    }\r\n\r\n                    if (i == value.length - 1) {\r\n                        //if its the last char\r\n                        result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                        return result;\r\n                    }\r\n\r\n                    const nextChar = value[i + 1];\r\n                    if (nextChar == '\"') {\r\n                        i++;\r\n                        continue; //escaped quotes\r\n                    }\r\n\r\n                    if (nextChar != delimiter)\r\n                        throw new Error(\"The delimiter must come after the closing quotes.\");\r\n\r\n                    result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                    tokenStart = i + 2;\r\n                    break;\r\n                }\r\n\r\n                if (i == value.length - 1) {\r\n                    if (withinQuotes) {\r\n                        throw new Error(\"The text must end with a quote\");\r\n                    }\r\n\r\n                    result.push(value.substring(tokenStart, i + 1));\r\n                    return result;\r\n                }\r\n            } while (++i < value.length);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseGenderSelectionFragment(content: string): GenderBasedSelectionFragment {\r\n        const fragment = new GenderBasedSelectionFragment(\"\");\r\n\r\n        const splitterIndex = content.indexOf(Consts.SelectionSplitterChar);\r\n        const reference = content.indexOf(Consts.SelectionReferenceChar);\r\n\r\n        if (reference !== -1) {\r\n            fragment.referencedPlayerIndex = this.parsePlayerIndex(\r\n                content.substring(reference + 1),\r\n            );\r\n            content = content.substring(0, reference);\r\n        }\r\n\r\n        if (splitterIndex === -1) {\r\n            fragment.femaleText = content;\r\n        } else {\r\n            fragment.maleText = content.substring(0, splitterIndex);\r\n            fragment.femaleText = content.substring(splitterIndex + 1, content.length);\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    public parsePlayerIndex(value: string): number {\r\n        if (value.length > Consts.PlayerVariable.length) {\r\n            const index = Number(value.substring(Consts.PlayerVariable.length));\r\n            if (isNaN(index)) {\r\n                throw new Error(`The player index of \"${value}\" could not be parsed.`);\r\n            }\r\n\r\n            return index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    public readToken(\r\n        value: string,\r\n        index: number,\r\n        endChar: string,\r\n    ): { value: string; index: number } {\r\n        const length = value.length;\r\n        const tokenStart = index;\r\n\r\n        while (++index < length) {\r\n            const char = value[index];\r\n\r\n            if (char === Consts.EscapeChar) {\r\n                index++;\r\n                continue;\r\n            }\r\n\r\n            if (char === endChar) {\r\n                index++;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return { index, value: value.substring(tokenStart + 1, index - 1) };\r\n    }\r\n}\r\n","export const VarStartChar: string = \"[\";\r\nexport const VarEndChar: string = \"]\";\r\nexport const EscapeChar: string = \"\\\\\";\r\nexport const SelectionStartChar: string = \"{\";\r\nexport const SelectionModifierStartChar: string = \"!\";\r\nexport const SelectionEndChar: string = \"}\";\r\n\r\nexport const PlayerVariable: string = \"player\";\r\nexport const SipsVariable: string = \"sips\";\r\nexport const VariableParametersStart: string = \":\";\r\n\r\nexport const SelectionSplitterChar: string = \"/\";\r\nexport const SelectionReferenceChar: string = \"|\";\r\nexport const ArrayDelimiter: string = \",\";\r\n","import { RandomTextFragment } from \"@core/fragments/random-text-fragment\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { SipsFragment } from \"@core/fragments/sips-fragment\";\r\nimport { PlayerReferenceFragment } from \"@core/fragments/player-reference-fragment\";\r\nimport { DefaultTextDecoder } from \"@core/parsing/text-decoder/default-text-decoder\";\r\nimport { TextFragment } from \"@core/text-fragment\";\r\nimport { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport _ from \"lodash\";\r\nimport { RawTextFragment } from \"@core/fragments/raw-text-fragment\";\r\nimport { GenderBasedSelectionFragment } from \"@core/fragments/gender-based-selection-fragment\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport {\r\n    RandomNumberFragment,\r\n    NumberRange,\r\n    StaticNumber,\r\n} from \"@core/fragments/random-number-fragment\";\r\n\r\nexport class TextFormatter {\r\n    public parseTextFragments(s: string): TextFragment[] {\r\n        return new DefaultTextDecoder().decode(s);\r\n    }\r\n\r\n    public static getRequiredPlayers(fragments: TextFragment[], playerSettings: PlayerSetting[]) {\r\n        const requiredPlayers = new Array<PlayerSetting>();\r\n\r\n        const players = _.groupBy(\r\n            fragments\r\n                .filter(x => x instanceof PlayerReferenceFragment)\r\n                .map(x => x as PlayerReferenceFragment),\r\n            \"playerIndex\",\r\n        );\r\n\r\n        for (const key in players) {\r\n            if (players.hasOwnProperty(key)) {\r\n                const player = players[key][0];\r\n\r\n                let requiredGender = player.gender;\r\n\r\n                if (requiredGender === \"None\") {\r\n                    const rootSetting = playerSettings.find(\r\n                        x => x.playerIndex === player.playerIndex,\r\n                    );\r\n                    if (rootSetting !== undefined) {\r\n                        requiredGender = rootSetting.gender;\r\n                    }\r\n                }\r\n\r\n                requiredPlayers.push({ playerIndex: player.playerIndex, gender: requiredGender });\r\n            }\r\n        }\r\n\r\n        return requiredPlayers;\r\n    }\r\n\r\n    public static getRequiredSips(fragments: TextFragment[]): SipsFragment[] {\r\n        const sips = _.groupBy(\r\n            fragments.filter(x => x instanceof SipsFragment).map(x => x as SipsFragment),\r\n            \"sipsIndex\",\r\n        );\r\n        return Object.values(sips).map(x => x[0]);\r\n    }\r\n\r\n    public format(\r\n        fragments: TextFragment[],\r\n        players: { [index: number]: PlayerInfo },\r\n        sips: { [index: number]: number },\r\n        translate: (key: string) => string,\r\n        selection: SelectionAlgorithm,\r\n        options: Partial<FormatOptions>,\r\n    ): string {\r\n        let result = \"\";\r\n        let lastPlayerFragment: PlayerReferenceFragment | null = null;\r\n\r\n        for (const fragment of fragments) {\r\n            if (fragment instanceof RawTextFragment) {\r\n                result += fragment.text;\r\n            } else if (fragment instanceof PlayerReferenceFragment) {\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n                result += players[fragment.playerIndex].name;\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                lastPlayerFragment = fragment;\r\n            } else if (fragment instanceof SipsFragment) {\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                const sip = sips[fragment.sipsIndex];\r\n                if (sip === 1) {\r\n                    translate(\"oneSip\");\r\n                } else {\r\n                    result += `${sip} ${translate(\"sips\")}`;\r\n                }\r\n\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n            } else if (fragment instanceof GenderBasedSelectionFragment) {\r\n                let referencedPlayer: number;\r\n                if (fragment.referencedPlayerIndex !== undefined) {\r\n                    referencedPlayer = fragment.referencedPlayerIndex;\r\n                } else if (lastPlayerFragment !== null) {\r\n                    referencedPlayer = lastPlayerFragment.playerIndex;\r\n                } else {\r\n                    const playerKeys = Object.keys(players);\r\n                    if (playerKeys.length === 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    referencedPlayer = Number(playerKeys[0]);\r\n                }\r\n\r\n                const player = players[referencedPlayer];\r\n                result += player.gender === \"Female\" ? fragment.femaleText : fragment.maleText;\r\n            } else if (fragment instanceof RandomTextFragment) {\r\n                const text = selection.selectRandomWeighted(fragment.texts, () => 1);\r\n                result += text;\r\n            } else if (fragment instanceof RandomNumberFragment) {\r\n                const number = selection.selectRandomWeighted(fragment.numbers, x => x.getCount());\r\n                if (number === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (number instanceof NumberRange) {\r\n                    const random =\r\n                        number.min + Math.round((number.max - number.min) * selection.getRandom());\r\n                    result += random;\r\n                } else if (number instanceof StaticNumber) {\r\n                    result += number.i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport interface FormatOptions {\r\n    boldPlayerNames: boolean;\r\n    boldSips: boolean;\r\n}\r\n","import { MelinaAlgorithm } from \"./../../../../core/selection/melina-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { CardPresenter } from \"./card-presenter\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport * as actions from \"../../actions\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextFormatter } from \"../../formatter/text-formatter\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { FollowUpSlide, SelectedPlayer, Translator } from \"GameModels\";\r\nimport _ from \"lodash\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\n\r\nexport interface TextSlideState {\r\n    markdownContent: string;\r\n}\r\n\r\nexport abstract class TextSlidePresenter<\r\n    TState extends TextSlideState,\r\n    TCard extends TextCard\r\n> extends CardPresenter<TCard> {\r\n    constructor(protected translator: Translator, cardType: string, slideType: string) {\r\n        super(cardType, slideType);\r\n    }\r\n\r\n    protected initializeCard(card: TCard): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const result = new Array<RootAction>();\r\n\r\n        const text = this.selectText(selection, card);\r\n        const { formatted, players } = this.formatText(text, card, null, selection);\r\n\r\n        const state = this.initializeState(formatted, card, players, selection);\r\n        result.push(\r\n            actions.setSlideState({\r\n                state,\r\n                insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n            }),\r\n        );\r\n\r\n        if (_.some(card.followUp)) {\r\n            // dont check for correct translation as the language may change\r\n            if (Math.random() <= card.followUpPropability) {\r\n                const due = new Date();\r\n                due.setSeconds(due.getSeconds() + card.followUpDelay);\r\n\r\n                result.push(actions.enqueueFollowUp(this.createFollowUp(card, players, due)));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected initializeFollowUpCard(card: TCard, param: any): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n\r\n        try {\r\n            const { text, players } = this.selectFollowUpText(selection, card, param);\r\n            const { formatted } = this.formatText(text, card, players || [], selection);\r\n\r\n            const state = this.initializeFollowUpState(formatted, card, selection, param);\r\n            return [\r\n                actions.setSlideState({\r\n                    state,\r\n                    insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n                }),\r\n            ];\r\n        } catch (error) {\r\n            //no follow up found\r\n            return [actions.requestSlideAsync.request(this.translator)];\r\n        }\r\n    }\r\n\r\n    protected abstract initializeState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): TState;\r\n\r\n    protected abstract initializeFollowUpState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        selection: SelectionAlgorithm,\r\n        param: any,\r\n    ): TState;\r\n\r\n    protected createFollowUp(card: TCard, players: SelectedPlayer[], due: Date): FollowUpSlide {\r\n        return {\r\n            due: due,\r\n            slideType: this.slideType,\r\n            selectedCard: card,\r\n            param: { definedPlayers: players },\r\n        };\r\n    }\r\n\r\n    protected selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return selectText(selection, selectedCard, this.translator);\r\n    }\r\n\r\n    protected formatText(\r\n        text: string,\r\n        card: TCard,\r\n        definedPlayers: SelectedPlayer[] | null,\r\n        selection: SelectionAlgorithm,\r\n    ): { formatted: string; players: SelectedPlayer[] } {\r\n        return formatText(text, card, definedPlayers, selection, this.translator);\r\n    }\r\n\r\n    selectFollowUpText(\r\n        selection: SelectionAlgorithm,\r\n        selectedCard: TextCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const lang = this.translator.languageCode;\r\n\r\n        const followUps = selectedCard.followUp.filter(x =>\r\n            _.some(x.translations, y => y.lang.toLowerCase() === lang),\r\n        );\r\n        if (followUps.length === 0) {\r\n            throw new Error(\"No follow ups found\");\r\n        }\r\n\r\n        let players: SelectedPlayer[] | undefined;\r\n        if (\"definedPlayers\" in param) {\r\n            players = param.definedPlayers;\r\n        } else {\r\n            players = undefined;\r\n        }\r\n\r\n        const content = selection.selectRandomWeighted(followUps, x => x.weight)!;\r\n        const text = content.translations.find(x => x.lang === lang)!.content;\r\n        return { text, players };\r\n    }\r\n}\r\n\r\nexport function formatText<TCard extends TextCard>(\r\n    text: string,\r\n    card: TCard,\r\n    definedPlayers: SelectedPlayer[] | null,\r\n    selection: SelectionAlgorithm,\r\n    translator: Translator,\r\n): { formatted: string; players: SelectedPlayer[] } {\r\n    const formatter = new TextFormatter();\r\n    const fragments = formatter.parseTextFragments(text);\r\n    const playerRequirements = TextFormatter.getRequiredPlayers(fragments, card.players);\r\n\r\n    const players = gameEngine.selectPlayers(\r\n        selection,\r\n        playerRequirements,\r\n        definedPlayers || [],\r\n        card.tags,\r\n    );\r\n\r\n    const requiredSips = TextFormatter.getRequiredSips(fragments);\r\n\r\n    const indexedPlayers: { [index: number]: PlayerInfo } = {};\r\n    for (const player of players) {\r\n        indexedPlayers[player.index] = player.player;\r\n    }\r\n\r\n    const sips: { [index: number]: number } = {};\r\n    for (const sipInfo of requiredSips) {\r\n        sips[sipInfo.sipsIndex] = selection.getSips(sipInfo.minSips);\r\n    }\r\n\r\n    const formatted = formatter.format(\r\n        fragments,\r\n        indexedPlayers,\r\n        sips,\r\n        x => translator.translate(`game.textFormatter.${x}`),\r\n        selection,\r\n        { boldPlayerNames: true, boldSips: true },\r\n    );\r\n\r\n    return { formatted: formatted, players };\r\n}\r\n\r\nexport function selectText(\r\n    selection: SelectionAlgorithm,\r\n    selectedCard: TextCard,\r\n    translator: Translator,\r\n): string {\r\n    const lang = translator.languageCode;\r\n\r\n    const viableContents = selectedCard.content.filter(x =>\r\n        _.some(x.translations, y => y.lang.toLocaleLowerCase() === lang),\r\n    );\r\n    const content = selection.selectRandomWeighted(viableContents, x => x.weight)!;\r\n    return content.translations.find(x => x.lang === lang)!.content;\r\n}\r\n","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { PlayerSelectionInsights } from \"@core/selection/insights\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    Button,\r\n    createStyles,\r\n    Paper,\r\n    Theme,\r\n    Typography,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport * as actions from \"../actions\";\r\nimport * as gameEngine from \"../game-engine\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { SlidePresenter } from \"./base/slide-presenter\";\r\nimport { formatText, selectText } from \"./base/text-slide-presenter\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TruthOrDareSlideState,\r\n    players: state.settings.players,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: actions.requestSlideAsync.request,\r\n    setState: actions.setSlideState,\r\n    applyCard: actions.applyCard,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            backgroundColor: \"#34495e\",\r\n            cursor: \"default\",\r\n        },\r\n        clickableRoot: {\r\n            ...getRootStyles(),\r\n            backgroundColor: \"#34495e\",\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1.5rem\",\r\n            }\r\n        },\r\n        spaceHeader: {\r\n            visibility: \"hidden\",\r\n            marginTop: 15\r\n        },\r\n        questionPaper: {\r\n            padding: theme.spacing.unit * 2,\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                padding: theme.spacing.unit * 3,\r\n                width: theme.spacing.unit * 50,\r\n            },\r\n        },\r\n        questionButtonsContainer: {\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            marginTop: theme.spacing.unit,\r\n        },\r\n    });\r\n\r\ntype MappedActions = typeof dispatchProps;\r\n\r\ntype Props = MappedActions &\r\n    ReturnType<typeof mapStateToProps> &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction QuestionComponent(props: Props) {\r\n    const { state, players, nextSlide, classes } = props;\r\n    // const props = useSpring({ opacity: 1, from: { opacity: 0 } });\r\n    const player = players.find(x => x.id === state.selectedPlayer);\r\n    if (player === undefined) {\r\n        nextSlide(toTranslator(props));\r\n        return <div />;\r\n    }\r\n\r\n    const select = (decision: TruthOrDare) =>\r\n        new TruthOrDareSlide(toTranslator(props)).select(decision, props, player);\r\n\r\n    return (\r\n        <Paper className={classes.questionPaper}>\r\n            <Typography variant=\"h6\" component=\"h6\">\r\n                <Translate id=\"slides.truthordare.playerTruthordare\" data={{ name: player.name }} />\r\n            </Typography>\r\n            <div className={classes.questionButtonsContainer}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ marginRight: 15 }}\r\n                    onClick={() => select(\"Truth\")}\r\n                >\r\n                    <Translate id=\"slides.truthordare.truth\" />\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => select(\"Dare\")}>\r\n                    <Translate id=\"slides.truthordare.dare\" />\r\n                </Button>\r\n            </div>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nfunction DareComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <Translate id=\"slides.truthordare.truth\" /> <Translate id=\"slides.truthordare.or\" />{\" \"}\r\n            <b>\r\n                <Translate id=\"slides.truthordare.dare\" />\r\n            </b>\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <b>\r\n                <Translate id=\"slides.truthordare.truth\" />\r\n            </b>{\" \"}\r\n            <Translate id=\"slides.truthordare.or\" /> <Translate id=\"slides.truthordare.dare\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthOrDareComponent(props: Props) {\r\n    const { classes, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    if (state.isDeciding) {\r\n        return <div className={classes.root}>{QuestionComponent(props)}</div>;\r\n    }\r\n\r\n    if (state.decision === \"Dare\") {\r\n        return DareComponent(props);\r\n    } else {\r\n        return TruthComponent(props);\r\n    }\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TruthOrDareComponent) as React.ComponentType;\r\n\r\ntype TruthOrDare = \"Truth\" | \"Dare\";\r\n\r\ninterface TruthOrDareSlideState {\r\n    selectedPlayer: string;\r\n    isDeciding: boolean;\r\n    decision?: TruthOrDare;\r\n    markdownContent?: string;\r\n}\r\n\r\nexport class TruthOrDareSlide implements SlidePresenter {\r\n    constructor(private translator: Translator) {}\r\n\r\n    public slideType = \"TruthOrDareSlide\";\r\n    public requiredCards = [\"TaskCard\", \"QuestionCard\"];\r\n\r\n    public select(decision: TruthOrDare, actions: MappedActions, player: PlayerInfo) {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const cardType = decision === \"Dare\" ? \"TaskCard\" : \"QuestionCard\";\r\n        const card = selection.selectCard(cardType) as TextCard;\r\n\r\n        const selectedText = selectText(selection, card, this.translator);\r\n        const text = `#### ${this.translator.translate(\r\n            \"slides.truthordare.instruction\",\r\n        )}\\n${selectedText}`;\r\n\r\n        const { formatted } = formatText(\r\n            text,\r\n            card,\r\n            [{ index: 99, player }],\r\n            selection,\r\n            this.translator,\r\n        );\r\n\r\n        actions.applyCard(card);\r\n\r\n        const state: TruthOrDareSlideState = {\r\n            isDeciding: false,\r\n            selectedPlayer: player.id,\r\n            markdownContent: formatted,\r\n            decision,\r\n        };\r\n        actions.setState({ state, insights: selection.insights.playerSelection });\r\n    }\r\n\r\n    initialize(): RootAction[] {\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const player = gameEngine.selectPlayers(\r\n            selection,\r\n            [new PlayerSetting(1, \"None\")],\r\n            [],\r\n            [],\r\n        )[0].player;\r\n\r\n        return [\r\n            this.setState(\r\n                { isDeciding: true, selectedPlayer: player.id },\r\n                selection.insights.playerSelection,\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private setState(\r\n        state: TruthOrDareSlideState,\r\n        insights: PlayerSelectionInsights | null = null,\r\n    ): RootAction {\r\n        return actions.setSlideState({ state, insights });\r\n    }\r\n\r\n    initializeFollowUp(): RootAction[] {\r\n        throw new Error(\"Method not supported.\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n}\r\n","import { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { DownCard } from \"src/impl/cards/down-card\";\r\nimport { getRootStyles, defaultMarkdownOptions, getContentStyles, spaceHeaderStyles } from \"./base/helper\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { ReactNode } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStyles, Theme, WithStyles, Typography, withStyles } from \"@material-ui/core\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { Translator } from \"GameModels\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DownSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            backgroundColor: \"#34495e\"\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DownSlideComponent(props: Props) {\r\n    const {classes, nextSlide, state} = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.down.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );}\r\n\r\nconst Component =\r\n    compose(\r\n        connect(\r\n            mapStateToProps,\r\n            dispatchProps,\r\n        ),\r\n        withStyles(styles),\r\n        withLocalize\r\n    )(DownSlideComponent) as React.ComponentType;\r\n\r\ninterface DownSlideState extends TextSlideState {}\r\nexport class DownSlide extends TextSlidePresenter<DownSlideState, DownCard> {\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DownCard\", \"DownSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return (<Component />);\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState, RootAction } from \"DrinctetTypes\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { FactCard } from \"src/impl/cards/fact-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getRootStyles,\r\n    getContentStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport * as actions from \"../actions\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport { toTranslator } from \"../utils\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as FactSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            backgroundColor: \"#3498db\",\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction FactSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id={`slides.fact.title${state.isFollowUp ? \".follow\" : \"\"}`} />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface FactSlideFollowUpParam {\r\n    mode: FactSlideMode;\r\n    players: SelectedPlayer[];\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize\r\n)(FactSlideComponent) as React.ComponentType;\r\n\r\ntype FactSlideMode = \"singleplayer\" | \"multiplayer\";\r\nconst availableFactSlideModes: FactSlideMode[] = [\"singleplayer\", \"multiplayer\"];\r\n\r\ninterface FactSlideState extends TextSlideState {\r\n    isFollowUp: boolean;\r\n    mode: FactSlideMode;\r\n}\r\n\r\nexport class FactSlide extends TextSlidePresenter<FactSlideState, FactCard> {\r\n    private selectedMode: FactSlideMode;\r\n    private players?: SelectedPlayer[];\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"FactCard\", \"FactSlide\");\r\n\r\n        this.selectedMode =\r\n            availableFactSlideModes[Math.floor(availableFactSlideModes.length * Math.random())];\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        const cardText = super.selectText(selection, selectedCard);\r\n        const instruction = this.translator.translate(`slides.fact.${this.selectedMode}`);\r\n\r\n        return `#### ${instruction}\\n${cardText}`;\r\n    }\r\n\r\n    selectFollowUpText(\r\n        _selection: SelectionAlgorithm,\r\n        selectedCard: FactCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const { mode, players } = param as FactSlideFollowUpParam;\r\n        const { isTrueFact } = selectedCard;\r\n\r\n        const text = this.translator.translate(`slides.fact.${mode}.${isTrueFact}`);\r\n        return { text, players };\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: FactCard,\r\n        players: SelectedPlayer[],\r\n    ): FactSlideState {\r\n        this.players = players;\r\n\r\n        return {\r\n            isFollowUp: false,\r\n            markdownContent: markdownContent,\r\n            mode: this.selectedMode,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string, param: any): FactSlideState {\r\n        const { mode } = param as FactSlideFollowUpParam;\r\n        return {\r\n            isFollowUp: true,\r\n            markdownContent: markdownContent,\r\n            mode,\r\n        };\r\n    }\r\n\r\n    protected initializeCard(card: FactCard): RootAction[] {\r\n        return [...super.initializeCard(card), actions.enqueueFollowUp({\r\n            due: new Date(),\r\n            selectedCard: card,\r\n            slideType: \"FactSlide\",\r\n            param: {\r\n                mode: this.selectedMode,\r\n                players: this.players,\r\n            } as FactSlideFollowUpParam,\r\n        })];\r\n    }\r\n}\r\n","import { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport {\r\n    getRootStyles,\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    spaceHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { ReactNode } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStyles, Theme, WithStyles, Typography, withStyles } from \"@material-ui/core\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { NeverEverCard } from \"src/impl/cards/never-ever-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { toTranslator } from \"../utils\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as State,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            backgroundColor: \"#27ae60\",\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NeverEverComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h5\">\r\n            <Translate id=\"slides.neverever.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Typography variant=\"h5\" className={classes.instruction}>\r\n                    <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                </Typography>\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.neverever.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NeverEverComponent) as React.ComponentType;\r\n\r\ninterface State extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class NeverEverSlide extends TextSlidePresenter<State, NeverEverCard> {\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NeverEverCard\", \"NeverEverSlide\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: NeverEverCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2),\r\n        };\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { TruthOrDareSlide } from './slides/TruthOrDareSlide';\r\nimport { DownSlide } from \"./slides/DownSlide\";\r\nimport { SlidePresenter } from \"./slides/base/slide-presenter\";\r\nimport { FactSlide } from \"./slides/FactSlide\";\r\nimport { NeverEverSlide } from \"./slides/NeverEverSlide\";\r\nimport { Translator } from \"GameModels\";\r\n\r\nexport type SlideComponents = { [type: string]: new(translator: Translator) => SlidePresenter };\r\n\r\nexport const slideComponents: SlideComponents = {\r\n    DownSlide,\r\n    FactSlide,\r\n    NeverEverSlide,\r\n    TruthOrDareSlide,\r\n};\r\n","import { MelinaAlgorithm } from \"./../../core/selection/melina-algorithm\";\r\nimport { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { filter, mergeMap, tap, ignoreElements } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../store/index\";\r\nimport * as actions from \"./actions\";\r\nimport { getRandomSelectionAlgorithm } from \"./game-engine\";\r\nimport { slideComponents } from \"./component-registry\";\r\nimport { of } from \"rxjs\";\r\nimport { Translator } from \"GameModels\";\r\nimport { getSlideRegistrations } from \"./slides-processor\";\r\n\r\nexport const nextSlideEpic: Epic<RootAction, RootAction, RootState, Services> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.requestSlideAsync.request)),\r\n        mergeMap(x => of(...nextSlide(x.payload))),\r\n    );\r\n\r\nexport const redirectOnGameStartedEpic: Epic<\r\n    RootAction,\r\n    RootAction,\r\n    RootState,\r\n    Services\r\n> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.startGame)),\r\n        tap(action => action.payload.push(\"/game\")),\r\n        ignoreElements(),\r\n    );\r\n\r\nfunction nextSlide(translator: Translator): RootAction[] {\r\n    const now = new Date();\r\n    let state = store.getState();\r\n\r\n    const dueFollowUps = state.game.followUp.filter(x => x.due < now);\r\n    if (dueFollowUps.length > 0) {\r\n        const followUp = _.sortBy(dueFollowUps, x => x.due.getSeconds())[0];\r\n\r\n        const factory = slideComponents[followUp.slideType];\r\n        const slideInitalizer = new factory(translator);\r\n        const slideActions = slideInitalizer.initializeFollowUp(\r\n            followUp.selectedCard,\r\n            followUp.param,\r\n        );\r\n\r\n        return [actions.activateFollowUp(followUp), ...slideActions];\r\n    }\r\n\r\n    let selection = getRandomSelectionAlgorithm(state);\r\n    const slides = getSlideRegistrations(slideComponents);\r\n\r\n    const { willPower, memory } = selection.recomputeWillPower(state.game.willPowerMemory);\r\n    const willPowerActions = new Array<RootAction>();\r\n\r\n    if (willPower !== state.game.currentWillPower) {\r\n        if (!state.game.isWillPowerLocked) {\r\n            willPowerActions.push(actions.setWillPower(willPower));\r\n            state = { ...state, game: { ...state.game, currentWillPower: willPower } };\r\n            selection = getRandomSelectionAlgorithm(state);\r\n        }\r\n    }\r\n\r\n    if (memory.length > 0) {\r\n        willPowerActions.push(actions.addWillPowerMemory(memory));\r\n    }\r\n\r\n    const slideType = selection.selectNextSlide(slides);\r\n    if (slideType === undefined) {\r\n        // TODO: end game\r\n        throw new Error(\"Game Finished\");\r\n    }\r\n\r\n    const factory = slideComponents[slideType];\r\n    const slideInitalizer = new factory(translator);\r\n    const slideActions = slideInitalizer.initialize();\r\n\r\n    return [\r\n        actions.requestSlideAsync.success({\r\n            slide: slideType,\r\n            insights: (selection as MelinaAlgorithm).insights.slideWeights!,\r\n        }),\r\n        ...slideActions,\r\n    ];\r\n}\r\n","import { SlideComponents } from \"./component-registry\";\r\nimport { SlideRegistration } from \"@core/slide-registration\";\r\n\r\nexport function getSlideRegistrations(components: SlideComponents): SlideRegistration[] {\r\n    const result = new Array<SlideRegistration>();\r\n\r\n    for (const component in components) {\r\n        if (components.hasOwnProperty(component)) {\r\n            const element = components[component];\r\n            const slide = new element({ languageCode: \"en\", translate: () => \"\" });\r\n            result.push({ slideType: slide.slideType, requestedCards: slide.requiredCards });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { combineEpics } from \"redux-observable\";\r\nimport * as settingsEpics from \"../features/settings/epics\";\r\nimport * as gameEpics from \"../features/game/epics\";\r\n\r\nexport default combineEpics(...Object.values(settingsEpics), ...Object.values(gameEpics));\r\n","import { compose } from \"redux\";\r\n\r\n// @ts-ignore\r\nexport const composeEnhancers =\r\n    (process.env.NODE_ENV === \"development\" &&\r\n        window &&\r\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n","import { PlayerSelectionInsights, SlideSelectionInsights } from './../../core/selection/insights';\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport * as actions from \"./actions\";\r\nimport { FollowUpSlide } from \"GameModels\";\r\n\r\nexport type GameState = Readonly<{\r\n    isStarted: boolean;\r\n\r\n    selectedSlide: string | null;\r\n    selectedCard: Card | null;\r\n\r\n    slideState: any | null;\r\n\r\n    currentWillPower: number;\r\n    isWillPowerLocked: boolean;\r\n    willPowerMemory: string[];\r\n\r\n    playerInsights: PlayerSelectionInsights | null;\r\n    slideInsights: SlideSelectionInsights | null;\r\n\r\n    startTime: Date | null;\r\n\r\n    cardsHistory: string[];\r\n    slidesHistory: string[];\r\n    followUp: FollowUpSlide[];\r\n    activeFollowUp: FollowUpSlide | null;\r\n}>;\r\n\r\nexport default combineReducers<GameState, RootAction>({\r\n    cardsHistory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return [action.payload.id, ...state];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slidesHistory: (state = [], action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return [action.payload.slide, ...state];\r\n        }\r\n        return state;\r\n    },\r\n    isStarted: (state = false, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.startGame):\r\n                return true;\r\n            case getType(actions.cancelGame):\r\n                return false;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    selectedCard: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return action.payload;\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.selectedCard;\r\n        }\r\n        return state;\r\n    },\r\n    selectedSlide: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return action.payload.slide;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.slideType;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slideState: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n            case getType(actions.activateFollowUp):\r\n                return null;\r\n            case getType(actions.setSlideState):\r\n                return action.payload.state;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    followUp: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.enqueueFollowUp):\r\n                return [...state, action.payload];\r\n            case getType(actions.activateFollowUp):\r\n                return state.filter(x => x !== action.payload);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    activeFollowUp: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    startTime: (state = null, action) => {\r\n        if (action.type === getType(actions.startGame)) {\r\n            return new Date();\r\n        }\r\n        return state;\r\n    },\r\n    isWillPowerLocked: (state = false, action) => {\r\n        if (action.type === getType(actions.setWillPowerLocked)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentWillPower: (state = 1, action) => {\r\n        if (action.type === getType(actions.setWillPower)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    willPowerMemory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addWillPowerMemory):\r\n                return [...state, ...action.payload];\r\n            case getType(actions.startGame):\r\n                return [];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    playerInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.setSlideState)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    slideInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    }\r\n});\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport { PlayerArrangement } from \"@core/player-arrangement\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport * as actions from \"./actions\";\r\nimport { slideWeights } from \"../../preferences\";\r\nimport _ from \"lodash\";\r\n\r\nexport type SettingsState = Readonly<{\r\n    players: PlayerInfo[];\r\n    arrangements: PlayerArrangement[];\r\n    preferOppositeGenders: boolean;\r\n    slides: Array<Weighted<string>>;\r\n    socialMediaPlatform: string;\r\n    sources: SourceInfo[];\r\n    tags: Array<Weighted<string>>;\r\n}>;\r\n\r\nexport default combineReducers<SettingsState, RootAction>({\r\n    players: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayer):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayer):\r\n                return state.filter(x => x.id !== action.payload);\r\n            case getType(actions.updatePlayer):\r\n                return state.map(player =>\r\n                    player.id === action.payload.id ? action.payload : player,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    sources: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addSource):\r\n                return [...state, action.payload];\r\n            case getType(actions.removeSource):\r\n                return state.filter(x => x.url !== action.payload);\r\n            case getType(actions.loadSourceAsync.request):\r\n                return state.map(item =>\r\n                    item.url === action.payload ? { ...item, isLoading: true } : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.success):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? {\r\n                              ...item,\r\n                              cards: action.payload.cards,\r\n                              errorMessage: undefined,\r\n                              isLoading: false,\r\n                              tags: _.uniq(_.flatten(action.payload.cards.map(x => x.tags)).map(x => (x as string).toLowerCase()))\r\n                          }\r\n                        : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.failure):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? { ...item, isLoading: false, errorMessage: action.payload.message }\r\n                        : item,\r\n                );\r\n            case getType(actions.setSourceWeight):\r\n                return state.map(item =>\r\n                    item.url === action.payload.value\r\n                        ? { ...item, weight: action.payload.weight }\r\n                        : item,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    arrangements: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayerArrangment):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayerArrangment):\r\n                return state.filter(x => x.p1 !== action.payload);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    preferOppositeGenders: (state = true, action) => {\r\n        if (action.type === getType(actions.setPreferOppositeGenders)) {\r\n            return action.payload;\r\n        }\r\n        return state;\r\n    },\r\n    slides: (state = GetSlideWeightedArray(), action) => {\r\n        switch (action.type) {\r\n            case getType(actions.setSlideWeight):\r\n                return state.map(x => (x.value === action.payload.value ? action.payload : x));\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    socialMediaPlatform: (state = \"Snapchat\", action) => {\r\n        if (action.type === getType(actions.setSocialMediaPlatform)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    tags: (state = [], action) => {\r\n        if (action.type === getType(actions.setTagWeight)) {\r\n            const value = action.payload.value.toLowerCase();\r\n            const existingTag = state.find(x => x.value === value);\r\n            if (existingTag !== undefined) {\r\n                return state.map(x => x.value === value ? {value, weight: action.payload.weight} : x);\r\n            } else {\r\n                return [...state, action.payload];\r\n            }\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n\r\nfunction GetSlideWeightedArray() {\r\n    const weightsList: Weighted<string>[] = [];\r\n    for (const key in slideWeights) {\r\n        if (slideWeights.hasOwnProperty(key)) {\r\n            const element = slideWeights[key];\r\n            weightsList.push({ value: key, weight: element });\r\n        }\r\n    }\r\n\r\n    return weightsList;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"../features/game/reducer\";\r\nimport settingsReducer from \"../features/settings/reducer\";\r\nimport { localizeReducer } from \"react-localize-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    game: gameReducer,\r\n    settings: settingsReducer,\r\n    localize: localizeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport services from \"../services\";\r\nimport rootEpic from \"./root-epic\";\r\nimport { composeEnhancers } from \"./utils\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nexport const epicMiddleware = createEpicMiddleware<RootAction, RootAction, RootState, Services>({\r\n    dependencies: services,\r\n});\r\n\r\n// configure middlewares\r\nconst middlewares = [epicMiddleware];\r\n\r\n// compose enchancers\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n// rehydrate state on app start\r\nconst initialState = {};\r\n\r\n// create store\r\nconst store = createStore(rootReducer, initialState, enhancer);\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\n// export store singleton instance\r\nexport default store;\r\n","import { CardDeck } from \"@core/card-deck\";\r\nimport { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GameStatus } from \"@core/game-status\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer } from \"GameModels\";\r\nimport seedrandom from \"seedrandom\";\r\nimport store from \"../../store\";\r\n\r\nexport function selectPlayers(\r\n    selection: SelectionAlgorithm,\r\n    players: PlayerSetting[],\r\n    predefined: SelectedPlayer[],\r\n    tags: string[],\r\n): SelectedPlayer[] {\r\n    const result = selection.selectPlayers(\r\n        players.map(x => x.gender),\r\n        players.map(x => {\r\n            const p = predefined.find(y => y.index === x.playerIndex);\r\n            if (p === undefined) {\r\n                return null;\r\n            }\r\n\r\n            return p.player;\r\n        }),\r\n        tags,\r\n    );\r\n    const selected = result.map((x, i) => ({ index: players[i].playerIndex, player: x }));\r\n\r\n    return selected;\r\n}\r\n\r\nexport function getRandomSelectionAlgorithm(state?: RootState): SelectionAlgorithm {\r\n    if (state === undefined) {\r\n        state = store.getState();\r\n    }\r\n\r\n    const random = seedrandom();\r\n    return new MelinaAlgorithm(extractGameStatus(state), random);\r\n}\r\n\r\nfunction extractGameStatus(state: RootState): GameStatus {\r\n    const currentStatus: GameStatus = {\r\n        decks: state.settings.sources\r\n            .filter(x => x.cards !== undefined)\r\n            .map(item => {\r\n                const result: CardDeck = { ...item, cards: item.cards || [] };\r\n                return result;\r\n            }),\r\n        cardsHistory: state.game.cardsHistory,\r\n        language: state.localize.languages.find(x => x.active)!.code,\r\n        players: state.settings.players,\r\n        slides: state.settings.slides,\r\n        tags: state.settings.tags,\r\n        arrangements: state.settings.arrangements,\r\n        preferOppositeGenders: state.settings.preferOppositeGenders,\r\n        slidesHistory: state.game.slidesHistory,\r\n        startTime: state.game.startTime!,\r\n        willPower: state.game.currentWillPower,\r\n    };\r\n\r\n    return currentStatus;\r\n}\r\n","import { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { createStyles, Typography, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\nimport { toFixedEnd } from \"@utils/string-extensions\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Cell,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from \"recharts\";\r\nimport { compose } from \"redux\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n});\r\n\r\nconst styles = createStyles({\r\n    chart: {\r\n        width: 200,\r\n        height: 300,\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles> & LocalizeContextProps;\r\n\r\nfunction InsightsCards({ translate, currentWillPower }: Props) {\r\n    const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n    const insights = selection.getAllCardDeckStatistics();\r\n\r\n    const decksStatistics = percentageFixedTotal(insights.decks, x => x.weight, 1000).map(x => ({\r\n        value: x.part / 10,\r\n        name: x.value.value.url,\r\n    }));\r\n\r\n    const willPowerStatistics = percentageFixedTotal(insights.willPower, x => x.weight, 1000).map(\r\n        x => ({\r\n            value: x.part / 10,\r\n            name: x.value.value || translate(\"insights.universal\"),\r\n            willPower: x.value.value\r\n        }),\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"insights.cardsDist\" />\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n                <BarChart data={decksStatistics}>\r\n                    <CartesianGrid />\r\n                    <XAxis dataKey=\"name\" tickFormatter={x => toFixedEnd(x, 18)} />\r\n                    <YAxis tickFormatter={x => x + \"%\"} />\r\n                    <Tooltip\r\n                        formatter={x => x + \"%\"}\r\n                        labelFormatter={url =>\r\n                            translate(\"insights.cardDeckName\", {\r\n                                url,\r\n                                cards: insights.decks.find(x => x.value.url === url)!.value.cards\r\n                                    .length,\r\n                            })\r\n                        }\r\n                    />\r\n                    <Bar\r\n                        name={translate(\"insights.part\") as string}\r\n                        dataKey=\"value\"\r\n                        fill=\"#8884d8\"\r\n                        maxBarSize={20}\r\n                    />\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"insights.willPowerDist\" />\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n                <BarChart data={willPowerStatistics}>\r\n                    <CartesianGrid />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis tickFormatter={x => x + \"%\"} />\r\n                    <Tooltip formatter={x => x + \"%\"} />\r\n                    <Bar\r\n                        dataKey=\"value\"\r\n                        maxBarSize={20}\r\n                        name={translate(\"insights.part\") as string}\r\n                    >\r\n                        {willPowerStatistics.map((entry, index) => (\r\n                            <Cell\r\n                                fill={entry.willPower === currentWillPower ? \"#e74c3c\" : \"#8884d8\"}\r\n                                key={index}\r\n                            />\r\n                        ))}\r\n                    </Bar>\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(InsightsCards) as React.ComponentType;\r\n","export function toFixedEnd(s: string, length: number) {\r\n    if (length > s.length) {\r\n        return s;\r\n    }\r\n\r\n    return \"..\" + s.substring(s.length - length - 2, s.length);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InsightsCurrentSlide from \"./InsightsCurrentSlide\";\r\nimport InsightsWillPowerView from \"./InsightsWillPowerView\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport InsightsCards from \"./InsightsCards\";\r\n\r\nexport default class InsightsView extends Component {\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <InsightsWillPowerView />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 10}}>\r\n                    <InsightsCurrentSlide />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 10}}>\r\n                    <InsightsCards />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport {\r\n    AppBar,\r\n    Slide,\r\n    createStyles,\r\n    WithStyles,\r\n    withStyles,\r\n    Toolbar,\r\n    Button,\r\n    Typography,\r\n    Theme,\r\n} from \"@material-ui/core\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\nimport { withRouter, RouterProps } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport InsightsView from \"./InsightsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        margin: theme.spacing.unit,\r\n        overflowY: \"auto\",\r\n    },\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction InsightsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.insights\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <InsightsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(InsightsDialog) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { slideComponents } from \"../component-registry\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport { toTranslator } from \"../utils\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & LocalizeContextProps;\r\n\r\nclass SlideWrapper extends Component<Props> {\r\n    render() {\r\n        const { selectedSlide } = this.props;\r\n\r\n        if (selectedSlide === null) {\r\n            return <Typography variant=\"h3\">Loading game...</Typography>;\r\n        }\r\n        \r\n        const factory = slideComponents[selectedSlide];\r\n        const slideInitalizer = new factory(toTranslator(this.props));\r\n\r\n        return slideInitalizer.render();\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n)(SlideWrapper) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport GameOptions from \"./GameOptions\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport SettingsDialog from \"./SettingsDialog\";\r\nimport InsightsDialog from \"./InsightsDialog\";\r\nimport SlideWrapper from \"./SlideWrapper\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { Fade } from \"@material-ui/core\";\r\n\r\nconst dispatchProps = {\r\n    requestSlide: requestSlideAsync.request,\r\n};\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps;\r\n\r\nclass GameComponent extends Component<Props> {\r\n    public componentDidMount() {\r\n        this.props.requestSlide(toTranslator(this.props));\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}>\r\n                <Fade in={true}>\r\n                    <SlideWrapper />\r\n                </Fade>\r\n                <div style={{ top: 10, right: 10, position: \"absolute\" }}>\r\n                    <GameOptions />\r\n                </div>\r\n                <Switch>\r\n                    <Route path=\"/game/settings\" component={SettingsDialog} />\r\n                    <Route path=\"/game/insights\" component={InsightsDialog} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(\r\n        undefined,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n)(GameComponent) as React.ComponentType;\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\r\nimport WelcomeView from \"./features/welcome/components/WelcomeView\";\r\nimport GameComponent from \"./features/game/components/GameComponent\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    isStarted: state.game.isStarted,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction App({ isStarted }: Props) {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={WelcomeView} />\r\n                <Route\r\n                    path=\"/game\"\r\n                    render={() => (!isStarted ? <Redirect to=\"/\" /> : (<GameComponent />))}\r\n                />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"tslib\";\r\nimport \"typeface-roboto\";\r\nimport App from \"./App\";\r\nimport \"./env\";\r\nimport { addPlayer, addSource, loadSourceAsync } from \"./features/settings/actions\";\r\nimport \"./index.css\";\r\nimport store from \"./store\";\r\nimport { initialize, LocalizeProvider, NamedLanguage } from \"react-localize-redux\";\r\nimport drinctetTranslations from \"./loc/drinctet.json\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { defaultSources } from \"./preferences\";\r\n\r\nfor (const src of defaultSources) {\r\n    store.dispatch(addSource(src));\r\n    store.dispatch(loadSourceAsync.request(src));\r\n}\r\n\r\nstore.dispatch(addPlayer({ name: \"Vincent\", gender: \"Male\" }));\r\nstore.dispatch(addPlayer({ name: \"Melina\", gender: \"Female\" }));\r\nstore.dispatch(addPlayer({ name: \"Bursod\", gender: \"Male\" }));\r\nstore.dispatch(addPlayer({ name: \"Larny\", gender: \"Female\" }));\r\nstore.dispatch(addPlayer({ name: \"Sven\", gender: \"Male\" }));\r\nstore.dispatch(addPlayer({ name: \"Hufeld\", gender: \"Male\" }));\r\n\r\nvar userLang = (navigator.language || ((navigator as any).userLanguage as string) || \"en\").split(\r\n    \"-\",\r\n)[0];\r\n\r\nconst languages: NamedLanguage[] = [\r\n    { code: \"en\", name: \"English\" },\r\n    { code: \"de\", name: \"Deutsch\" },\r\n];\r\nstore.dispatch(\r\n    initialize({\r\n        languages,\r\n        translation: drinctetTranslations,\r\n        options: { renderToStaticMarkup, defaultLanguage: userLang },\r\n    }),\r\n);\r\n\r\nconst Root = () => (\r\n    <div style={{ height: \"100%\" }}>\r\n        <Provider store={store}>\r\n            <LocalizeProvider store={store}>\r\n                <App />\r\n            </LocalizeProvider>\r\n        </Provider>\r\n    </div>\r\n);\r\n\r\nrender(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}