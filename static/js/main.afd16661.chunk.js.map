{"version":3,"sources":["env.ts","features/settings/actions.ts","features/settings/components/AddPlayerForm.tsx","core/player-info.ts","features/settings/selectors.ts","features/settings/components/PlayerListItem.tsx","features/settings/components/PlayerList.tsx","features/settings/components/AddSourceForm.tsx","features/settings/components/SourcesListItem.tsx","features/settings/components/SourcesList.tsx","features/settings/components/configuration/ChangeLanguage.tsx","features/settings/components/configuration/PlayerSettings.tsx","preferences.ts","features/settings/components/configuration/SocialMediaPlatform.tsx","features/settings/components/configuration/ItemPreferences.tsx","utils/statistics.ts","features/settings/components/configuration/SlidePreferences.tsx","features/settings/components/configuration/TagsPerferences.tsx","features/settings/components/Configuration.tsx","features/settings/components/SettingsView.tsx","features/welcome/components/DrinctetHeader.tsx","features/game/actions.ts","features/welcome/components/StartButton.tsx","features/welcome/components/WelcomeView.tsx","utils/fullscreen.ts","features/game/components/GameOptions.tsx","features/game/components/SettingsDialog.tsx","features/game/components/InsightsCurrentSlide.tsx","features/game/components/InsightsWillPowerView.tsx","core/selection/insights.ts","core/selection/utils.ts","core/selection/selection-algorithm-base.ts","core/selection/melina-algorithm.ts","core/cards-loader.ts","core/cards/player-setting.ts","core/parsing/parser-helper.ts","core/parsing/base-card-parser.ts","core/cards/text-element.ts","core/cards/text-translation.ts","core/parsing/text-content-parser.ts","core/parsing/text-card-parser.ts","core/cards/text-card.ts","core/cards/base-card.ts","impl/cards/fact-card.ts","impl/parsing/fact-card-parser.ts","impl/cards/virus-card.ts","impl/parsing/virus-card-parser.ts","impl/parsing/default-text-card-parser.ts","impl/cards/down-card.ts","impl/cards/never-ever-card.ts","impl/cards/joke-card.ts","impl/cards/question-card.ts","impl/cards/task-card.ts","impl/cards/would-you-rather-card.ts","impl/cards/drink-card.ts","impl/cards/group-game-card.ts","impl/cards/no-idea-loses-card.ts","impl/registrations.tsx","services/api/cards-loader.ts","impl/default-card-parser-factory.ts","services/index.ts","features/settings/epics.ts","features/game/utils.ts","features/game/slides/base/helper.tsx","core/text-fragment.ts","core/fragments/raw-text-fragment.ts","core/fragments/variable-fragment.ts","core/fragments/player-reference-fragment.ts","core/fragments/sips-fragment.ts","core/fragments/random-number-fragment.ts","core/fragments/random-text-fragment.ts","core/fragments/gender-based-selection-fragment.ts","core/fragments/social-media-platform-fragment.ts","core/parsing/text-decoder/default-text-decoder.ts","core/parsing/text-decoder/text-decoder-consts.ts","features/game/formatter/text-formatter.ts","features/game/slides/base/text-slide-presenter.ts","features/game/slides/base/card-presenter.ts","features/game/slides/colors.ts","features/game/slides/TruthOrDareSlide.tsx","features/game/slides/DownSlide.tsx","features/game/slides/FactSlide.tsx","features/game/slides/NeverEverSlide.tsx","features/game/slides/WouldYouRatherSlide.tsx","features/game/slides/DrinkSlide.tsx","features/game/slides/VirusSlide.tsx","features/game/slides/NoIdeaLosesSlide.tsx","features/game/slides/GroupGameSlide.tsx","features/game/slides/TaskSlide.tsx","features/game/component-registry.ts","features/game/epics.ts","features/game/slides-processor.ts","store/root-epic.ts","store/utils.ts","features/game/reducer.ts","features/settings/reducer.ts","store/root-reducer.ts","store/index.ts","features/game/game-engine.ts","features/game/components/InsightsCards.tsx","utils/string-extensions.ts","features/game/components/InsightsView.tsx","features/game/components/InsightsDialog.tsx","features/game/components/SlideWrapper.tsx","features/game/components/GameComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["process","LOCAL_STORAGE_VERSION","addPlayer","createStandardAction","map","playerInfo","payload","name","gender","id","cuid","updatePlayer","removePlayer","addSource","url","isLoading","errorMessage","undefined","cards","weight","tags","removeSource","loadSourceAsync","createAsyncAction","setSourceWeight","setPreferOppositeGenders","addPlayerArrangment","removePlayerArrangment","setSocialMediaPlatform","setSlideWeight","setTagWeight","dispatchProps","AddPlayerForm","state","handlePlayerNameChange","ev","_this","setState","currentTarget","value","handleAddClick","endsWith","props","handleFormKeyDown","e","key","preventDefault","this","translate","react","onKeyDown","style","display","Input_default","a","flexGrow","type","placeholder","onChange","Button_default","marginLeft","disabled","onClick","react_localize_redux_es","React","connect","withLocalize","PlayerInfo","Object","classCallCheck","getPlayers","players","getSources","sources","getIconButtonStyle","margin","width","height","_ref","onRemoveClick","onSwapGenderClick","onNameChanged","react_default","createElement","IconButton_default","aria-label","objectSpread","marginRight","index_es","react_fontawesome_index_es","icon","faMars","faVenus","error","onBlur","tabIndex","Delete_default","fontSize","selectors","settings","List_default","player","ListItem_default","components_PlayerListItem","loadSource","request","AddSourceForm","handleUrlChange","findIndex","x","_this2","sourceExists","LoadingItem","LoadingFailedItem","onReloadClick","color","variant","component","concat","WeightSlider","_ref2","onChangeWeight","lab_index_es","max","min","step","padding","_","n","withStyles","theme","createStyles","root","backgroundColor","palette","background","paper","title","textOverflow","wordBreak","overflow","fullWidth","withTheme","_ref3","classes","cardsCount","badgeContent","className","showZero","avatar","checked","b","titleTypographyProps","action","subheader","source","components_SourcesListItem","length","activeLanguage","languages","setActiveLanguage","container","item","xs","sm","md","lg","htmlFor","inputProps","code","target","lang","preferOppositeGenders","arrangements","section","marginTop","arrangmentItem","borderBottom","paddingBottom","arrangementSelect","defineProperty","breakpoints","down","control","c","label","filter","p2","arrangment","find","p1","arrangedPlayerId","alignItems","input","y","socialMediaPlatforms","slideWeights","FactSlide","DownSlide","NeverEverSlide","TruthOrDareSlide","WouldYouRatherSlide","DrinkSlide","VirusSlide","NoIdeaLosesSlide","GroupGameSlide","TaskSlide","higherArrangementPropabilityTags","platform","socialMediaPlatform","gutterBottom","ItemPreferences","_this$props","items","opacity","v","percentageFixedTotal","values","getPercentage","percentageValues","percent","total","reduce","result","Array","sum","prevBaseline","i","_percentageValues$i","sumRounded","Math","round","push","part","slides","slidePercentages","configuration_ItemPreferences","data","count","fontWeight","decks","weights","uniq","flatMap","Configuration","spacing","direction","marginBottom","configuration_ChangeLanguage","configuration_PlayerSettings","SocialMediaPlatform","configuration_SlidePreferences","TagsPerferences","SettingsView","handleChange","_event","handleChangeIndex","index","position","indicatorColor","textColor","lib_default","axis","ignoreNativeScroll","containerStyle","onChangeIndex","flexDirection","components_AddPlayerForm","components_PlayerList","components_AddSourceForm","components_SourcesList","overflowX","components_Configuration","responsiveHeader","responsiveSubTitle","Typography_default","startGame","cancelGame","requestSlideAsync","applyCard","setSlideState","enqueueFollowUp","activateFollowUp","setWillPowerLocked","setWillPower","addWillPowerMemory","styles","&:hover","StartButton","history","_this$props2","arePlayersSelected","areSourcesAdded","areSourcesLoading","Fab_default","size","compose","withRouter","header","WelcomeView","possibleConstructorReturn","getPrototypeOf","call","viewportHeight","window","innerHeight","updateHeight","bind","assertThisInitialized","addEventListener","removeEventListener","justify","components_DrinctetHeader","components_SettingsView","components_StartButton","Component","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","webkit","moz","ms","document","vendor","keys","Fullscreen","element","handler","options","Boolean","toLowerCase","button","GameOptions","anchorEl","isFullscreen","handleMenuOpenClick","event","handleClose","handleNavigate","path","toggleFullscreen","documentElement","onfullscreenchange","console","log","_this3","selectedCard","_this$state","isOpen","MoreVert_default","open","onClose","PaperProps","Settings_default","DonutLarge_default","Feedback_default","FullscreenExit_default","Fullscreen_default","selectedSlide","game","activeFollowUp","Transition","assign","appBar","flex","content","dialogPaper","fullscreenPaper","withMobileDialog","breakpoint","fullScreen","Dialog_default","TransitionComponent","maxWidth","paperScrollPaper","paperFullScreen","scrollableTable","tableCellNoBreak","whiteSpace","renderPlayerInsights","playerInsights","predefined","join","renderPredefinedPlayers","rounds","statistics","number","p","playerId","paddingLeft","conditionalBold","chosen","isBold","InsightsCurrentSlide","cardRef","card","wp","willPower","deckUrl","slide","slideInsights","renderSlideWeights","toggleContainer","justifyContent","currentWillPower","isLocked","isWillPowerLocked","exclusive","children","row","Insights","playerSelection","defaultRandomGenerator","random","selectRandomWeighted","getWeight","arguments","totalWeight","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","randomWeight","_i","MelinaAlgorithm","_SelectionAlgorithmBa","_getPrototypeOf2","_len","args","_key","apply","deckExhaustionLimit","insights","inherits","createClass","cardType","weightedDecks","weightCards","status","deckWeights","willPowerWeights","willPowerCounter","allCards","_loop","deck","toConsumableArray","boostWillPower","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_loop2","willPowerWeightsArray","propName","Number","totalCards","playerSettings","definedPlayers","Error","forArrangement","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop4","arrangement","_iterator3","resultCounter","_loop3","sourceList","includes","malesCount","femalesCount","selectionRoundInsights","some","dominant","changed","_this4","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop5","_iterator4","_loop6","_i4","selected","_this5","perfectCards","unplayedCards","cardsHistory","percentage","unplayedWeight","factor","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","perfectCard","availableSlides","_this6","uniqueCardTypes","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_loop7","_iterator8","requestedCards","cardTypeRatings","_i5","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","cardDeck","weightedSlides","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_loop8","slideSettings","slideType","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iterator7","slidesHistory","lastSlideType","lastSlide","floor","getRandom","_this7","filtered","weightedTag","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop9","cardsPlayed","exhaustionFactor","pow","weightedCards","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","rateWillPower","getHistoryFactor","getTagsFactor","_iterator11","memory","addedMemory","now","Date","getHours","slidesCount","tagWeights","historyPosition","cardWillPower","filteredDecks","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","verifyPlayerSpecification","weightedZero","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","tag","checkIfWeightedZero","condition","specification","specificationMales","actualMales","specificationFemales","actualFemales","SelectionAlgorithmBase","selectRandomFromWeightedList","CardsLoader","requestFile","parserFactory","domParser","DOMParser","_loadFromUrl","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","loadFile","abrupt","stop","_x","_loadFile","_callee2","xml","xmlDoc","cardElements","xmlElement","parser","_context2","sent","parseFromString","getElementsByTagName","parentElement","nodeName","parseDeckReference","createParser","deserialize","indexOf","_x2","_x3","_x4","getAttribute","deckWhitelist","referenceRequests","cardRefs","idAttr","cardId","PlayerSetting","playerIndex","ParserHelper","s","startsWith","substring","isNaN","genderRequirementMap","split","m","male","f","female","o","opposite","same","BaseCardParser","createCard","getDefaultAttributes","parseAttributes","subElements","tagName","parseElement","parsePlayers","parsePlayer","parsePlayerTag","requiredGender","genderAttr","genderReq","parseGenderRequirement","TextElement","translations","TextTranslation","TextContentParser","isConditionalElement","parseTextElement","parseTranslation","textElement","texts","textXmlNode","textContent","TextCardParser","_BaseCardParser","textContentParser","rootXml","followUpAttr","followUpProbability","followUpPropability","followUpDelay","seconds","parseTimeSpanStringToSeconds","addElement","subElement","followUp","TextCard","_BaseCard","language","BaseCard","FactCard","_TextCard","isTrueFact","FactCardParser","_TextCardParser","get","prototype","attr","toBool","VirusCard","VirusCardParser","DefaultTextCardParser","factory","DownCard","NeverEverCard","JokeCard","QuestionCard","TaskCard","WouldYouRatherCard","DrinkCard","GroupGameCard","NoIdeaLosesCard","parsers","WyrCard","loader","DefaultCardParserFactory","response","axios","loadCards","_loadCards","loadFromUrl","services","api","cardsLoader","loadSourceEpic","action$","_state$","pipe","isActionOf","mergeMap","from","success","catchError","message","of","failure","toTranslator","localize","languageCode","getContentStyles","textAlign","up","spaceHeaderStyles","visibility","getHeaderStyles","defaultMarkdownOptions","overrides","_ref4","objectWithoutProperties","marginBlockStart","marginBlockEnd","h3","_ref5","h4","_ref6","TextFragment","RawTextFragment","_TextFragment","text","VariableFragment","PlayerReferenceFragment","_VariableFragment","SipsFragment","minSips","sipsIndex","RandomNumberFragment","numbers","NumberRange","StaticNumber","RandomTextFragment","GenderBasedSelectionFragment","femaleText","maleText","referencedPlayerIndex","SocialMediaPlatformFragment","DefaultTextDecoder","lastTokenIndex","token","readToken","parseVariableFragment","parseRandomSelectionFragment","parseGenderSelectionFragment","playerTag","playerRef","parameterBegin","genderString","parsePlayerIndex","sipsTag","sipsFragment","test","parseNumberArray","splitQuoted","currentNumber","numberStart","isRangeToken","num","delimiter","tokenStart","withinQuotes","replace","nextChar","fragment","splitterIndex","reference","endChar","char","TextFormatter","fragments","requiredPlayers","groupBy","hasOwnProperty","rootSetting","sips","selection","lastPlayerFragment","boldPlayerNames","boldSips","sip","referencedPlayer","playerKeys","getCount","TextSlidePresenter","_CardPresenter","translator","gameEngine","selectText","_this$formatText","formatText","formatted","initializeState","actions","due","setSeconds","getSeconds","createFollowUp","param","_this$selectFollowUpT","selectFollowUpText","initializeFollowUpState","followUps","CardPresenter","requiredCards","selectCard","initializeCard","initializeFollowUpCard","decode","getRequiredPlayers","requiredSips","getRequiredSips","indexedPlayers","sipInfo","getSips","store","getState","format","viableContents","toLocaleLowerCase","colors","drink","fact","groupGame","neverEver","noIdeaLoses","truthOrDare","virus","wouldYouRather","task","nextSlide","slideState","cursor","-webkit-tap-highlight-color","clickableRoot","spaceHeader","questionPaper","unit","questionButtonsContainer","isDeciding","selectedPlayer","select","decision","springProps","useSpring","transform","web","div","QuestionComponent","esm","markdownContent","DareComponent","TruthComponent","selectedText","getRandomSelectionAlgorithm","renderprops","config","wobbly","to","_TextSlidePresenter","DownSlide_Component","isFollowUp","isTrue","availableFactSlideModes","selectedMode","FactSlide_Component","cardText","instruction","_selection","mode","NeverEverSlide_Component","_card","_players","WouldYouRatherSlide_Component","DrinkSlide_Component","VirusSlide_Component","NoIdeaLosesSlide_Component","GroupGameSlide_Component","slideComponents","TaskSlide_Component","nextSlideEpic","dueFollowUps","sortBy","slideInitalizer","slideActions","initializeFollowUp","components","getSlideRegistrations","_selection$recomputeW","recomputeWillPower","willPowerMemory","willPowerActions","selectNextSlide","initialize","redirectOnGameStartedEpic","tap","ignoreElements","combineEpics","settingsEpics","gameEpics","composeEnhancers","combineReducers","getType","isStarted","startTime","currentSlideStatus","flatten","weightsList","GetSlideWeightedArray","rootReducer","gameReducer","settingsReducer","localizeReducer","epicMiddleware","createEpicMiddleware","dependencies","middlewares","enhancer","applyMiddleware","createStore","run","rootEpic","selectPlayers","seedrandom","active","extractGameStatus","chart","InsightsCards","selectedCardType","setSelectedCardType","cardTypes","getAllCardDeckStatistics","decksStatistics","willPowerStatistics","info","displayEmpty","renderValue","es6","dataKey","tickFormatter","formatter","labelFormatter","fill","maxBarSize","entry","InsightsView","components_InsightsWillPowerView","components_InsightsCurrentSlide","components_InsightsCards","overflowY","InsightsView_InsightsView","render","requestSlide","GameComponent","components_SlideWrapper","top","right","components_GameOptions","Switch","Route","SettingsDialog","InsightsDialog","current","BrowserRouter","basename","exact","components_GameComponent","Redirect","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","src_step","src_iterator","src_iteratorNormalCompletion","src","dispatch","userLang","userLanguage","translation","drinctetTranslations","renderToStaticMarkup","defaultLanguage","es","src_App","getElementById","URL","href","origin","fetch","contentType","headers","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.afd16661.chunk.js","sourcesContent":["// @ts-ignore\r\nprocess.env.LOCAL_STORAGE_VERSION = 1;","import { PlayerArrangement } from './../../core/player-arrangement';\r\nimport { Weighted } from \"@core/weighted\";\r\nimport cuid from \"cuid\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { createAsyncAction, createStandardAction } from \"typesafe-actions\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport { Gender, PlayerInfo } from \"@core/player-info\";\r\n\r\nexport const addPlayer = createStandardAction(\"ADD_PLAYER\").map(\r\n    (playerInfo: { name: string; gender: Gender }): { payload: PlayerInfo } => ({\r\n        payload: {\r\n            name: playerInfo.name,\r\n            gender: playerInfo.gender,\r\n            id: cuid(),\r\n        },\r\n    }),\r\n);\r\nexport const updatePlayer = createStandardAction(\"UPDATE_PLAYER\")<PlayerInfo>();\r\nexport const removePlayer = createStandardAction(\"REMOVE_PLAYER\")<string>();\r\n\r\nexport const addSource = createStandardAction(\"ADD_SOURCE\").map(\r\n    (url: string): { payload: SourceInfo } => ({\r\n        payload: {\r\n            url,\r\n            isLoading: false,\r\n            errorMessage: undefined,\r\n            cards: undefined,\r\n            weight: 0.5,\r\n            tags: []\r\n        },\r\n    }),\r\n);\r\nexport const removeSource = createStandardAction(\"REMOVE_SOURCE\")<string>();\r\n\r\nexport const loadSourceAsync = createAsyncAction(\r\n    \"LOAD_SOURCE_REQUEST\",\r\n    \"LOAD_SOURCE_SUCCESS\",\r\n    \"LOAD_SOURCE_FAILURE\",\r\n)<string, { url: string; cards: Card[] }, { url: string; message: string }>();\r\n\r\nexport const setSourceWeight = createStandardAction(\"SET_SOURCE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setPreferOppositeGenders = createStandardAction(\"SET_PREFER_OPPOSITE_GENDERS\")<\r\n    boolean\r\n>();\r\n\r\nexport const addPlayerArrangment = createStandardAction(\"ADD_PLAYER_ARRANGEMENT\")<PlayerArrangement>();\r\nexport const removePlayerArrangment = createStandardAction(\"REMOVE_PLAYER_ARRANGEMENT\")<string>();\r\n\r\nexport const setSocialMediaPlatform = createStandardAction(\"SET_SOCIAL_MEDIA_PLATFORM\")<string>();\r\n\r\nexport const setSlideWeight = createStandardAction(\"SET_SLIDE_WEIGHT\")<Weighted<string>>();\r\n\r\nexport const setTagWeight = createStandardAction(\"SET_TAG_WEIGHT\")<Weighted<string>>();\r\n","import * as React from \"react\";\r\nimport { addPlayer } from \"../actions\";\r\nimport { Gender } from \"../../../core/player-info\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\n\r\nconst dispatchProps = {\r\n    addPlayer,\r\n};\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    name: string;\r\n};\r\n\r\nclass AddPlayerForm extends React.Component<Props, State> {\r\n    readonly state = { name: \"\" };\r\n\r\n    handlePlayerNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ name: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        let gender: Gender = \"Male\";\r\n        if (this.state.name.endsWith(\"a\"))\r\n            //sorry Luca\r\n            gender = \"Female\";\r\n\r\n        this.props.addPlayer({ name: this.state.name, gender });\r\n        this.setState({ name: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.name) this.handleAddClick();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { name } = this.state;\r\n        const { translate } = this.props;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        placeholder={translate(\"settings.players.playerName\") as string}\r\n                        onChange={this.handlePlayerNameChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!name}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    dispatchProps,\r\n)(withLocalize(AddPlayerForm));\r\n","export class PlayerInfo {\r\n    constructor(public id: string, public name: string, public gender: Gender) {}\r\n}\r\n\r\nexport type Gender = \"Male\" | \"Female\";\r\n","import {SettingsState} from \"./reducer\";\r\n\r\nexport const getPlayers = (state: SettingsState) => state.players;\r\n\r\nexport const getSources = (state: SettingsState) => state.sources;\r\n","import { Gender } from \"../../../core/player-info\";\r\nimport React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVenus, faMars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\n\r\ninterface Props extends LocalizeContextProps {\r\n    name: string;\r\n    gender: Gender;\r\n    onRemoveClick: () => void;\r\n    onSwapGenderClick: () => void;\r\n    onNameChanged: (name: string) => void;\r\n}\r\n\r\nconst getIconButtonStyle = (): React.CSSProperties => ({\r\n    margin: -10,\r\n    width: 48,\r\n    height: 48,\r\n});\r\n\r\nfunction PlayerListItem({ name, gender, onRemoveClick, onSwapGenderClick, onNameChanged, translate }: Props) {\r\n    return (\r\n        <div style={{ display: \"flex\" }}>\r\n            <IconButton\r\n                aria-label=\"Swap Gender\"\r\n                onClick={onSwapGenderClick}\r\n                style={{ ...getIconButtonStyle(), marginRight: 0 }}\r\n            >\r\n                <Icon>\r\n                    <FontAwesomeIcon icon={gender === \"Male\" ? faMars : faVenus} />\r\n                </Icon>\r\n            </IconButton>\r\n            <Input\r\n                error={!name}\r\n                onBlur={() => {\r\n                    if (!name) onRemoveClick();\r\n                }}\r\n                style={{ flexGrow: 1, marginLeft: 5, marginRight: 5 }}\r\n                placeholder={translate(\"settings.willBeRemoved\") as string}\r\n                value={name}\r\n                onChange={ev => onNameChanged(ev.currentTarget.value)}\r\n            />\r\n            <IconButton\r\n                aria-label=\"Delete\"\r\n                onClick={onRemoveClick}\r\n                style={{ ...getIconButtonStyle(), marginLeft: 0 }}\r\n                tabIndex={-1}\r\n            >\r\n                <DeleteIcon fontSize=\"default\" />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withLocalize(PlayerListItem);\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlayerInfo } from \"../../../core/player-info\";\r\nimport { removePlayer, updatePlayer } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport PlayerListItem from \"./PlayerListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  players: selectors.getPlayers(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n  removePlayer,\r\n  updatePlayer,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction PlayerList({ players, removePlayer, updatePlayer }: Props) {\r\n  return (\r\n    <List>\r\n      {players.map(player => (\r\n        <ListItem key={player.id}>\r\n          <ListItemText>\r\n            <PlayerListItem\r\n              name={player.name}\r\n              gender={player.gender}\r\n              onRemoveClick={() => removePlayer(player.id)}\r\n              onNameChanged={name =>\r\n                updatePlayer(new PlayerInfo(player.id, name, player.gender))\r\n              }\r\n              onSwapGenderClick={() =>\r\n                updatePlayer(\r\n                  new PlayerInfo(\r\n                    player.id,\r\n                    player.name,\r\n                    player.gender === \"Female\" ? \"Male\" : \"Female\",\r\n                  ),\r\n                )\r\n              }\r\n            />\r\n          </ListItemText>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(PlayerList);\r\n","import Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addSource, loadSourceAsync } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    addSource,\r\n    loadSource: loadSourceAsync.request,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & LocalizeContextProps;\r\n\r\ntype State = {\r\n    url: string;\r\n};\r\n\r\nclass AddSourceForm extends React.Component<Props, State> {\r\n    readonly state = { url: \"\" };\r\n\r\n    handleUrlChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ url: ev.currentTarget.value });\r\n    };\r\n\r\n    handleAddClick = () => {\r\n        if (!this.state.url || this.props.sources.findIndex(x => x.url === this.state.url) > -1) {\r\n            return;\r\n        }\r\n\r\n        this.props.addSource(this.state.url);\r\n        this.props.loadSource(this.state.url);\r\n        this.setState({ url: \"\" });\r\n    };\r\n\r\n    handleFormKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (this.state.url) {\r\n                this.handleAddClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { url } = this.state;\r\n        const { translate } = this.props;\r\n        const sourceExists = this.props.sources.findIndex(x => x.url === this.state.url) > -1;\r\n\r\n        return (\r\n            <form onKeyDown={this.handleFormKeyDown}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <Input\r\n                        style={{ flexGrow: 1 }}\r\n                        type=\"text\"\r\n                        value={url}\r\n                        placeholder={translate(\"settings.sources.sourceUrl\") as string}\r\n                        error={sourceExists}\r\n                        onChange={this.handleUrlChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: 5 }}\r\n                        disabled={!url || sourceExists}\r\n                        onClick={this.handleAddClick}\r\n                    >\r\n                        <Translate id=\"add\" />\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(AddSourceForm));\r\n","import {\r\n    Card,\r\n    CardHeader,\r\n    Typography,\r\n    Link,\r\n    Checkbox,\r\n    withStyles,\r\n    Theme,\r\n    createStyles,\r\n    LinearProgress,\r\n    Badge,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface LoadingFailedItemProps {\r\n    errorMessage: string | undefined;\r\n    onReloadClick: () => void;\r\n}\r\n\r\ninterface WeightProps {\r\n    weight: number;\r\n    onChangeWeight: (value: number) => void;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n        },\r\n        title: {\r\n            textOverflow: \"elipsis\",\r\n            wordBreak: \"break-all\",\r\n            overflow: \"hidden\",\r\n        },\r\n        fullWidth: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LoadingFailedItemProps, WeightProps, WithStyles<typeof styles> {\r\n    url: string;\r\n    isLoading: boolean;\r\n    cardsCount: number;\r\n    weight: number;\r\n    onRemoveClick: () => void;\r\n}\r\n\r\nfunction LoadingItem() {\r\n    return <LinearProgress />;\r\n}\r\n\r\nfunction LoadingFailedItem({ errorMessage, onReloadClick }: LoadingFailedItemProps) {\r\n    return (\r\n        <Typography color=\"secondary\" variant=\"body1\" component=\"small\">\r\n            {`${errorMessage}`}\r\n            <Link\r\n                style={{ marginLeft: 15 }}\r\n                component=\"button\"\r\n                variant=\"body1\"\r\n                onClick={onReloadClick}\r\n            >\r\n                Reload\r\n            </Link>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nfunction WeightSlider({ weight, onChangeWeight }: WeightProps) {\r\n    return (\r\n        <Slider\r\n            max={1}\r\n            min={0}\r\n            step={0.05}\r\n            style={{ margin: 10, padding: '4px 0px' }}\r\n            value={weight}\r\n            onChange={(_, n) => onChangeWeight(n)}\r\n        />\r\n    );\r\n}\r\n\r\nfunction SourcesListItem({\r\n    url,\r\n    classes,\r\n    isLoading,\r\n    errorMessage,\r\n    cardsCount,\r\n    weight,\r\n    onRemoveClick,\r\n    onReloadClick,\r\n    onChangeWeight,\r\n}: Props) {\r\n    return (\r\n        <Badge\r\n            badgeContent={cardsCount}\r\n            color=\"primary\"\r\n            max={9999}\r\n            className={classes.fullWidth}\r\n            showZero={false}\r\n        >\r\n            <Card className={classes.fullWidth}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Checkbox\r\n                            checked={weight !== 0}\r\n                            style={{ margin: -10 }}\r\n                            onChange={(_, b) => (b ? onChangeWeight(0.5) : onChangeWeight(0))}\r\n                        />\r\n                    }\r\n                    titleTypographyProps={{ className: classes.title }}\r\n                    title={url}\r\n                    action={\r\n                        <IconButton onClick={onRemoveClick}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    subheader={\r\n                        isLoading ? (\r\n                            <LoadingItem />\r\n                        ) : errorMessage ? (\r\n                            <LoadingFailedItem\r\n                                errorMessage={errorMessage}\r\n                                onReloadClick={onReloadClick}\r\n                            />\r\n                        ) : (\r\n                            <WeightSlider weight={weight} onChangeWeight={onChangeWeight} />\r\n                        )\r\n                    }\r\n                />\r\n            </Card>\r\n        </Badge>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(SourcesListItem);\r\n","import { ListItemText } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadSourceAsync, removeSource, setSourceWeight } from \"../actions\";\r\nimport * as selectors from \"../selectors\";\r\nimport SourcesListItem from \"./SourcesListItem\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sources: selectors.getSources(state.settings),\r\n});\r\n\r\nconst dispatchProps = {\r\n    loadSource: loadSourceAsync.request,\r\n    removeSource,\r\n    setSourceWeight,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SourcesList({ sources, removeSource, loadSource, setSourceWeight }: Props) {\r\n    return (\r\n        <List>\r\n            {sources.map(source => (\r\n                <ListItem key={source.url}>\r\n                    <ListItemText>\r\n                        <SourcesListItem\r\n                            url={source.url}\r\n                            isLoading={source.isLoading}\r\n                            errorMessage={source.errorMessage}\r\n                            cardsCount={(source.cards && source.cards.length) || 0}\r\n                            weight={source.weight}\r\n                            onChangeWeight={weight =>\r\n                                setSourceWeight({ value: source.url, weight })\r\n                            }\r\n                            onRemoveClick={() => removeSource(source.url)}\r\n                            onReloadClick={() => loadSource(source.url)}\r\n                        />\r\n                    </ListItemText>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(SourcesList);\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\n\r\nconst styles = () =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n        },\r\n    });\r\n\r\ntype Props = LocalizeContextProps & WithStyles<typeof styles>;\r\n\r\nfunction ChangeLanguage({ activeLanguage, languages, setActiveLanguage, classes }: Props) {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12} sm={10} md={8} lg={6}>\r\n                <FormControl className={classes.root}>\r\n                    <InputLabel htmlFor=\"language-input\">\r\n                        <Translate id=\"settings.configuration.language\" />\r\n                    </InputLabel>\r\n                    <Select\r\n                        inputProps={{\r\n                            id: \"language-input\",\r\n                        }}\r\n                        style={{ width: \"100%\" }}\r\n                        value={activeLanguage.code}\r\n                        onChange={ev => setActiveLanguage(ev.target.value)}\r\n                    >\r\n                        {languages.map(lang => (\r\n                            <MenuItem key={lang.code} value={lang.code}>{lang.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(withLocalize(ChangeLanguage));\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport {\r\n    Typography,\r\n    Switch,\r\n    FormControlLabel,\r\n    createStyles,\r\n    withStyles,\r\n    Grid,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Theme,\r\n    WithStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n} from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    preferOppositeGenders: state.settings.preferOppositeGenders,\r\n    players: state.settings.players,\r\n    arrangements: state.settings.arrangements,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setPreferOppositeGenders,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        section: {\r\n            marginTop: 10,\r\n        },\r\n        arrangmentItem: {\r\n            borderBottom: \"1px solid #d8d8d8\",\r\n            paddingBottom: 5,\r\n        },\r\n        arrangementSelect: {\r\n            width: 200,\r\n            [theme.breakpoints.down(\"xs\")]: {\r\n                width: \"100%\",\r\n            },\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles>;\r\n\r\nfunction PlayerSettings({\r\n    preferOppositeGenders,\r\n    setPreferOppositeGenders,\r\n    classes,\r\n    players,\r\n    arrangements,\r\n    addPlayerArrangment,\r\n    removePlayerArrangment,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.playerSettings\" />\r\n            </Typography>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={preferOppositeGenders}\r\n                        onChange={(_, c) => setPreferOppositeGenders(c)}\r\n                    />\r\n                }\r\n                label={<Translate id=\"settings.configuration.playerSettings.pairOppositeGenders\" />}\r\n            />\r\n            <Typography className={classes.section} variant=\"subtitle2\">\r\n                <Translate id=\"settings.configuration.arrangements\" />\r\n            </Typography>\r\n            <Typography>\r\n                <Translate id=\"settings.configuration.arrangements.description\" />\r\n            </Typography>\r\n            <Grid container>\r\n                {players\r\n                    .filter(player => arrangements.findIndex(x => x.p2 === player.id) === -1)\r\n                    .map(player => {\r\n                        const arrangment = arrangements.find(x => x.p1 === player.id);\r\n                        const arrangedPlayerId = arrangment === undefined ? \"\" : arrangment.p2;\r\n                        return (\r\n                            <Grid\r\n                                item\r\n                                container\r\n                                alignItems=\"flex-end\"\r\n                                className={classes.arrangmentItem}\r\n                                key={player.id}\r\n                            >\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <Typography variant=\"subtitle1\">{player.name}</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} lg={4}>\r\n                                    <FormControl className={classes.arrangementSelect}>\r\n                                        <InputLabel htmlFor=\"player-selection\">\r\n                                            <Translate id=\"settings.configuration.arrangements.pairWith\" />\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            value={arrangedPlayerId}\r\n                                            onChange={ev => {\r\n                                                const value = ev.target.value;\r\n                                                if (value === \"\") {\r\n                                                    removePlayerArrangment(player.id);\r\n                                                } else {\r\n                                                    addPlayerArrangment({\r\n                                                        p1: player.id,\r\n                                                        p2: value,\r\n                                                    });\r\n                                                }\r\n                                            }}\r\n                                            input={<Input id=\"player-selection\" />}\r\n                                        >\r\n                                            <MenuItem value=\"\">\r\n                                                <em>\r\n                                                    <Translate id=\"settings.configuration.arrangements.none\" />\r\n                                                </em>\r\n                                            </MenuItem>\r\n                                            {players\r\n                                                .filter(\r\n                                                    x =>\r\n                                                        x.id !== player.id &&\r\n                                                        arrangements.findIndex(\r\n                                                            y =>\r\n                                                                (y.p1 === x.id || y.p2 === x.id) &&\r\n                                                                y.p1 !== player.id,\r\n                                                        ) === -1,\r\n                                                )\r\n                                                .map(x => (\r\n                                                    <MenuItem key={x.id} value={x.id}>\r\n                                                        {x.name}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withStyles(styles)(withLocalize(PlayerSettings)));\r\n","export const socialMediaPlatforms = [\"Snapchat\", \"Instagram\", \"Facebook\"];\r\n\r\nexport const defaultSources = [\r\n    \"cards/bullshitfact.xml\",\r\n    \"cards/ichundderalkohol.xml\",\r\n    \"cards/ConversationStartersWorld.NeverHaveIEver.xml\",\r\n    \"cards/Bevil.xml\",\r\n    \"cards/ConversationStartersWorld.TruthOrDareDare.xml\",\r\n    \"cards/ConversationStartersWorld.TruthOrDareTruth.xml\",\r\n    \"cards/ConversationStartersWorld.Wyr.xml\",\r\n    \"cards/common.xml\",\r\n    \"cards/Picolo/Picolo.xml\",\r\n    \"cards/Picolo/Picolo.Silly.xml\",\r\n];\r\n\r\nexport const slideWeights: { [key: string]: number } = {\r\n    FactSlide: 0.4,\r\n    DownSlide: 0.2,\r\n    NeverEverSlide: 0.5,\r\n    TruthOrDareSlide: 0.35,\r\n    WouldYouRatherSlide: 0.5,\r\n    DrinkSlide: 0.5,\r\n    VirusSlide: 0.25,\r\n    NoIdeaLosesSlide: 0.5,\r\n    GroupGameSlide: 0.4,\r\n    TaskSlide: 0.2,\r\n};\r\n\r\n// if a card has one of these tags and an arranged player is selected\r\n// the propability that their counterpart is selected is increased further\r\nexport const higherArrangementPropabilityTags = [\"sexual\"];\r\n","import { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport * as React from \"react\";\r\nimport { Typography, FormControl, Select, Input, MenuItem } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { setSocialMediaPlatform } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { socialMediaPlatforms } from \"../../../../preferences\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    platform: state.settings.socialMediaPlatform,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSocialMediaPlatform,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction ChangeLanguage({ platform, setSocialMediaPlatform }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\">\r\n                <Translate id=\"settings.configuration.socialMediaPlatform\" />\r\n            </Typography>\r\n            <Typography gutterBottom>\r\n                <Translate id=\"settings.configuration.socialMediaPlatform.description\" />\r\n            </Typography>\r\n            <FormControl>\r\n                <Select style={{width: 200, marginTop: 10}}\r\n                    value={platform}\r\n                    onChange={ev => setSocialMediaPlatform(ev.target.value)}\r\n                    input={<Input />}\r\n                >\r\n                    {socialMediaPlatforms.map(x => (\r\n                        <MenuItem key={x} value={x}>\r\n                            {x}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(ChangeLanguage));\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { Slider } from \"@material-ui/lab\";\r\n\r\ninterface Props {\r\n    items: Weighted<string>[];\r\n    onChangeWeight: (item: Weighted<string>) => void;\r\n}\r\n\r\nclass ItemPreferences extends React.Component<Props> {\r\n    render() {\r\n        const { items, onChangeWeight } = this.props;\r\n\r\n        return (\r\n            <Grid container>\r\n                {items.map(x => (\r\n                    <Grid key={x.value} item container alignItems=\"center\">\r\n                        <Grid item xs={4} lg={3}>\r\n                            <Typography\r\n                                style={{\r\n                                    opacity: x.weight === 0 ? 0.5 : 1,\r\n                                }}\r\n                            >\r\n                                {x.value}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8} lg={9}>\r\n                            <Slider\r\n                                max={1}\r\n                                min={0}\r\n                                style={{ padding: \"20px 0\"}}\r\n                                step={0.05}\r\n                                value={x.weight}\r\n                                onChange={(_, v) => onChangeWeight({ value: x.value, weight: v })}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemPreferences;\r\n","export function percentageFixedTotal<T>(\r\n    values: T[],\r\n    getPercentage: (x: T) => number,\r\n    target: number,\r\n): Array<{ value: T; part: number }> {\r\n    // https://stackoverflow.com/a/13483486\r\n    const percentageValues = values.map(value => ({ value, percent: getPercentage(value) }));\r\n    const total = percentageValues.reduce((x, y) => x + y.percent, 0);\r\n\r\n    const result = new Array<{ value: T; part: number }>();\r\n    let sum = 0;\r\n    let prevBaseline = 0;\r\n\r\n    for (let i = 0; i < percentageValues.length; i++) {\r\n        const {value, percent} = percentageValues[i];\r\n\r\n        sum += percent / total * target;\r\n        const sumRounded = Math.round(sum);\r\n\r\n        result.push({ value, part: sumRounded - prevBaseline });\r\n        prevBaseline = sumRounded;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setSlideWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slides: state.settings.slides,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setSlideWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction SlidePreferences({ slides, setSlideWeight }: Props) {\r\n    const totalCards = 50;\r\n    const slidePercentages = percentageFixedTotal(slides, x => x.weight, totalCards);\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.slides\" />\r\n            </Typography>\r\n            <ItemPreferences items={slides} onChangeWeight={x => setSlideWeight(x)} />\r\n            <Typography>\r\n                <Translate\r\n                    id=\"settings.configuration.slidesProjection\"\r\n                    data={{ count: totalCards }}\r\n                />\r\n                {slidePercentages.map((x, i) => (\r\n                    <React.Fragment key={x.value.value}>\r\n                        <b style={{fontWeight: \"bolder\"}}>{x.value.value}</b>: {x.part}\r\n                        {i < slidePercentages.length - 1 ? \", \" : null}\r\n                    </React.Fragment>\r\n                ))}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(SlidePreferences));\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport { setTagWeight } from \"../../actions\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ItemPreferences from \"./ItemPreferences\";\r\nimport { connect } from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tags: state.settings.tags,\r\n    decks: state.settings.sources,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setTagWeight,\r\n};\r\n\r\ntype Props = LocalizeContextProps & ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\nfunction TagPreferences({ tags, decks, setTagWeight }: Props) {\r\n    const allTags = _.uniq(decks.flatMap(x => x.tags));\r\n    const weights = allTags.map(x => tags.find(y => y.value === x) || { value: x, weight: 0.5 });\r\n\r\n    return (\r\n        <div>\r\n            <Typography gutterBottom variant=\"h5\">\r\n                <Translate id=\"settings.configuration.tags\" />\r\n            </Typography>\r\n            <ItemPreferences items={weights} onChangeWeight={x => setTagWeight(x)} />\r\n            {weights.length === 0 ? (\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    <Translate id=\"settings.configuration.tags.none\" />\r\n                </Typography>\r\n            ) : (\r\n                undefined\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatchProps,\r\n)(withLocalize(TagPreferences));\r\n","import * as React from \"react\";\r\nimport ChangeLanguage from \"./configuration/ChangeLanguage\";\r\nimport PlayerSettings from \"./configuration/PlayerSettings\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport SocialMediaPlatform from \"./configuration/SocialMediaPlatform\";\r\nimport SlidePreferences from \"./configuration/SlidePreferences\";\r\nimport TagsPerferences from \"./configuration/TagsPerferences\";\r\n\r\nclass Configuration extends React.Component {\r\n    render() {\r\n        return (\r\n            <Grid style={{ padding: 24 }}>\r\n                <Grid container spacing={32} direction=\"column\">\r\n                    <Grid item style={{ marginBottom: 20 }}>\r\n                        <ChangeLanguage />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <PlayerSettings />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SocialMediaPlatform />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <SlidePreferences />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TagsPerferences />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configuration;\r\n","import * as React from \"react\";\r\nimport { AppBar, Tabs, Tab, Theme, Grid } from \"@material-ui/core\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/core/styles\";\r\nimport AddPlayerForm from \"./AddPlayerForm\";\r\nimport PlayerList from \"./PlayerList\";\r\nimport AddSourceForm from \"./AddSourceForm\";\r\nimport SourcesList from \"./SourcesList\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport Configuration from \"./Configuration\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n        },\r\n    });\r\n\r\ninterface Props extends LocalizeContextProps, WithStyles<typeof styles> {\r\n    theme: Theme;\r\n}\r\n\r\ninterface State {\r\n    value: number;\r\n}\r\n\r\nclass SettingsView extends React.Component<Props, State> {\r\n    readonly state = {\r\n        value: 0,\r\n    };\r\n\r\n    handleChange = (_event: any, value: number) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    handleChangeIndex = (index: number) => {\r\n        this.setState({ value: index });\r\n    };\r\n\r\n    render() {\r\n        const { theme, classes, translate } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={this.state.value}\r\n                        onChange={this.handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                    >\r\n                        <Tab label={translate(\"settings.players\")} />\r\n                        <Tab label={translate(\"settings.sources\")} />\r\n                        <Tab label={translate(\"settings.configuration\")} />\r\n                    </Tabs>\r\n                </AppBar>\r\n                <SwipeableViews\r\n                    axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                    index={this.state.value}\r\n                    ignoreNativeScroll={true}\r\n                    style={{ flexGrow: 1 }}\r\n                    containerStyle={{ height: \"100%\" }}\r\n                    onChangeIndex={this.handleChangeIndex}\r\n                >\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ marginTop: 24, marginLeft: 24, marginRight: 24 }}>\r\n                            <AddPlayerForm />\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                flexGrow: 1,\r\n                                height: 0,\r\n                                overflow: \"auto\",\r\n                                margin: \"24px 24px 0 24px\",\r\n                            }}\r\n                        >\r\n                            <PlayerList />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ marginTop: 24, marginLeft: 24, marginRight: 24 }}>\r\n                            <AddSourceForm />\r\n                        </div>\r\n                        <div style={{ flexGrow: 1, height: 0, overflow: \"auto\" }}>\r\n                            <SourcesList />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ flexGrow: 1, height: 0, overflowX: \"hidden\" }}>\r\n                            <Configuration />\r\n                        </div>\r\n                    </Grid>\r\n                </SwipeableViews>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLocalize(withStyles(styles, { withTheme: true })(SettingsView));\r\n","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        responsiveHeader: {\r\n            fontSize: \"4rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"2rem\",\r\n            },\r\n        },\r\n        responsiveSubTitle: {\r\n            fontSize: \"1.5rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1rem\",\r\n            },\r\n        },\r\n    });\r\n\r\nfunction DrinctetHeader({ classes }: WithStyles<typeof styles>) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\" className={classes.responsiveHeader}>\r\n                Drinctet\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.responsiveSubTitle}>\r\n                The goal is to drink that!\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(DrinctetHeader);\r\n","import { PlayerSelectionInsights } from './../../core/selection/insights';\r\nimport { createStandardAction, createAsyncAction } from \"typesafe-actions\";\r\nimport { FollowUpSlide, Translator } from 'GameModels';\r\nimport { History } from 'history';\r\nimport { SlideSelectionInsights } from '@core/selection/insights';\r\nimport { CardRef } from '@core/cards/card-ref';\r\n\r\nexport const startGame = createStandardAction(\"START_GAME\")<History>();\r\n\r\nexport const cancelGame = createStandardAction(\"CANCEL_GAME\")();\r\n\r\nexport const requestSlideAsync = createAsyncAction(\r\n    \"NEXT_SLIDE_REQUEST\",\r\n    \"NEXT_SLIDE_SUCCESS\",\r\n    \"NEXT_SLIDE_FAILURE\",\r\n)<Translator, {slide: string, insights: SlideSelectionInsights | null}, string>();\r\n\r\nexport const applyCard = createStandardAction(\"APPLY_CARD\")<CardRef>();\r\n\r\nexport const setSlideState = createStandardAction(\"SET_SLIDE_STATE\")<{state: any, insights: PlayerSelectionInsights | null}>();\r\n\r\nexport const enqueueFollowUp = createStandardAction(\"ADD_FOLLOW_UP\")<FollowUpSlide>();\r\nexport const activateFollowUp = createStandardAction(\"ACTIVATE_FOLLOW_UP\")<FollowUpSlide>();\r\n\r\nexport const setWillPowerLocked = createStandardAction(\"SET_WILL_POWER_LOCKED\")<boolean>();\r\nexport const setWillPower = createStandardAction(\"SET_WILL_POWER\")<number>();\r\nexport const addWillPowerMemory = createStandardAction(\"ADD_WILL_POWER_MEMORY\")<string[]>();\r\n","import { createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { startGame } from \"../../game/actions\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        color: \"white\",\r\n        width: \"100%\",\r\n        backgroundColor: \"#e74c3c\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#c0392b\",\r\n        },\r\n    },\r\n});\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    settings: state.settings,\r\n});\r\n\r\nconst dispatchProps = {\r\n    startGame,\r\n};\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps &\r\n    RouteComponentProps;\r\n\r\nclass StartButton extends React.Component<Props> {\r\n    startGame = () => {\r\n        const { startGame, history } = this.props;\r\n\r\n        startGame(history);\r\n    };\r\n\r\n    render() {\r\n        const { classes, settings } = this.props;\r\n\r\n        const arePlayersSelected = settings.players.length > 0;\r\n        const areSourcesAdded = settings.sources.filter(x => x.cards !== undefined).length > 0;\r\n        const areSourcesLoading = settings.sources.filter(x => x.isLoading).length > 0;\r\n\r\n        return (\r\n            <Fab\r\n                variant=\"extended\"\r\n                size=\"large\"\r\n                disabled={!arePlayersSelected || !areSourcesAdded || areSourcesLoading}\r\n                classes={{ root: classes.root }}\r\n                onClick={this.startGame}\r\n            >\r\n                <Translate id=\"welcome.startGame\" />\r\n            </Fab>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withRouter,\r\n)(StartButton) as React.ComponentType;\r\n","import { Grid, createStyles, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\nimport DrinctetHeader from \"./DrinctetHeader\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst styles = createStyles({\r\n    root: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    header: {\r\n        margin: 20,\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ntype Props = WithStyles<typeof styles>;\r\n\r\ninterface State {\r\n    viewportHeight: number;\r\n}\r\n\r\nclass WelcomeView extends Component<Props, State> {\r\n    readonly state = {\r\n        viewportHeight: window.innerHeight,\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.updateHeight = this.updateHeight.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateHeight);\r\n    }\r\n\r\n    updateHeight(): void {\r\n        this.setState({ viewportHeight: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { viewportHeight } = this.state;\r\n        return (\r\n            <div className={classes.root}>\r\n                {viewportHeight > 500 ? (\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12} md={6} className={classes.header}>\r\n                            <DrinctetHeader />\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : null}\r\n                <div style={{ flexGrow: 1, height: 0 }}>\r\n                    <Grid container justify=\"center\" style={{ height: \"100%\" }}>\r\n                        <Grid item xs={12} md={6}>\r\n                            <SettingsView />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <Grid container justify=\"center\">\r\n                    <Grid item xs={12} md={6} container justify=\"center\">\r\n                        <Grid item xs={10} lg={8} style={{ padding: \"10px 20px 20px 20px\" }}>\r\n                            <StartButton />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(WelcomeView);\r\n","// Source: https://github.com/vasilevich/react-fullscreen-crossbrowser (MIT)\r\n\r\nconst key: any = {\r\n    fullscreenEnabled: 0,\r\n    fullscreenElement: 1,\r\n    requestFullscreen: 2,\r\n    exitFullscreen: 3,\r\n    fullscreenchange: 4,\r\n    fullscreenerror: 5,\r\n};\r\n\r\nconst webkit = [\r\n    \"webkitFullscreenEnabled\",\r\n    \"webkitFullscreenElement\",\r\n    \"webkitRequestFullscreen\",\r\n    \"webkitExitFullscreen\",\r\n    \"webkitfullscreenchange\",\r\n    \"webkitfullscreenerror\",\r\n];\r\n\r\nconst moz = [\r\n    \"mozFullScreenEnabled\",\r\n    \"mozFullScreenElement\",\r\n    \"mozRequestFullScreen\",\r\n    \"mozCancelFullScreen\",\r\n    \"mozfullscreenchange\",\r\n    \"mozfullscreenerror\",\r\n];\r\n\r\nconst ms = [\r\n    \"msFullscreenEnabled\",\r\n    \"msFullscreenElement\",\r\n    \"msRequestFullscreen\",\r\n    \"msExitFullscreen\",\r\n    \"MSFullscreenChange\",\r\n    \"MSFullscreenError\",\r\n];\r\n\r\n// so it doesn't throw if no window or document\r\nconst document: any =\r\n    typeof window !== \"undefined\" && typeof window.document !== \"undefined\" ? window.document : {};\r\n\r\nconst vendor =\r\n    (\"fullscreenEnabled\" in document && Object.keys(key)) ||\r\n    (webkit[0] in document && webkit) ||\r\n    (moz[0] in document && moz) ||\r\n    (ms[0] in document && ms) ||\r\n    [];\r\n\r\nexport default class Fullscreen {\r\n    static requestFullscreen(element: any) {\r\n        return element[vendor[key.requestFullscreen]]();\r\n    }\r\n    static requestFullscreenFunction(element: any) {\r\n        return element[vendor[key.requestFullscreen]];\r\n    }\r\n    static get exitFullscreen() {\r\n        return document[vendor[key.exitFullscreen]].bind(document);\r\n    };\r\n    static addEventListener(type: any, handler: any, options: any) {\r\n        return document.addEventListener(vendor[key[type]], handler, options);\r\n    }\r\n    static removeEventListener(type: any, handler: any, options: any) {\r\n        return document.removeEventListener(vendor[key[type]], handler, options);\r\n    }\r\n    static get fullscreenEnabled() {\r\n        return Boolean(document[vendor[key.fullscreenEnabled]]);\r\n    }\r\n    static get fullscreenElement() {\r\n        return document[vendor[key.fullscreenElement]];\r\n    }\r\n    static get onfullscreenchange() {\r\n        return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()];\r\n    }\r\n    static set onfullscreenchange(handler) {\r\n        document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler;\r\n    }\r\n    static get onfullscreenerror() {\r\n        return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()];\r\n    }\r\n    static set onfullscreenerror(handler) {\r\n        document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler;\r\n    }\r\n}\r\n","import {\r\n    createStyles,\r\n    IconButton,\r\n    ListItemIcon,\r\n    Menu,\r\n    MenuItem,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport FeedbackIcon from \"@material-ui/icons/Feedback\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport FullscreenIcon from \"@material-ui/icons/Fullscreen\";\r\nimport FullscreenExitIcon from \"@material-ui/icons/FullscreenExit\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component, ComponentType } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\nimport Fullscreen from \"@utils/fullscreen\";\r\n\r\nconst styles = createStyles({\r\n    button: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    LocalizeContextProps &\r\n    WithStyles<typeof styles> &\r\n    RouterProps;\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n    activeFollowUp: state.game.activeFollowUp,\r\n    selectedCard: state.game.selectedCard,\r\n});\r\n\r\nconst dispatchProps = {};\r\n\r\ninterface State {\r\n    anchorEl: HTMLElement | null;\r\n    isFullscreen: boolean;\r\n}\r\n\r\nclass GameOptions extends Component<Props, State> {\r\n    readonly state: State = {\r\n        anchorEl: null,\r\n        isFullscreen: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        Fullscreen.onfullscreenchange = () => {\r\n            console.log(Fullscreen.fullscreenElement);\r\n            \r\n            this.setState(state => ({ ...state, isFullscreen: Fullscreen.fullscreenElement }));\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Fullscreen.onfullscreenchange = null;\r\n    }\r\n\r\n    handleMenuOpenClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    handleNavigate = (path: string) => {\r\n        this.handleClose();\r\n        this.props.history.push(`/game/${path}`);\r\n    };\r\n\r\n    toggleFullscreen = () => {\r\n        const { isFullscreen } = this.state;\r\n        if (isFullscreen) {\r\n            Fullscreen.exitFullscreen();\r\n        } else {\r\n            Fullscreen.requestFullscreen(window.document.documentElement);\r\n        }\r\n\r\n        this.handleClose();\r\n    };\r\n\r\n    render() {\r\n        const { classes, selectedCard } = this.props;\r\n        const { anchorEl, isFullscreen } = this.state;\r\n        const isOpen = anchorEl !== null;\r\n\r\n        return (\r\n            <div>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={this.handleMenuOpenClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={isOpen}\r\n                    onClose={this.handleClose}\r\n                    PaperProps={{\r\n                        style: {\r\n                            width: 200,\r\n                        },\r\n                    }}\r\n                >\r\n                    <MenuItem onClick={() => this.handleNavigate(\"settings\")}>\r\n                        <ListItemIcon>\r\n                            <SettingsIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.settings\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => this.handleNavigate(\"insights\")}>\r\n                        <ListItemIcon>\r\n                            <DonutLargeIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.insights\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.handleClose} disabled={selectedCard === null}>\r\n                        <ListItemIcon>\r\n                            <FeedbackIcon />\r\n                        </ListItemIcon>\r\n                        <Translate id=\"game.options.reportCard\" />\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.toggleFullscreen}>\r\n                        <ListItemIcon>\r\n                            {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\r\n                        </ListItemIcon>\r\n                        <Translate id={isFullscreen ? \"game.options.exitFullscreen\" : \"game.options.fullscreen\"} />\r\n                    </MenuItem>\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withStyles(styles),\r\n    withLocalize,\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withRouter,\r\n)(GameOptions) as ComponentType;\r\n","import { AppBar, Button, createStyles, Slide, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RouterProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport SettingsView from \"../../settings/components/SettingsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogPaper: {\r\n        height: \"80vh\"\r\n    },\r\n    fullscreenPaper: {\r\n        height: \"100vh\"\r\n    }\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction SettingsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n                classes={{paperScrollPaper: classes.dialogPaper, paperFullScreen: classes.fullscreenPaper}}\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.settings\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <SettingsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(SettingsDialog) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    slide: state.game.selectedSlide,\r\n    slideInsights: state.game.slideInsights,\r\n    playerInsights: state.game.playerInsights,\r\n    players: state.settings.players,\r\n    cardRef: state.game.selectedCard,\r\n});\r\n\r\nconst styles = createStyles({\r\n    section: {\r\n        marginTop: 10,\r\n    },\r\n    scrollableTable: {\r\n        overflow: \"auto\",\r\n        width: \"100%\",\r\n    },\r\n    tableCellNoBreak: {\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles>;\r\n\r\nfunction renderPredefinedPlayers({ playerInsights, players }: Props) {\r\n    return (\r\n        <div>\r\n            <Typography>\r\n                <Translate id=\"insights.predefinedPlayers\" />\r\n                {\": \"}\r\n                {playerInsights!.predefined\r\n                    .map(x => players.find(y => y.id === x))\r\n                    .filter(x => x != null)\r\n                    .map(x => x!.name)\r\n                    .join(\", \")}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderPlayerInsights(props: Props) {\r\n    const { playerInsights, players, classes } = props;\r\n    return (\r\n        <div className={classes.scrollableTable}>\r\n            {playerInsights!.predefined.length > 0 ? renderPredefinedPlayers(props) : null}\r\n            {playerInsights!.rounds.map((x, i) => {\r\n                const statistics = percentageFixedTotal(x, x => x.weight, 1000);\r\n                return (\r\n                    <table key={i}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className={classes.tableCellNoBreak}>\r\n                                    <Typography>\r\n                                        <Translate id=\"insights.player\" data={{ number: i + 1 }} />:\r\n                                    </Typography>\r\n                                </td>\r\n                                {statistics.map(y => {\r\n                                    const player = players.find(p => p.id === y.value.playerId);\r\n                                    let element: JSX.Element;\r\n                                    if (player === undefined) {\r\n                                        element = (\r\n                                            <span>\r\n                                                <i>\r\n                                                    <Translate id=\"insights.playerRemoved\" />\r\n                                                </i>{\" \"}\r\n                                                ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    } else {\r\n                                        element = (\r\n                                            <span>\r\n                                                {player.name} ({y.part / 10}%)\r\n                                            </span>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <td key={y.value.playerId} style={{ paddingLeft: 10 }}>\r\n                                            <Typography>\r\n                                                {conditionalBold(element, y.value.chosen)}\r\n                                            </Typography>\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction conditionalBold(element: JSX.Element, isBold: boolean): JSX.Element {\r\n    if (isBold) {\r\n        return <b>{element}</b>;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nfunction renderSlideWeights({ slide, slideInsights }: Props) {\r\n    const slides = slideInsights!.weights;\r\n    const statistics = percentageFixedTotal(slides, x => x.weight, 1000);\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {statistics.map(x => (\r\n                    <tr key={x.value.value}>\r\n                        <td>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.value.value}</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                        <td style={{ paddingLeft: 10 }}>\r\n                            <Typography>\r\n                                {conditionalBold(\r\n                                    <span>{x.part / 10}%</span>,\r\n                                    x.value.value === slide,\r\n                                )}\r\n                            </Typography>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nclass InsightsCurrentSlide extends Component<Props> {\r\n    render() {\r\n        const { playerInsights, classes, cardRef } = this.props;\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.currentSlide\" />\r\n                </Typography>\r\n                <Typography>\r\n                    <Translate id=\"insights.currentCard\" />\r\n                    {\": \"}\r\n                    {cardRef === null ? (\r\n                        <i>\r\n                            <Translate id=\"insights.noCard\" />\r\n                        </i>\r\n                    ) : (\r\n                        <span>\r\n                            <Translate\r\n                                id=\"insights.cardInfo\"\r\n                                data={{\r\n                                    name: cardRef.card.type,\r\n                                    id: cardRef.card.id,\r\n                                    wp: cardRef.card.willPower === undefined ? <Translate id=\"insights.universal\"/> : cardRef.card.willPower,\r\n                                    url: cardRef.deckUrl\r\n                                }}\r\n                            />\r\n                        </span>\r\n                    )}\r\n                </Typography>\r\n                {renderSlideWeights(this.props)}\r\n\r\n                <Typography variant=\"h6\" className={classes.section}>\r\n                    <Translate id=\"insights.playerSelection\" />\r\n                </Typography>\r\n                {playerInsights === null ? (\r\n                    <Typography>\r\n                        <i>\r\n                            <Translate id=\"insights.noPlayers\" />\r\n                        </i>\r\n                    </Typography>\r\n                ) : (\r\n                    renderPlayerInsights(this.props)\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsCurrentSlide) as React.ComponentType;\r\n","import { createStyles, FormControlLabel, FormGroup, Switch, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport * as React from \"react\";\r\nimport { Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { setWillPower, setWillPowerLocked } from \"../actions\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n    isLocked: state.game.isWillPowerLocked,\r\n});\r\n\r\nconst dispatchProps = {\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n};\r\n\r\nconst styles = \r\n    createStyles({\r\n        toggleContainer: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps & WithStyles<typeof styles>;\r\n\r\nfunction InsightsWillPowerView({\r\n    currentWillPower,\r\n    isLocked,\r\n    setWillPower,\r\n    setWillPowerLocked,\r\n    classes,\r\n}: Props) {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                <Translate id=\"insights.willPower\" />\r\n            </Typography>\r\n            <div className={classes.toggleContainer}>\r\n                <ToggleButtonGroup\r\n                    exclusive\r\n                    value={currentWillPower}\r\n                    onChange={(_, y) => setWillPower(y)}\r\n                    children={[1, 2, 3, 4, 5].map(x => (\r\n                        <ToggleButton key={x} value={x}>\r\n                            {x}\r\n                        </ToggleButton>\r\n                    ))}\r\n                />\r\n            </div>\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch checked={isLocked} onChange={(_, x) => setWillPowerLocked(x)} />\r\n                    }\r\n                    label={<Translate id=\"insights.lockWillPower\" />}\r\n                />\r\n            </FormGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n    withStyles(styles),\r\n)(InsightsWillPowerView) as React.ComponentType;\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { CardDeck } from \"@core/card-deck\";\r\n\r\nexport class Insights {\r\n    public playerSelection: PlayerSelectionInsights | null = null;\r\n    public slideWeights: SlideSelectionInsights | null  = null;\r\n}\r\n\r\nexport interface PlayerSelectionInsights {\r\n    predefined: string[];\r\n    rounds: Array<PlayerSelection[]>;\r\n}\r\n\r\nexport interface SlideSelectionInsights {\r\n    weights: Weighted<string>[];\r\n}\r\n\r\nexport interface PlayerSelection {\r\n    chosen: boolean;\r\n    weight: number;\r\n    playerId: string;\r\n}\r\n\r\nexport interface CardsInsight {\r\n    decks: Weighted<CardDeck>[];\r\n    willPower: Weighted<{willPower: number | null, count: number}>[];\r\n    totalCards: number;\r\n}\r\n","import { Weighted } from \"./../weighted\";\r\n\r\nexport type RNG = () => number;\r\nconst defaultRandomGenerator: RNG = () => Math.random();\r\n\r\nexport function selectRandomWeighted<T>(\r\n    items: T[],\r\n    getWeight: (item: T) => number,\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    if (items.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const weights: Array<{ item: T; weight: number }> = [];\r\n    let totalWeight: number = 0;\r\n    for (const item of items) {\r\n        const weight = getWeight(item);\r\n        weights.push({ item, weight });\r\n\r\n        totalWeight += weight;\r\n    }\r\n\r\n    let randomWeight = totalWeight * random();\r\n    for (const { item, weight } of weights) {\r\n        if (weight === 0) {\r\n            continue;\r\n        }\r\n        randomWeight -= weight;\r\n\r\n        if (randomWeight <= 0) {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function selectRandomFromWeightedList<T>(\r\n    items: Weighted<T>[],\r\n    random: RNG = defaultRandomGenerator,\r\n): T | undefined {\r\n    const result = selectRandomWeighted(items, item => item.weight, random);\r\n    if (result === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    return result.value;\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { Weighted } from \"@core/weighted\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { SelectionAlgorithm } from \"./selection-algorithm\";\r\nimport { RNG, selectRandomFromWeightedList, selectRandomWeighted } from \"./utils\";\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport abstract class SelectionAlgorithmBase implements SelectionAlgorithm {\r\n    protected readonly random: RNG;\r\n\r\n    constructor(protected readonly status: GameStatus, random: RNG) {\r\n        this.random = random;\r\n    }\r\n\r\n    public abstract selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[];\r\n    public abstract selectNextSlide(availableSlides: SlideRegistration[]): string | undefined;\r\n    public abstract selectCard(cardType: string): CardRef;\r\n    public abstract getSips(min: number): number;\r\n    public abstract recomputeWillPower(memory: string[]): { willPower: number; memory: string[] };\r\n\r\n    public getRandom(): number {\r\n        return this.random();\r\n    }\r\n\r\n    public selectRandomWeighted<T>(items: T[], getWeight: (item: T) => number): T | undefined {\r\n        return selectRandomWeighted(items, getWeight, () => this.random());\r\n    }\r\n\r\n    protected selectRandomFromWeightedList<T>(items: Weighted<T>[]): T | undefined {\r\n        return selectRandomFromWeightedList(items, () => this.random());\r\n    }\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport _ from \"lodash\";\r\nimport { higherArrangementPropabilityTags } from \"../../preferences\";\r\nimport { CardDeck } from \"../card-deck\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { Gender, PlayerInfo } from \"../player-info\";\r\nimport { SlideRegistration } from \"../slide-registration\";\r\nimport { Weighted } from \"../weighted\";\r\nimport { CardsInsight, Insights, PlayerSelection, PlayerSelectionInsights } from \"./insights\";\r\nimport { SelectionAlgorithmBase } from \"./selection-algorithm-base\";\r\n\r\nexport class MelinaAlgorithm extends SelectionAlgorithmBase {\r\n    /** the percentage of cards that were played from one deck once the cards get weighted much lower */\r\n    private readonly deckExhaustionLimit = 0.1;\r\n\r\n    public readonly insights: Insights = new Insights();\r\n\r\n    public getAllCardDeckStatistics(cardType: string | null = null): CardsInsight {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n        const deckWeights: { [deckUrl: string]: number } = {};\r\n        const willPowerWeights: { [willPower: number]: number } = {};\r\n        const willPowerCounter: { [willPower: number]: number } = {};\r\n\r\n        const allCards = new Array<Weighted<CardRef>>();\r\n        for (const deck of weightedDecks) {\r\n            allCards.push(\r\n                ...deck.cards.map(x => ({\r\n                    value: { card: x.value, deckUrl: deck.deck.url },\r\n                    weight: x.weight * deck.deck.weight,\r\n                })),\r\n            );\r\n        }\r\n\r\n        this.boostWillPower(allCards);\r\n\r\n        for (const deck of this.status.decks) {\r\n            deckWeights[deck.url] = 0;\r\n        }\r\n\r\n        for (const card of allCards) {\r\n            const { value, weight } = card;\r\n\r\n            const deck = this.status.decks.find(x => x.url === value.deckUrl)!;\r\n\r\n            deckWeights[value.deckUrl] += weight * deck.weight;\r\n\r\n            const willPower = value.card.willPower || 0;\r\n            if (willPowerCounter[willPower] === undefined) {\r\n                willPowerWeights[willPower] = 0;\r\n                willPowerCounter[willPower] = 0;\r\n            }\r\n\r\n            willPowerWeights[willPower] += weight * deck.weight;\r\n            willPowerCounter[willPower] += 1;\r\n        }\r\n        \r\n        const willPowerWeightsArray: Weighted<{\r\n            willPower: number | null;\r\n            count: number;\r\n        }>[] = Object.keys(willPowerWeights).map(propName => {\r\n            const willPower = Number(propName);\r\n            return ({\r\n                value: {\r\n                    willPower: willPower === 0 ? null : willPower,\r\n                    count: willPowerCounter[willPower],\r\n                },\r\n                weight: willPowerWeights[willPower],\r\n            });\r\n        });\r\n\r\n        const decksArray = Object.keys(deckWeights).map(url => {\r\n            const deck = this.status.decks.find(x => x.url === url)!;\r\n            return { value: deck, weight: deckWeights[url] * deck.weight };\r\n        });\r\n\r\n        return { decks: decksArray, willPower: willPowerWeightsArray, totalCards: allCards.length };\r\n    }\r\n\r\n    public selectPlayers(\r\n        playerSettings: GenderRequirement[],\r\n        definedPlayers: (PlayerInfo | null)[],\r\n        tags: string[],\r\n    ): PlayerInfo[] {\r\n        if (playerSettings.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (playerSettings.length > this.status.players.length) {\r\n            throw new Error(\"More players were requested than available.\");\r\n        }\r\n\r\n        const forArrangement = new Array<string>();\r\n        const result: (PlayerInfo | null)[] = playerSettings.map((_, i) =>\r\n            definedPlayers.length > i ? definedPlayers[i] : null,\r\n        );\r\n\r\n        for (const player of definedPlayers.filter(x => x !== null).map(x => x!)) {\r\n            const arrangement = this.status.arrangements.find(\r\n                x => x.p1 === player.id || x.p2 === player.id,\r\n            );\r\n\r\n            if (arrangement !== undefined) {\r\n                if (arrangement.p1 === player.id) {\r\n                    forArrangement.push(arrangement.p2);\r\n                } else {\r\n                    forArrangement.push(arrangement.p1);\r\n                }\r\n            }\r\n        }\r\n\r\n        let resultCounter = 0;\r\n        const insights: PlayerSelectionInsights = {\r\n            predefined: definedPlayers.filter(x => x != null).map(x => x!.id),\r\n            rounds: [],\r\n        };\r\n\r\n        while (result.findIndex(x => x === null) !== -1) {\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                if (result[i] !== null) {\r\n                    continue;\r\n                }\r\n\r\n                const gender = playerSettings[i];\r\n                let sourceList: PlayerInfo[];\r\n\r\n                switch (gender) {\r\n                    case \"None\":\r\n                        sourceList = this.status.players;\r\n                        break;\r\n                    case \"Male\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Male\");\r\n                        break;\r\n                    case \"Female\":\r\n                        sourceList = this.status.players.filter(x => x.gender === \"Female\");\r\n                        break;\r\n                    default:\r\n                        continue;\r\n                }\r\n\r\n                const source = sourceList.filter(x => !_.includes(result, x));\r\n                const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n                const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n\r\n                const selectionRoundInsights = new Array<PlayerSelection>();\r\n                const player = this.selectRandomWeighted(source, p => {\r\n                    let weight = 1;\r\n\r\n                    if (_.some(forArrangement, x => x === p.id)) {\r\n                        if (\r\n                            _.some(higherArrangementPropabilityTags, x =>\r\n                                _.some(tags, y => x === y.toLowerCase()),\r\n                            )\r\n                        ) {\r\n                            weight += source.length;\r\n                        } else {\r\n                            // everyone has ~ the weight 1\r\n                            weight += source.length * 0.5;\r\n                        }\r\n                    }\r\n\r\n                    if (gender === \"None\" && this.status.preferOppositeGenders) {\r\n                        if (malesCount > femalesCount) {\r\n                            if (p.gender === \"Female\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        } else if (femalesCount > malesCount) {\r\n                            if (p.gender === \"Male\") {\r\n                                weight += 0.5;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    selectionRoundInsights.push({ playerId: p.id, weight, chosen: false });\r\n                    return weight;\r\n                })!;\r\n\r\n                selectionRoundInsights.find(x => x.playerId === player.id)!.chosen = true;\r\n                insights.rounds.push(selectionRoundInsights);\r\n\r\n                result[i] = player;\r\n                resultCounter++;\r\n\r\n                const arrangement = this.status.arrangements.find(\r\n                    x => x.p1 === player.id || x.p2 === player.id,\r\n                );\r\n                if (arrangement !== undefined) {\r\n                    if (arrangement.p1 === player.id) {\r\n                        forArrangement.push(arrangement.p2);\r\n                    } else {\r\n                        forArrangement.push(arrangement.p1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (resultCounter === result.length) {\r\n                break;\r\n            }\r\n\r\n            // here we have to handle Same/Opposite genders\r\n\r\n            const malesCount = result.filter(x => x !== null && x.gender === \"Male\").length;\r\n            const femalesCount = result.filter(x => x !== null && x.gender === \"Female\").length;\r\n            let dominant: Gender | null = null;\r\n\r\n            if (malesCount > femalesCount) dominant = \"Male\";\r\n            else if (femalesCount > malesCount) dominant = \"Female\";\r\n\r\n            if (dominant === null) {\r\n                // we try to change a 'Same' gender, so Same and opposite stay on different sites\r\n                // because the player gender will become dominant and opposite is always against dominant\r\n\r\n                let changed = false;\r\n                for (let i = 0; i < playerSettings.length; i++) {\r\n                    if (playerSettings[i] === \"Same\") {\r\n                        playerSettings[i] = \"None\";\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!changed) {\r\n                    // we have the problem here that we only have opposite genders left but we have no dominant gender.\r\n                    // We change the first opposite to none (so it gets filled) and all other to Same, so they will get\r\n                    // the same gender like the first item that was changed to Same\r\n\r\n                    for (let i = 0; i < playerSettings.length; i++) {\r\n                        if (playerSettings[i] === \"Opposite\") {\r\n                            if (!changed) {\r\n                                playerSettings[i] = \"None\";\r\n                                changed = true;\r\n                            } else {\r\n                                playerSettings[i] = \"Same\";\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < playerSettings.length; i++) {\r\n                const gender = playerSettings[i];\r\n\r\n                switch (gender) {\r\n                    case \"Opposite\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Male\";\r\n                        } else {\r\n                            playerSettings[i] = \"Female\";\r\n                        }\r\n                        break;\r\n                    case \"Same\":\r\n                        if (dominant === \"Female\") {\r\n                            playerSettings[i] = \"Female\";\r\n                        } else {\r\n                            playerSettings[i] = \"Male\";\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.insights.playerSelection = insights;\r\n        return result.map(x => x!);\r\n    }\r\n\r\n    public selectCard(cardType: string): CardRef {\r\n        const weightedDecks = this.weightCards(this.status.decks, cardType);\r\n\r\n        const allCards = new Array<Weighted<CardRef>>();\r\n        for (const deck of weightedDecks) {\r\n            allCards.push(\r\n                ...deck.cards.map(x => ({\r\n                    value: { card: x.value, deckUrl: deck.deck.url },\r\n                    weight: x.weight * deck.deck.weight,\r\n                })),\r\n            );\r\n        }\r\n\r\n        this.boostWillPower(allCards);\r\n\r\n        for (const card of allCards) {\r\n            const deck = this.status.decks.find(x => x.url === card.value.deckUrl)!;\r\n            card.weight *= deck.weight;\r\n        }\r\n\r\n        const selected = this.selectRandomWeighted(allCards, x => x.weight);\r\n        if (selected === undefined) {\r\n            throw new Error(\"That should not actually happen\");\r\n        }\r\n\r\n        return selected.value;\r\n    }\r\n\r\n    private boostWillPower(cards: Weighted<CardRef>[]): void {\r\n        const willPower = this.status.willPower;\r\n\r\n        const perfectCards = cards.filter(\r\n            x => x.value.card.willPower === willPower || x.value.card.willPower === willPower - 1,\r\n        );\r\n        const unplayedCards = perfectCards.filter(\r\n            x =>\r\n                this.status.cardsHistory.findIndex(\r\n                    y => y.deckUrl === x.value.deckUrl && y.card.id === x.value.card.id,\r\n                ) === -1,\r\n        );\r\n\r\n        // played cards / all cards\r\n        const percentage = (perfectCards.length - unplayedCards.length) / perfectCards.length;\r\n\r\n        // console.log(\r\n        //     `wp: ${willPower}, perfect: ${perfectCards.length}, unplayed: ${\r\n        //         unplayedCards.length\r\n        //     }, percentage: ${percentage}`,\r\n        // );\r\n\r\n        // we don't boost if we already played 10% (deckExhaustionLimit) of the cards\r\n        if (this.deckExhaustionLimit > percentage && unplayedCards.length > 50) {\r\n            const totalWeight = cards.reduce((x, y) => x + y.weight, 0);\r\n            const unplayedWeight = unplayedCards.reduce((x, y) => x + y.weight, 0);\r\n\r\n            console.log(`total: ${totalWeight}, unplayed: ${unplayedWeight}`);\r\n\r\n            const targetPercentage = 0.7;\r\n            if (totalWeight * targetPercentage > unplayedWeight) {\r\n                const factor =\r\n                    totalWeight * targetPercentage -\r\n                    unplayedWeight +\r\n                    unplayedWeight / unplayedWeight;\r\n\r\n                // const diff = (totalWeight * targetPercentage - unplayedWeight);\r\n                // const add = diff / unplayedCards.length;\r\n                console.log(\"factor: \" + factor);\r\n\r\n                // const add = (totalWeight - unplayedWeight) / perfectCards.length;\r\n                for (const perfectCard of unplayedCards) {\r\n                    perfectCard.weight = perfectCard.weight * factor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public selectNextSlide(availableSlides: SlideRegistration[]): string | undefined {\r\n        const uniqueCardTypes: string[] = [];\r\n        for (const slide of availableSlides) {\r\n            for (const cardType of slide.requestedCards) {\r\n                if (uniqueCardTypes.findIndex(x => x === cardType) === -1) {\r\n                    uniqueCardTypes.push(cardType);\r\n                }\r\n            }\r\n        }\r\n\r\n        const cardTypeRatings: { [type: string]: number } = {};\r\n        for (const cardType of uniqueCardTypes) {\r\n            const weightedDecks = this.weightCards(\r\n                this.status.decks.filter(x => x.weight !== 0),\r\n                cardType,\r\n            );\r\n\r\n            const allCards: Array<Weighted<Card>> = [];\r\n            for (const cardDeck of weightedDecks) {\r\n                allCards.push(...cardDeck.cards);\r\n            }\r\n\r\n            if (allCards.length === 0) {\r\n                cardTypeRatings[cardType] = 0;\r\n            } else {\r\n                cardTypeRatings[cardType] =\r\n                    0.75 + (0.25 * allCards.reduce((x, y) => x + y.weight, 0)) / allCards.length;\r\n            }\r\n        }\r\n\r\n        const weightedSlides: Array<Weighted<SlideRegistration>> = [];\r\n        for (const slide of availableSlides) {\r\n            const slideSettings = this.status.slides.find(x => x.value === slide.slideType);\r\n\r\n            if (slideSettings === undefined || slideSettings.weight === 0) {\r\n                continue;\r\n            }\r\n\r\n            let factor = 1;\r\n            for (const cardType of slide.requestedCards) {\r\n                factor = Math.min(cardTypeRatings[cardType], factor);\r\n            }\r\n\r\n            weightedSlides.push({ weight: factor * slideSettings.weight, value: slide });\r\n        }\r\n\r\n        if (weightedSlides.length > 2 && this.status.slidesHistory.length > 0) {\r\n            const lastSlideType = this.status.slidesHistory[0];\r\n            const lastSlide = weightedSlides.find(x => x.value.slideType === lastSlideType);\r\n            if (lastSlide !== undefined) {\r\n                lastSlide.weight = 0;\r\n            }\r\n        }\r\n        \r\n        this.insights.slideWeights = {\r\n            weights: weightedSlides.map(x => ({ weight: x.weight, value: x.value.slideType })),\r\n        };\r\n\r\n        const selected = this.selectRandomWeighted(weightedSlides, slide => slide.weight);\r\n        if (selected === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return selected.value.slideType;\r\n    }\r\n\r\n    public getSips(min: number): number {\r\n        min = Math.max(min, 1);\r\n\r\n        return Math.max(min,  Math.floor(this.getRandom() * 4) + 1);\r\n    }\r\n\r\n    protected weightCards(\r\n        decks: CardDeck[],\r\n        type: string | null,\r\n    ): Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> {\r\n        const filtered: CardDeck[] = decks.map(x => ({\r\n            cards: x.cards.filter(card => {\r\n                if (type !== null && card.type !== type) {\r\n                    return false;\r\n                }\r\n                return (\r\n                    card.tags.length === 0 ||\r\n                    card.tags.findIndex(x => {\r\n                        const weightedTag = this.status.tags.find(y => y.value === x);\r\n                        return weightedTag !== undefined && weightedTag.weight === 0;\r\n                    }) === -1\r\n                );\r\n            }),\r\n            url: x.url,\r\n            weight: x.weight,\r\n        }));\r\n\r\n        // cards are now of the correct type and playable\r\n\r\n        const totalCards = filtered.reduce((x, y) => x + y.cards.length, 0);\r\n\r\n        // every card should be rated by x when 0 < x <= 1\r\n        const result: Array<{ cards: Array<Weighted<Card>>; deck: CardDeck }> = [];\r\n\r\n        const willPower = this.status.willPower;\r\n\r\n        for (const deck of filtered) {\r\n            // cards from this deck that were already played\r\n            const cardsPlayed = this.status.cardsHistory.filter(x => x.deckUrl === deck.url);\r\n\r\n            // compute the deck exhaustion factor\r\n            let exhaustionFactor: number;\r\n\r\n            const percentage = cardsPlayed.length / deck.cards.length;\r\n            if (percentage > this.deckExhaustionLimit) {\r\n                // cubic reduction\r\n                exhaustionFactor = Math.pow(Math.max(1.1 - percentage, 0.1), 2) * 0.5;\r\n            } else {\r\n                exhaustionFactor = 1;\r\n            }\r\n\r\n            const weightedCards: Array<Weighted<Card>> = [];\r\n            for (const card of deck.cards) {\r\n                const willPowerRating = this.rateWillPower(card.willPower, willPower);\r\n                const historyFactor = this.getHistoryFactor(card.id, cardsPlayed, totalCards);\r\n                const tagsFactor = this.getTagsFactor(card.tags, this.status.tags);\r\n                const weight = exhaustionFactor * willPowerRating * historyFactor * tagsFactor;\r\n                if (weight === 0) {\r\n                    continue;\r\n                }\r\n\r\n                weightedCards.push({\r\n                    value: card,\r\n                    weight: weight,\r\n                });\r\n            }\r\n\r\n            result.push({ deck, cards: weightedCards });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public recomputeWillPower(memory: string[]): { willPower: number; memory: string[] } {\r\n        const addedMemory = new Array<string>();\r\n        const now = new Date();\r\n        let result = this.status.willPower;\r\n\r\n        if (!_.includes(memory, \"AFTER_10\") && (now.getHours() > 22 || now.getHours() < 8)) {\r\n            result++;\r\n            addedMemory.push(\"AFTER_10\");\r\n        }\r\n\r\n        const slidesCount = this.status.slidesHistory.length;\r\n        if (slidesCount % 12 === 0 && slidesCount !== 0) {\r\n            const id = slidesCount / 12;\r\n            if (!_.includes(memory, `SLIDES_${id}`)) {\r\n                result++;\r\n                addedMemory.push(`SLIDES_${id}`);\r\n            }\r\n        }\r\n\r\n        if (result > 5) {\r\n            result = 5;\r\n        }\r\n\r\n        return { willPower: result, memory: addedMemory };\r\n    }\r\n\r\n    protected getTagsFactor(tags: string[], tagWeights: Array<Weighted<string>>) {\r\n        const weights = tags\r\n            .map(x => tagWeights.find(y => y.value === x))\r\n            .filter(x => x !== undefined)\r\n            .map(x => x!.weight);\r\n        if (weights.length > 0) {\r\n            return Math.min(...weights);\r\n        }\r\n        return 0.5;\r\n    }\r\n\r\n    /** return a value between 0 and 1 that returns 1 if the card was never played and a smaller number if the card was played recently */\r\n    protected getHistoryFactor(id: string, history: CardRef[], totalCards: number) {\r\n        const historyPosition = history.findIndex(x => x.card.id === id);\r\n        if (historyPosition === -1) {\r\n            return 1;\r\n        }\r\n\r\n        if (historyPosition > totalCards) {\r\n            return 0;\r\n        }\r\n\r\n        return historyPosition / totalCards;\r\n    }\r\n\r\n    /** return a value between 0 and 1 for the given will power */\r\n    protected rateWillPower(cardWillPower: number | undefined, willPower: number) {\r\n        if (cardWillPower === undefined) {\r\n            return 0.75;\r\n        }\r\n\r\n        // --- --- --- ||| --- --- --- ---\r\n        // 0.5 .75 .75  1  .25 .15 .05 .05\r\n\r\n        if (cardWillPower === willPower) {\r\n            return 1;\r\n        }\r\n\r\n        if (cardWillPower > willPower) {\r\n            const result = 0.35 - (cardWillPower - willPower) * 0.1;\r\n            return result < 0 ? 0 : result;\r\n        }\r\n\r\n        return 0.5;\r\n    }\r\n\r\n    protected filterDecks(decks: CardDeck[]): CardDeck[] {\r\n        const filteredDecks: CardDeck[] = [];\r\n\r\n        for (const deck of decks) {\r\n            // remove disabled decks\r\n            if (deck.weight <= 0) {\r\n                continue;\r\n            }\r\n\r\n            const cards: Card[] = [];\r\n            for (const card of deck.cards) {\r\n                if (!this.verifyPlayerSpecification(this.status.players, card.players)) {\r\n                    continue;\r\n                }\r\n\r\n                let weightedZero = false;\r\n                for (const tag of card.tags) {\r\n                    if (this.checkIfWeightedZero(tag, this.status.tags)) {\r\n                        weightedZero = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (weightedZero) {\r\n                    continue;\r\n                }\r\n\r\n                if (!card.condition(this.status)) {\r\n                    continue;\r\n                }\r\n\r\n                cards.push(card);\r\n            }\r\n\r\n            if (cards.length > 0) {\r\n                filteredDecks.push({ cards, weight: deck.weight, url: deck.url });\r\n            }\r\n        }\r\n\r\n        return filteredDecks;\r\n    }\r\n\r\n    protected checkIfWeightedZero<T>(value: T, weights: Array<Weighted<T>>): boolean {\r\n        return weights.findIndex(x => x.value === value && x.weight <= 0) > -1;\r\n    }\r\n\r\n    protected verifyPlayerSpecification(\r\n        players: PlayerInfo[],\r\n        specification: PlayerSetting[],\r\n    ): boolean {\r\n        if (specification.length > players.length) {\r\n            return false;\r\n        }\r\n\r\n        const specificationMales = specification.filter(x => x.gender === \"Male\").length;\r\n        const actualMales = players.filter(x => x.gender === \"Male\").length;\r\n\r\n        if (specificationMales > actualMales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationFemales = specification.filter(x => x.gender === \"Female\").length;\r\n        const actualFemales = players.filter(x => x.gender === \"Female\").length;\r\n        if (specificationFemales > actualFemales) {\r\n            return false;\r\n        }\r\n\r\n        const specificationOpposite = specification.filter(x => x.gender === \"Opposite\").length;\r\n        if (specificationOpposite > Math.min(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        const specificationSame = specification.filter(x => x.gender === \"Same\").length;\r\n        if (specificationSame + 1 > Math.max(actualFemales, actualMales)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Card } from \"./cards/card\";\r\nimport { CardParserFactory } from \"./parsing/card-parser-factory\";\r\n\r\nexport class CardsLoader {\r\n    private readonly domParser = new DOMParser();\r\n\r\n    constructor(\r\n        private requestFile: (url: string) => Promise<string>,\r\n        private parserFactory: CardParserFactory,\r\n    ) {}\r\n\r\n    public async loadFromUrl(url: string): Promise<Card[]> {\r\n        const result: Card[] = [];\r\n\r\n        await this.loadFile(url, result, undefined);\r\n        return result;\r\n    }\r\n\r\n    private async loadFile(url: string, result: Card[], requestedCards?: string[]): Promise<void> {\r\n        const xml = await this.requestFile(url);\r\n        \r\n        // the DOMParser doesn't like XML docs without a Root element\r\n        const xmlDoc = this.domParser.parseFromString(\"<Root>\" + xml + \"</Root>\", \"text/xml\");\r\n\r\n        const cardElements = xmlDoc.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < cardElements.length; i++) {\r\n            const xmlElement = cardElements[i];\r\n\r\n            if (xmlElement.parentElement !== xmlDoc.documentElement) {\r\n                continue;\r\n            }\r\n\r\n            if (xmlElement.nodeName === \"DeckReference\") {\r\n                await this.parseDeckReference(xmlElement, result, requestedCards);\r\n                continue;\r\n            }\r\n\r\n            const parser = this.parserFactory.createParser(xmlElement.nodeName);\r\n            if (parser === undefined) {\r\n                console.error(\r\n                    `The card ${xmlElement.nodeName} could not be parsed. No parser found.`,\r\n                );\r\n                continue;\r\n            }\r\n\r\n            const card = parser.deserialize(xmlElement);\r\n            if (requestedCards !== undefined && requestedCards.indexOf(card.id) === -1) {\r\n                continue;\r\n            }\r\n\r\n            result.push(card);\r\n        }\r\n    }\r\n\r\n    private parseDeckReference(\r\n        xmlElement: Element,\r\n        result: Card[],\r\n        requestedCards?: string[],\r\n    ): Promise<void> {\r\n        const url = xmlElement.getAttribute(\"url\");\r\n        if (url === null) {\r\n            throw new Error(\"The url on a deck reference must not be null.\");\r\n        }\r\n\r\n        const referenceRequests: string[] = [];\r\n\r\n        const cardRefs = xmlElement.getElementsByTagName(\"CardRef\");\r\n        for (let i = 0; i < cardRefs.length; i++) {\r\n            const cardRef = cardRefs[i];\r\n\r\n            const idAttr = cardRef.getAttribute(\"id\");\r\n            if (idAttr === null) {\r\n                continue;\r\n            }\r\n\r\n            referenceRequests.push(idAttr);\r\n        }\r\n\r\n        let deckWhitelist: string[] | undefined;\r\n        if (referenceRequests.length === 0) {\r\n            deckWhitelist = requestedCards;\r\n        } else {\r\n            if (requestedCards !== undefined) {\r\n                deckWhitelist = [];\r\n\r\n                // only request cards that are in the superior list aswell as in the reference list\r\n                for (const cardId of requestedCards) {\r\n                    if (referenceRequests.indexOf(cardId) > -1) {\r\n                        deckWhitelist.push(cardId);\r\n                    }\r\n                }\r\n            } else {\r\n                deckWhitelist = referenceRequests;\r\n            }\r\n        }\r\n\r\n        return this.loadFile(url, result, deckWhitelist);\r\n    }\r\n}\r\n","export class PlayerSetting {\r\n    constructor(public playerIndex: number, public gender: GenderRequirement = \"None\") {}\r\n}\r\n\r\nexport type GenderRequirement = 'None' | 'Male' | 'Female' | 'Opposite' | 'Same';\r\n","import { GenderRequirement } from \"../cards/player-setting\";\r\n\r\nexport class ParserHelper {\r\n    /** parse a player tag, e. g. \"Player\" or \"Player2\" or \"Player5000\" and return the index (1 if none is specified) or undefined */\r\n    public static parsePlayerTag(s: string): number | undefined {\r\n        const tagName = \"Player\";\r\n\r\n        if (!s.startsWith(tagName)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (s.length > tagName.length) {\r\n            const index = Number(s.substring(tagName.length));\r\n            return isNaN(index) ? undefined : index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /** parse a gender requirement string, e. g. \"m\", \"male\", \"Male\", etc. */\r\n    public static parseGenderRequirement(s: string): GenderRequirement |undefined {\r\n        s = s.toLowerCase();\r\n\r\n        if (s in this.genderRequirementMap) {\r\n            return this.genderRequirementMap[s];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** parse a timespan in the format hh:mm:ss or mm:ss */\r\n    public static parseTimeSpanStringToSeconds(s: string): number | undefined {\r\n        const a = s.split(\":\");\r\n\r\n        if (a.length > 3) {\r\n            return undefined;\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        for (let i = 0; i < a.length; i++) {\r\n            const p = Number(a[i]);\r\n            if (isNaN(p)) {\r\n                return undefined;\r\n            }\r\n\r\n            result += p * Math.pow(60, (a.length - i - 1));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static genderRequirementMap: { [id: string]: GenderRequirement } = {\r\n        m: \"Male\",\r\n        male: \"Male\",\r\n        f: \"Female\",\r\n        female: \"Female\",\r\n        o: \"Opposite\",\r\n        opposite: \"Opposite\",\r\n        s: \"Same\",\r\n        same: \"Same\",\r\n    };\r\n}\r\n","import { BaseCard } from \"../cards/base-card\";\r\nimport { Card } from \"../cards/card\";\r\nimport { GenderRequirement, PlayerSetting } from \"../cards/player-setting\";\r\nimport { CardParser } from \"./card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\n\r\nexport abstract class BaseCardParser<TCard extends BaseCard> implements CardParser {\r\n    public deserialize(xml: Element): Card {\r\n        const card = this.createCard();\r\n\r\n        const idAttr = xml.getAttribute(\"id\");\r\n        if (idAttr === null) {\r\n            throw new Error(\"The id of a card must not be null\");\r\n        }\r\n        card.id = idAttr;\r\n\r\n        card.willPower = Number(xml.getAttribute(\"willPower\"));\r\n        if (card.willPower < 1 || card.willPower > 10) {\r\n            card.willPower = undefined;\r\n        }\r\n\r\n        const tags = xml.getAttribute(\"tags\");\r\n\r\n        card.tags = tags\r\n            ? [...this.getDefaultAttributes(), ...tags.split(\",\")]\r\n            : this.getDefaultAttributes();\r\n\r\n        this.parseAttributes(xml, card);\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            if (element.tagName === `${xml.tagName}.players`) {\r\n                card.players = this.parsePlayers(element);\r\n                continue;\r\n            }\r\n\r\n            this.parseElement(element, card);\r\n        }\r\n\r\n        if (card.players === undefined) {\r\n            card.players = [];\r\n        }\r\n\r\n        return card;\r\n    }\r\n\r\n    protected getDefaultAttributes(): string[] {\r\n        return [];\r\n    }\r\n\r\n    protected abstract parseAttributes(rootXml: Element, card: TCard): void;\r\n    protected abstract parseElement(element: Element, card: TCard): boolean;\r\n\r\n    protected abstract createCard(): TCard;\r\n\r\n    private parsePlayers(xml: Element): PlayerSetting[] {\r\n        const players: PlayerSetting[] = [];\r\n\r\n        const subElements = xml.getElementsByTagName(\"*\");\r\n        for (let i = 0; i < subElements.length; i++) {\r\n            const element = subElements[i];\r\n\r\n            if (element.parentElement !== xml) {\r\n                continue;\r\n            }\r\n\r\n            const player = this.parsePlayer(element);\r\n            if (player !== undefined) {\r\n                players.push(player);\r\n            }\r\n        }\r\n\r\n        return players;\r\n    }\r\n\r\n    private parsePlayer(xml: Element): PlayerSetting | undefined {\r\n        const index = ParserHelper.parsePlayerTag(xml.tagName);\r\n        if (index === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        let requiredGender: GenderRequirement = \"None\";\r\n\r\n        const genderAttr = xml.getAttribute(\"gender\");\r\n        if (genderAttr) {\r\n            const genderReq = ParserHelper.parseGenderRequirement(genderAttr);\r\n\r\n            if (genderReq !== undefined) {\r\n                requiredGender = genderReq;\r\n            }\r\n        }\r\n\r\n        return new PlayerSetting(index, requiredGender);\r\n    }\r\n}\r\n","import { TextTranslation } from \"./text-translation\";\r\n\r\nexport class TextElement {\r\n    public weight: number = 1;\r\n    public translations!: TextTranslation[];\r\n}","export class TextTranslation {\r\n    constructor(public lang: string, public content: string) {}\r\n}\r\n","import { TextElement } from \"../cards/text-element\";\r\nimport { TextTranslation } from \"../cards/text-translation\";\r\n\r\n/** parses the text content of an element */\r\nexport class TextContentParser {\r\n    public result: TextElement[];\r\n\r\n    private isConditionalElement: boolean | undefined = undefined;\r\n\r\n    constructor() {\r\n        this.result = [];\r\n    }\r\n\r\n    public addElement(xml: Element): boolean {\r\n        switch (xml.tagName) {\r\n            case \"Case\":\r\n                if (this.isConditionalElement === false) {\r\n                    return false;\r\n                }\r\n                this.isConditionalElement = true;\r\n\r\n                this.result.push(this.parseTextElement(xml));\r\n                return true;\r\n            case \"Text\":\r\n                if (this.isConditionalElement === true) {\r\n                    return false;\r\n                } else if (this.isConditionalElement === undefined) {\r\n                    this.result.push({ translations: [], weight: 1 });\r\n                }\r\n\r\n                this.isConditionalElement = false;\r\n                this.result[0].translations.push(this.parseTranslation(xml));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private parseTextElement(element: Element): TextElement {\r\n        const translations: TextTranslation[] = [];\r\n        const textElement = new TextElement();\r\n\r\n        const weight = element.getAttribute(\"weight\");\r\n        if (weight !== null && !isNaN(Number(weight))) {\r\n            textElement.weight = Number(weight);\r\n        } else {\r\n            textElement.weight = 1;\r\n        }\r\n\r\n        const texts = element.getElementsByTagName(\"Text\");\r\n        for (let i = 0; i < texts.length; i++) {\r\n            const textXmlNode = texts[i];\r\n            translations.push(this.parseTranslation(textXmlNode));\r\n        }\r\n\r\n        textElement.translations = translations;\r\n        return textElement;\r\n    }\r\n\r\n    private parseTranslation(element: Element) {\r\n        const lang = element.getAttribute(\"lang\");\r\n        if (lang === null) {\r\n            throw new Error(\"lang attribute not found on element\");\r\n        }\r\n\r\n        if (element.textContent === null) {\r\n            throw new Error(\"The text content of the element is empty.\");\r\n        }\r\n\r\n        return new TextTranslation(lang, element.textContent);\r\n    }\r\n}\r\n","import { TextCard } from \"../cards/text-card\";\r\nimport { BaseCardParser } from \"./base-card-parser\";\r\nimport { ParserHelper } from \"./parser-helper\";\r\nimport { TextContentParser } from \"./text-content-parser\";\r\n\r\nexport abstract class TextCardParser<TCard extends TextCard> extends BaseCardParser<TCard> {\r\n    private textContentParser = new TextContentParser();\r\n\r\n    protected parseAttributes(rootXml: Element, card: TCard): void {\r\n        const followUpAttr = rootXml.getAttribute(\"followUpProbability\");\r\n        if (followUpAttr !== null) {\r\n            const followUpProbability = Number(followUpAttr);\r\n            if (isNaN(followUpProbability)) {\r\n                throw new Error(\r\n                    `The follow up propability ${followUpAttr} could not be parsed as a number (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpPropability = followUpProbability;\r\n        }\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay !== null) {\r\n            const seconds = ParserHelper.parseTimeSpanStringToSeconds(followUpDelay);\r\n            if (seconds === undefined) {\r\n                throw new Error(\r\n                    `Could not parse followUpDelay ${followUpDelay} as a timespan (card: ${\r\n                        card.id\r\n                    }).`,\r\n                );\r\n            }\r\n\r\n            card.followUpDelay = seconds;\r\n        } else {\r\n            card.followUpDelay = 0;\r\n        }\r\n    }\r\n\r\n    protected parseElement(element: Element, card: TCard): boolean {\r\n        switch (element.tagName) {\r\n            case \"Text\":\r\n            case \"Case\":\r\n                card.content = this.textContentParser.result;\r\n                return this.textContentParser.addElement(element);\r\n        }\r\n\r\n        if (element.tagName === `${card.type}.followUp`) {\r\n            const parser = new TextContentParser();\r\n\r\n            const subElements = element.getElementsByTagName(\"*\");\r\n            for (let i = 0; i < subElements.length; i++) {\r\n                const subElement = subElements[i];\r\n                if (subElement.parentElement !== element) {\r\n                    continue;\r\n                }\r\n\r\n                parser.addElement(subElement);\r\n            }\r\n\r\n            card.followUp = parser.result;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { BaseCard } from \"./base-card\";\r\nimport { TextElement } from \"./text-element\";\r\nimport { GameStatus } from \"../game-status\";\r\nimport _ from \"lodash\";\r\n\r\nexport abstract class TextCard extends BaseCard {\r\n    /** the propability (0-1) that this card follows up */\r\n    public followUpPropability: number = 1;\r\n\r\n    /** the delay of the follow up in seconds */\r\n    public followUpDelay!: number;\r\n\r\n    public content!: TextElement[];\r\n    public followUp!: TextElement[];\r\n\r\n    public condition: (status: GameStatus) => boolean = status => {\r\n        return _.some(this.content, x => _.some(x.translations, y => y.lang === status.language));\r\n    };\r\n}\r\n","import { GameStatus } from \"../game-status\";\r\nimport { Card } from \"./card\";\r\nimport { PlayerSetting } from \"./player-setting\";\r\n\r\n/** A very basic implementation of Card  */\r\nexport abstract class BaseCard implements Card {\r\n  public id!: string;\r\n  public willPower!: number | undefined;\r\n  public players!: PlayerSetting[];\r\n  public tags!: string[];\r\n  public condition!: (status: GameStatus) => boolean;\r\n\r\n  public readonly abstract type: string;\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class FactCard extends TextCard {\r\n    public readonly type: string = \"FactCard\";\r\n    public isTrueFact: boolean = false;\r\n}\r\n","import { TextCardParser } from \"../../core/parsing/text-card-parser\";\r\nimport { FactCard } from \"../cards/fact-card\";\r\n\r\nexport class FactCardParser extends TextCardParser<FactCard> {\r\n    protected createCard(): FactCard {\r\n        return new FactCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: FactCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const attr = rootXml.getAttribute(\"is\");\r\n        card.isTrueFact = attr === null ? true : this.toBool(attr);\r\n    }\r\n\r\n    protected toBool(value?: string): boolean {\r\n        if (value === \"true\") {\r\n            return true;\r\n        }\r\n\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return !!+value;\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class VirusCard extends TextCard {\r\n    public readonly type: string = \"VirusCard\";\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { VirusCard } from '../cards/virus-card';\r\n\r\nexport class VirusCardParser extends TextCardParser<VirusCard> {\r\n    protected createCard(): VirusCard {\r\n        return new VirusCard();\r\n    }\r\n\r\n    protected parseAttributes(rootXml: Element, card: VirusCard): void {\r\n        super.parseAttributes(rootXml, card);\r\n\r\n        const followUpDelay = rootXml.getAttribute(\"followUpDelay\");\r\n        if (followUpDelay === null) {\r\n            card.followUpDelay = 60 * 5; // 5 minutes default\r\n        }\r\n    }\r\n}\r\n","import { TextCardParser } from \"@core/parsing/text-card-parser\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DefaultTextCardParser<T extends TextCard> extends TextCardParser<T> {\r\n    constructor(private factory: new () => T) {\r\n        super();\r\n    }\r\n\r\n    protected createCard(): T {\r\n        return new this.factory();\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DownCard extends TextCard {\r\n    public readonly type: string = \"DownCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NeverEverCard extends TextCard {\r\n    public readonly type: string = \"NeverEverCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class JokeCard extends TextCard {\r\n    public readonly type: string = \"JokeCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class QuestionCard extends TextCard {\r\n    public readonly type: string = \"QuestionCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class TaskCard extends TextCard {\r\n    public readonly type: string = \"TaskCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class WouldYouRatherCard extends TextCard {\r\n    public readonly type: string = \"WyrCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class DrinkCard extends TextCard {\r\n    public readonly type: string = \"DrinkCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class GroupGameCard extends TextCard {\r\n    public readonly type: string = \"GroupGameCard\";\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\n\r\nexport class NoIdeaLosesCard extends TextCard {\r\n    public readonly type: string = \"NoIdeaLosesCard\";\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { FactCardParser } from \"./parsing/fact-card-parser\";\r\nimport { VirusCardParser } from \"./parsing/virus-card-parser\";\r\nimport { DefaultTextCardParser } from \"./parsing/default-text-card-parser\";\r\nimport { DownCard } from \"./cards/down-card\";\r\nimport { NeverEverCard } from \"./cards/never-ever-card\";\r\nimport { JokeCard } from \"./cards/joke-card\";\r\nimport { QuestionCard } from \"./cards/question-card\";\r\nimport { TaskCard } from \"./cards/task-card\";\r\nimport { WouldYouRatherCard } from \"./cards/would-you-rather-card\";\r\nimport { DrinkCard } from \"./cards/drink-card\";\r\nimport { GroupGameCard } from \"./cards/group-game-card\";\r\nimport { NoIdeaLosesCard } from \"./cards/no-idea-loses-card\";\r\n\r\ntype ParserRegistration = { [type: string]: () => CardParser };\r\n\r\nexport const parsers: ParserRegistration = {\r\n    FactCard: () => new FactCardParser(),\r\n    VirusCard: () => new VirusCardParser(),\r\n    DownCard: () => new DefaultTextCardParser<DownCard>(DownCard),\r\n    NeverEverCard: () => new DefaultTextCardParser<NeverEverCard>(NeverEverCard),\r\n    JokeCard: () => new DefaultTextCardParser<JokeCard>(JokeCard),\r\n    QuestionCard: () => new DefaultTextCardParser<QuestionCard>(QuestionCard),\r\n    TaskCard: () => new DefaultTextCardParser<TaskCard>(TaskCard),\r\n    WyrCard: () => new DefaultTextCardParser<WouldYouRatherCard>(WouldYouRatherCard),\r\n    DrinkCard: () => new DefaultTextCardParser<DrinkCard>(DrinkCard),\r\n    GroupGameCard: () => new DefaultTextCardParser<GroupGameCard>(GroupGameCard),\r\n    NoIdeaLosesCard: () => new DefaultTextCardParser<NoIdeaLosesCard>(NoIdeaLosesCard),\r\n};\r\n","import axios from \"axios\";\r\nimport { CardsLoader } from \"../../core/cards-loader\";\r\nimport { Card } from \"../../core/cards/card\";\r\nimport { DefaultCardParserFactory } from \"../../impl/default-card-parser-factory\";\r\n\r\nconst parserFactory = new DefaultCardParserFactory();\r\nconst loader = new CardsLoader(requestFile, parserFactory);\r\n\r\nasync function requestFile(url: string) : Promise<string> {\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n}\r\n\r\nexport async function loadCards(url: string): Promise<Card[]> {\r\n    return loader.loadFromUrl(url);\r\n}\r\n","import { CardParser } from \"../core/parsing/card-parser\";\r\nimport { CardParserFactory } from \"../core/parsing/card-parser-factory\";\r\nimport { parsers } from \"./registrations\";\r\n\r\nexport class DefaultCardParserFactory implements CardParserFactory {\r\n    private parsers: { [type: string]: () => CardParser };\r\n\r\n    constructor() {\r\n        this.parsers = parsers;\r\n    }\r\n\r\n    public createParser(cardType: string): CardParser | undefined {\r\n        if (cardType in this.parsers) {\r\n            return this.parsers[cardType]();\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n","import * as cardsLoader from \"./api/cards-loader\";\r\n\r\nexport default {\r\n    api: {\r\n        cardsLoader,\r\n    },\r\n};\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { from, of } from \"rxjs\";\r\nimport { catchError, filter, map, mergeMap } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport { loadSourceAsync } from \"./actions\";\r\n\r\nexport const loadSourceEpic: Epic<RootAction, RootAction, RootState, Services> = (\r\n    action$,\r\n    _state$,\r\n    { api },\r\n) =>\r\n    action$.pipe(\r\n        filter(isActionOf(loadSourceAsync.request)),\r\n        mergeMap(action =>\r\n            from(api.cardsLoader.loadCards(action.payload)).pipe(\r\n                map(cards => loadSourceAsync.success({ url: action.payload, cards })),\r\n                catchError((message: string) =>\r\n                    of(loadSourceAsync.failure({ url: action.payload, message })),\r\n                ),\r\n            ),\r\n        ),\r\n    );\r\n","import { LocalizeContextProps } from \"react-localize-redux\";\r\nimport { Translator } from \"GameModels\";\r\n\r\nexport function toTranslator(localize: LocalizeContextProps): Translator {\r\n    return {\r\n        languageCode: localize.activeLanguage.code,\r\n        translate: x => localize.translate(x) as string,\r\n    }\r\n}","import { ParsingOptions } from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { Theme } from \"@material-ui/core\";\r\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\r\n\r\nexport function getRootStyles(): CSSProperties {\r\n    return {\r\n        backgroundColor: \"transparent\",\r\n        height: \"100%\",\r\n        fontSize: 25,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        color: \"white\",\r\n        cursor: \"pointer\",\r\n        \"-webkit-tap-highlight-color\": \"rgba(255, 255, 255, 0)\"\r\n    };\r\n}\r\n\r\nexport function getContentStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        textAlign: \"center\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            width: \"100%\",\r\n            marginLeft: 30,\r\n            marginRight: 30,\r\n            fontSize: 20,\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"80%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"60%\",\r\n        },\r\n    }\r\n}\r\n\r\nexport function spaceHeaderStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        visibility: \"hidden\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: \"2rem\",\r\n        }\r\n    };\r\n}\r\n\r\nexport function getHeaderStyles(theme: Theme): CSSProperties {\r\n    return {\r\n        color: \"white\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: \"2rem\",\r\n        }\r\n    }\r\n}\r\n\r\nfunction MyParagaph({ children, ...props }: any) {\r\n    return (\r\n        <p {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction MyH3({ children, ...props }: any) {\r\n    return (\r\n        <h3 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h3>\r\n    );\r\n}\r\n\r\nfunction MyH4({ children, ...props }: any) {\r\n    return (\r\n        <h4 {...props} style={{ marginBlockStart: 5, marginBlockEnd: 5 }}>\r\n            {children}\r\n        </h4>\r\n    );\r\n}\r\n\r\nexport const defaultMarkdownOptions: ParsingOptions = {\r\n    overrides: {\r\n        p: {\r\n            component: MyParagaph,\r\n            props: {},\r\n        },\r\n        h3: {\r\n            component: MyH3,\r\n            props: {},\r\n        },\r\n        h4: {\r\n            component: MyH4,\r\n            props: {},\r\n        },\r\n    },\r\n};\r\n","export abstract class TextFragment {}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RawTextFragment extends TextFragment {\r\n    constructor(public text: string) {\r\n        super();\r\n    }\r\n}","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport abstract class VariableFragment extends TextFragment {\r\n}","import { VariableFragment } from \"./variable-fragment\";\r\nimport { GenderRequirement } from \"@core/cards/player-setting\";\r\n\r\nexport class PlayerReferenceFragment extends VariableFragment {\r\n    constructor(public playerIndex: number = 1, public gender: GenderRequirement = \"None\") {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SipsFragment extends VariableFragment {\r\n    constructor(public minSips: number = 1, public sipsIndex: number = 1) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomNumberFragment extends TextFragment {\r\n    constructor(public numbers: RandomNumber[]) {\r\n        super();\r\n    }\r\n}\r\n\r\nexport interface RandomNumber {\r\n    getCount(): number;\r\n}\r\n\r\nexport class NumberRange implements RandomNumber {\r\n    constructor(public min: number, public max: number) {}\r\n\r\n    getCount(): number {\r\n        return this.max - this.min;\r\n    }\r\n}\r\n\r\nexport class StaticNumber implements RandomNumber {\r\n    constructor(public i: number) {}\r\n\r\n    getCount(): number {\r\n        return 1;\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class RandomTextFragment extends TextFragment {\r\n    constructor(public texts: string[]) {\r\n        super();\r\n    }\r\n}\r\n","import { TextFragment } from \"../text-fragment\";\r\n\r\nexport class GenderBasedSelectionFragment extends TextFragment {\r\n    constructor(\r\n        public femaleText: string,\r\n        public maleText?: string,\r\n        public referencedPlayerIndex?: number,\r\n    ) {\r\n        super();\r\n    }\r\n}\r\n","import { VariableFragment } from \"./variable-fragment\";\r\n\r\nexport class SocialMediaPlatformFragment extends VariableFragment {\r\n}","import { ParserHelper } from \"./../parser-helper\";\r\nimport { CardTextDecoder } from \"./card-text-decoder\";\r\nimport { TextFragment } from \"../../text-fragment\";\r\nimport * as Consts from \"./text-decoder-consts\";\r\nimport { RawTextFragment } from \"../../fragments/raw-text-fragment\";\r\nimport { PlayerReferenceFragment } from \"../../fragments/player-reference-fragment\";\r\nimport { SipsFragment } from \"../../fragments/sips-fragment\";\r\nimport {\r\n    RandomNumberFragment,\r\n    RandomNumber,\r\n    NumberRange,\r\n    StaticNumber,\r\n} from \"../../fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"../../fragments/random-text-fragment\";\r\nimport { GenderBasedSelectionFragment } from \"../../fragments/gender-based-selection-fragment\";\r\nimport { SocialMediaPlatformFragment } from \"@core/fragments/social-media-platform-fragment\";\r\n\r\nexport class DefaultTextDecoder implements CardTextDecoder {\r\n    decode(s: string): TextFragment[] {\r\n        const result: TextFragment[] = [];\r\n\r\n        let index = 0;\r\n        let lastTokenIndex = 0;\r\n\r\n        do {\r\n            if (s[index] == Consts.VarStartChar) {\r\n                if (lastTokenIndex !== index) {\r\n                    result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                }\r\n\r\n                const token = this.readToken(s, index, Consts.VarEndChar);\r\n                index = token.index;\r\n\r\n                result.push(this.parseVariableFragment(token.value));\r\n            } else if (s[index] === Consts.SelectionStartChar) {\r\n                if (index > 1 && s[index - 1] === Consts.SelectionModifierStartChar) {\r\n                    // handle !{...}\r\n                    index--;\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    index++;\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseRandomSelectionFragment(content.value));\r\n                } else {\r\n                    if (lastTokenIndex !== index) {\r\n                        result.push(new RawTextFragment(s.substring(lastTokenIndex, index)));\r\n                    }\r\n\r\n                    const content = this.readToken(s, index, Consts.SelectionEndChar);\r\n                    index = content.index;\r\n\r\n                    result.push(this.parseGenderSelectionFragment(content.value));\r\n                }\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n            lastTokenIndex = index;\r\n        } while (++index < s.length);\r\n\r\n        if (lastTokenIndex !== s.length) {\r\n            result.push(new RawTextFragment(s.substring(lastTokenIndex)));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseVariableFragment(content: string): TextFragment {\r\n        content = content.toLowerCase();\r\n\r\n        if (content.startsWith(Consts.PlayerVariable)) {\r\n            // Samples:\r\n            // [Player1:f]\r\n            // [Player1]\r\n            // [Player]\r\n\r\n            const playerRef = new PlayerReferenceFragment();\r\n\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let playerTag: string;\r\n            if (parameterBegin === -1) {\r\n                playerTag = content;\r\n            } else {\r\n                playerTag = content.substring(0, parameterBegin);\r\n\r\n                const genderString = content.substring(parameterBegin + 1);\r\n                const gender = ParserHelper.parseGenderRequirement(genderString);\r\n                if (gender === undefined) {\r\n                    throw new Error(\r\n                        `Gender parameter of player tag could not be parsed: ${content}`,\r\n                    );\r\n                }\r\n\r\n                playerRef.gender = gender;\r\n            }\r\n\r\n            playerRef.playerIndex = this.parsePlayerIndex(playerTag);\r\n            return playerRef;\r\n        }\r\n\r\n        if (content.startsWith(Consts.SipsVariable)) {\r\n            const sipsFragment = new SipsFragment();\r\n            const parameterBegin = content.indexOf(Consts.VariableParametersStart);\r\n\r\n            let sipsTag: string;\r\n            if (parameterBegin === -1) {\r\n                sipsTag = content;\r\n            } else {\r\n                sipsTag = content.substring(0, parameterBegin);\r\n                sipsFragment.minSips = Number(content.substring(parameterBegin + 1));\r\n                if (isNaN(sipsFragment.minSips)) {\r\n                    throw new Error(`The sips amount of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            if (sipsTag.length > Consts.SipsVariable.length) {\r\n                sipsFragment.sipsIndex = Number(sipsTag.substring(Consts.SipsVariable.length));\r\n                if (isNaN(sipsFragment.sipsIndex)) {\r\n                    throw new Error(`The sips index of \"${sipsTag}\" could not be parsed.`);\r\n                }\r\n            }\r\n\r\n            return sipsFragment;\r\n        }\r\n\r\n        if (content === Consts.SocialMediaVariable) {\r\n            return new SocialMediaPlatformFragment();\r\n        }\r\n\r\n        return new RawTextFragment(content);\r\n    }\r\n\r\n    public parseRandomSelectionFragment(content: string): TextFragment {\r\n        // Samples:\r\n        // 12,54,56-90\r\n        // 12,hello,not,19\r\n\r\n        const isNumericSelection = /^[0-9,-]+$/.test(content);\r\n        if (isNumericSelection) {\r\n            const numbers = this.parseNumberArray(content);\r\n            return new RandomNumberFragment(numbers);\r\n        }\r\n\r\n        const texts = this.splitQuoted(content, \",\");\r\n        return new RandomTextFragment(texts);\r\n    }\r\n\r\n    public parseNumberArray(content: string): RandomNumber[] {\r\n        const result: RandomNumber[] = [];\r\n        let currentNumber: RandomNumber | null = null;\r\n\r\n        let numberStart = 0;\r\n        let isRangeToken = false;\r\n\r\n        let i = 0;\r\n        while (true) {\r\n            for (; i < content.length; i++) {\r\n                const c = content[i];\r\n\r\n                if (!isNaN(Number(c))) {\r\n                    continue;\r\n                }\r\n\r\n                if (c === \"-\") {\r\n                    if (isRangeToken) {\r\n                        throw new Error(\"Can only have one range identifier per field\");\r\n                    }\r\n                    isRangeToken = true;\r\n\r\n                    currentNumber = new NumberRange(Number(content.substring(numberStart, i)), 0);\r\n                    numberStart = i + 1;\r\n                    continue;\r\n                }\r\n\r\n                if (c === \",\") {\r\n                    break;\r\n                }\r\n\r\n                throw new Error(\"Invalid character found: \" + c);\r\n            }\r\n\r\n            if (i === numberStart) {\r\n                throw new Error(`A number was expected at position ${i} in string \"${content}\"`);\r\n            }\r\n\r\n            const num = Number(content.substring(numberStart, i));\r\n            if (isRangeToken) {\r\n                (currentNumber as NumberRange).max = num;\r\n            } else {\r\n                currentNumber = new StaticNumber(num);\r\n            }\r\n\r\n            result.push(currentNumber!);\r\n\r\n            if (i === content.length) {\r\n                break;\r\n            }\r\n\r\n            currentNumber = null;\r\n            isRangeToken = false;\r\n            numberStart = ++i;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public splitQuoted(value: string, delimiter: string): string[] {\r\n        let tokenStart = 0;\r\n        let result: string[] = [];\r\n\r\n        while (value.length > tokenStart - 1) {\r\n            let withinQuotes = false;\r\n\r\n            if (value[tokenStart] === '\"') {\r\n                withinQuotes = true;\r\n                tokenStart++;\r\n            }\r\n\r\n            let i = tokenStart;\r\n            do {\r\n                if (value[i] === delimiter) {\r\n                    if (withinQuotes) continue;\r\n\r\n                    result.push(value.substring(tokenStart, i));\r\n                    tokenStart = i + 1;\r\n                    break;\r\n                }\r\n\r\n                if (value[i] == '\"') {\r\n                    if (!withinQuotes) {\r\n                        continue; //allow quotes in the middle\r\n                    }\r\n\r\n                    if (i == value.length - 1) {\r\n                        //if its the last char\r\n                        result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                        return result;\r\n                    }\r\n\r\n                    const nextChar = value[i + 1];\r\n                    if (nextChar == '\"') {\r\n                        i++;\r\n                        continue; //escaped quotes\r\n                    }\r\n\r\n                    if (nextChar != delimiter)\r\n                        throw new Error(\"The delimiter must come after the closing quotes.\");\r\n\r\n                    result.push(value.substring(tokenStart, i).replace('\"\"', '\"'));\r\n                    tokenStart = i + 2;\r\n                    break;\r\n                }\r\n\r\n                if (i == value.length - 1) {\r\n                    if (withinQuotes) {\r\n                        throw new Error(\"The text must end with a quote\");\r\n                    }\r\n\r\n                    result.push(value.substring(tokenStart, i + 1));\r\n                    return result;\r\n                }\r\n            } while (++i < value.length);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseGenderSelectionFragment(content: string): GenderBasedSelectionFragment {\r\n        const fragment = new GenderBasedSelectionFragment(\"\");\r\n\r\n        const splitterIndex = content.indexOf(Consts.SelectionSplitterChar);\r\n        const reference = content.indexOf(Consts.SelectionReferenceChar);\r\n\r\n        if (reference !== -1) {\r\n            fragment.referencedPlayerIndex = this.parsePlayerIndex(\r\n                content.substring(reference + 1),\r\n            );\r\n            content = content.substring(0, reference);\r\n        }\r\n\r\n        if (splitterIndex === -1) {\r\n            fragment.femaleText = content;\r\n        } else {\r\n            fragment.maleText = content.substring(0, splitterIndex);\r\n            fragment.femaleText = content.substring(splitterIndex + 1, content.length);\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    public parsePlayerIndex(value: string): number {\r\n        if (value.length > Consts.PlayerVariable.length) {\r\n            const index = Number(value.substring(Consts.PlayerVariable.length));\r\n            if (isNaN(index)) {\r\n                throw new Error(`The player index of \"${value}\" could not be parsed.`);\r\n            }\r\n\r\n            return index;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    public readToken(\r\n        value: string,\r\n        index: number,\r\n        endChar: string,\r\n    ): { value: string; index: number } {\r\n        const length = value.length;\r\n        const tokenStart = index;\r\n\r\n        while (++index < length) {\r\n            const char = value[index];\r\n\r\n            if (char === Consts.EscapeChar) {\r\n                index++;\r\n                continue;\r\n            }\r\n\r\n            if (char === endChar) {\r\n                index++;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return { index, value: value.substring(tokenStart + 1, index - 1) };\r\n    }\r\n}\r\n","export const VarStartChar: string = \"[\";\r\nexport const VarEndChar: string = \"]\";\r\nexport const EscapeChar: string = \"\\\\\";\r\nexport const SelectionStartChar: string = \"{\";\r\nexport const SelectionModifierStartChar: string = \"!\";\r\nexport const SelectionEndChar: string = \"}\";\r\n\r\nexport const PlayerVariable: string = \"player\";\r\nexport const SipsVariable: string = \"sips\";\r\nexport const VariableParametersStart: string = \":\";\r\nexport const SocialMediaVariable: string = \"socialmediaplatform\";\r\n\r\nexport const SelectionSplitterChar: string = \"/\";\r\nexport const SelectionReferenceChar: string = \"|\";\r\nexport const ArrayDelimiter: string = \",\";\r\n","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GenderBasedSelectionFragment } from \"@core/fragments/gender-based-selection-fragment\";\r\nimport { PlayerReferenceFragment } from \"@core/fragments/player-reference-fragment\";\r\nimport { NumberRange, RandomNumberFragment, StaticNumber } from \"@core/fragments/random-number-fragment\";\r\nimport { RandomTextFragment } from \"@core/fragments/random-text-fragment\";\r\nimport { RawTextFragment } from \"@core/fragments/raw-text-fragment\";\r\nimport { SipsFragment } from \"@core/fragments/sips-fragment\";\r\nimport { SocialMediaPlatformFragment } from \"@core/fragments/social-media-platform-fragment\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { RandomUtils } from \"@core/selection/selection-algorithm\";\r\nimport { TextFragment } from \"@core/text-fragment\";\r\nimport _ from \"lodash\";\r\n\r\nexport class TextFormatter {\r\n    public static getRequiredPlayers(fragments: TextFragment[], playerSettings: PlayerSetting[]) {\r\n        const requiredPlayers = new Array<PlayerSetting>();\r\n\r\n        const players = _.groupBy(\r\n            fragments\r\n                .filter(x => x instanceof PlayerReferenceFragment)\r\n                .map(x => x as PlayerReferenceFragment),\r\n            \"playerIndex\",\r\n        );\r\n\r\n        for (const key in players) {\r\n            if (players.hasOwnProperty(key)) {\r\n                const player = players[key][0];\r\n\r\n                let requiredGender = player.gender;\r\n\r\n                if (requiredGender === \"None\") {\r\n                    const rootSetting = playerSettings.find(\r\n                        x => x.playerIndex === player.playerIndex,\r\n                    );\r\n                    if (rootSetting !== undefined) {\r\n                        requiredGender = rootSetting.gender;\r\n                    }\r\n                }\r\n\r\n                requiredPlayers.push({ playerIndex: player.playerIndex, gender: requiredGender });\r\n            }\r\n        }\r\n\r\n        return requiredPlayers;\r\n    }\r\n\r\n    public static getRequiredSips(fragments: TextFragment[]): SipsFragment[] {\r\n        const sips = _.groupBy(\r\n            fragments.filter(x => x instanceof SipsFragment).map(x => x as SipsFragment),\r\n            \"sipsIndex\",\r\n        );\r\n        return Object.values(sips).map(x => x[0]);\r\n    }\r\n\r\n    public static format(\r\n        fragments: TextFragment[],\r\n        players: { [index: number]: PlayerInfo },\r\n        sips: { [index: number]: number },\r\n        socialMediaPlatform: string,\r\n        translate: (key: string) => string,\r\n        selection: RandomUtils,\r\n        options: Partial<FormatOptions>,\r\n    ): string {\r\n        let result = \"\";\r\n        let lastPlayerFragment: PlayerReferenceFragment | null = null;\r\n\r\n        for (const fragment of fragments) {\r\n            if (fragment instanceof RawTextFragment) {\r\n                result += fragment.text;\r\n            } else if (fragment instanceof PlayerReferenceFragment) {\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n                result += players[fragment.playerIndex].name;\r\n                if (options.boldPlayerNames) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                lastPlayerFragment = fragment;\r\n            } else if (fragment instanceof SipsFragment) {\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n\r\n                const sip = sips[fragment.sipsIndex];\r\n                if (sip === 1) {\r\n                    result += translate(\"oneSip\");\r\n                } else {\r\n                    result += `${sip} ${translate(\"sips\")}`;\r\n                }\r\n\r\n                if (options.boldSips) {\r\n                    result += \"**\";\r\n                }\r\n            } else if (fragment instanceof GenderBasedSelectionFragment) {\r\n                let referencedPlayer: number;\r\n                if (fragment.referencedPlayerIndex !== undefined) {\r\n                    referencedPlayer = fragment.referencedPlayerIndex;\r\n                } else if (lastPlayerFragment !== null) {\r\n                    referencedPlayer = lastPlayerFragment.playerIndex;\r\n                } else {\r\n                    const playerKeys = Object.keys(players);\r\n                    if (playerKeys.length === 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    referencedPlayer = Number(playerKeys[0]);\r\n                }\r\n\r\n                const player = players[referencedPlayer];\r\n                const text = player.gender === \"Female\" ? fragment.femaleText : fragment.maleText;\r\n                if (text !== undefined) {\r\n                    result += text;\r\n                }\r\n            } else if (fragment instanceof RandomTextFragment) {\r\n                const text = selection.selectRandomWeighted(fragment.texts, () => 1);\r\n                result += text;\r\n            } else if (fragment instanceof RandomNumberFragment) {\r\n                const number = selection.selectRandomWeighted(fragment.numbers, x => x.getCount());\r\n                if (number === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (number instanceof NumberRange) {\r\n                    const random =\r\n                        number.min + Math.round((number.max - number.min) * selection.getRandom());\r\n                    result += random;\r\n                } else if (number instanceof StaticNumber) {\r\n                    result += number.i;\r\n                }\r\n            } else if (fragment instanceof SocialMediaPlatformFragment) {\r\n                result += socialMediaPlatform;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport interface FormatOptions {\r\n    boldPlayerNames: boolean;\r\n    boldSips: boolean;\r\n}\r\n","import { CardRef } from \"@core/cards/card-ref\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { DefaultTextDecoder } from \"@core/parsing/text-decoder/default-text-decoder\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { FollowUpSlide, SelectedPlayer, Translator } from \"GameModels\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../../../store\";\r\nimport * as actions from \"../../actions\";\r\nimport { TextFormatter } from \"../../formatter/text-formatter\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { CardPresenter } from \"./card-presenter\";\r\n\r\nexport interface TextSlideState {\r\n    markdownContent: string;\r\n}\r\n\r\nexport abstract class TextSlidePresenter<\r\n    TState extends TextSlideState,\r\n    TCard extends TextCard\r\n> extends CardPresenter<TCard> {\r\n    constructor(protected translator: Translator, cardType: string, slideType: string) {\r\n        super(cardType, slideType);\r\n    }\r\n\r\n    protected initializeCard(card: TCard, cardRef: CardRef): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const result = new Array<RootAction>();\r\n\r\n        const text = this.selectText(selection, card);\r\n        const { formatted, players } = this.formatText(text, card, null, selection);\r\n\r\n        const state = this.initializeState(formatted, card, players, selection);\r\n        result.push(\r\n            actions.setSlideState({\r\n                state,\r\n                insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n            }),\r\n        );\r\n\r\n        if (_.some(card.followUp)) {\r\n            // dont check for correct translation as the language may change\r\n            if (Math.random() <= card.followUpPropability) {\r\n                const due = new Date();\r\n                due.setSeconds(due.getSeconds() + card.followUpDelay);\r\n\r\n                result.push(actions.enqueueFollowUp(this.createFollowUp(cardRef, players, due)));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected initializeFollowUpCard(card: TCard, param: any): RootAction[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n\r\n        try {\r\n            const { text, players } = this.selectFollowUpText(selection, card, param);\r\n            const { formatted } = this.formatText(text, card, players || [], selection);\r\n\r\n            const state = this.initializeFollowUpState(formatted, card, selection, param);\r\n            return [\r\n                actions.setSlideState({\r\n                    state,\r\n                    insights: (selection as MelinaAlgorithm).insights.playerSelection,\r\n                }),\r\n            ];\r\n        } catch (error) {\r\n            //no follow up found\r\n            return [actions.requestSlideAsync.request(this.translator)];\r\n        }\r\n    }\r\n\r\n    protected abstract initializeState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): TState;\r\n\r\n    protected abstract initializeFollowUpState(\r\n        markdownContent: string,\r\n        card: TCard,\r\n        selection: SelectionAlgorithm,\r\n        param: any,\r\n    ): TState;\r\n\r\n    protected createFollowUp(cardRef: CardRef, players: SelectedPlayer[], due: Date): FollowUpSlide {\r\n        return {\r\n            due: due,\r\n            slideType: this.slideType,\r\n            selectedCard: cardRef,\r\n            param: { definedPlayers: players },\r\n        };\r\n    }\r\n\r\n    protected selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return selectText(selection, selectedCard, this.translator);\r\n    }\r\n\r\n    protected formatText(\r\n        text: string,\r\n        card: TCard,\r\n        definedPlayers: SelectedPlayer[] | null,\r\n        selection: SelectionAlgorithm,\r\n    ): { formatted: string; players: SelectedPlayer[] } {\r\n        return formatText(text, card, definedPlayers, selection, this.translator);\r\n    }\r\n\r\n    selectFollowUpText(\r\n        selection: SelectionAlgorithm,\r\n        selectedCard: TextCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const lang = this.translator.languageCode;\r\n\r\n        const followUps = selectedCard.followUp.filter(x =>\r\n            _.some(x.translations, y => y.lang.toLowerCase() === lang),\r\n        );\r\n        if (followUps.length === 0) {\r\n            throw new Error(\"No follow ups found\");\r\n        }\r\n\r\n        let players: SelectedPlayer[] | undefined;\r\n        if (\"definedPlayers\" in param) {\r\n            players = param.definedPlayers;\r\n        } else {\r\n            players = undefined;\r\n        }\r\n\r\n        const content = selection.selectRandomWeighted(followUps, x => x.weight)!;\r\n        const text = content.translations.find(x => x.lang === lang)!.content;\r\n        return { text, players };\r\n    }\r\n}\r\n\r\nexport function formatText<TCard extends TextCard>(\r\n    text: string,\r\n    card: TCard,\r\n    definedPlayers: SelectedPlayer[] | null,\r\n    selection: SelectionAlgorithm,\r\n    translator: Translator,\r\n): { formatted: string; players: SelectedPlayer[] } {\r\n    const fragments = new DefaultTextDecoder().decode(text);\r\n    const playerRequirements = TextFormatter.getRequiredPlayers(fragments, card.players);\r\n\r\n    const players = gameEngine.selectPlayers(\r\n        selection,\r\n        playerRequirements,\r\n        definedPlayers || [],\r\n        card.tags,\r\n    );\r\n\r\n    const requiredSips = TextFormatter.getRequiredSips(fragments);\r\n\r\n    const indexedPlayers: { [index: number]: PlayerInfo } = {};\r\n    for (const player of players) {\r\n        indexedPlayers[player.index] = player.player;\r\n    }\r\n\r\n    const sips: { [index: number]: number } = {};\r\n    for (const sipInfo of requiredSips) {\r\n        sips[sipInfo.sipsIndex] = selection.getSips(sipInfo.minSips);\r\n    }\r\n\r\n    const socialMediaPlatform = store.getState().settings.socialMediaPlatform;\r\n\r\n    const formatted = TextFormatter.format(\r\n        fragments,\r\n        indexedPlayers,\r\n        sips,\r\n        socialMediaPlatform,\r\n        x => translator.translate(`game.textFormatter.${x}`),\r\n        selection,\r\n        { boldPlayerNames: true, boldSips: true },\r\n    );\r\n\r\n    return { formatted: formatted, players };\r\n}\r\n\r\nexport function selectText(\r\n    selection: SelectionAlgorithm,\r\n    selectedCard: TextCard,\r\n    translator: Translator,\r\n): string {\r\n    const lang = translator.languageCode;\r\n\r\n    const viableContents = selectedCard.content.filter(x =>\r\n        _.some(x.translations, y => y.lang.toLocaleLowerCase() === lang),\r\n    );\r\n    const content = selection.selectRandomWeighted(viableContents, x => x.weight)!;\r\n    return content.translations.find(x => x.lang === lang)!.content;\r\n}\r\n","import { SlidePresenter } from \"./slide-presenter\";\r\nimport { Card } from \"@core/cards/card\";\r\nimport * as gameEngine from \"../../game-engine\";\r\nimport { ReactNode } from \"react\";\r\nimport * as actions from \"../../actions\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport { CardRef } from \"@core/cards/card-ref\";\r\n\r\nexport abstract class CardPresenter<TCard extends Card> implements SlidePresenter {\r\n    abstract backgroundColor: string;\r\n    requiredCards: string[];\r\n\r\n    constructor(protected cardType: string, public slideType: string) {\r\n        this.requiredCards = [cardType];\r\n    }\r\n\r\n    initialize(): ActionType<any>[] {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm();\r\n        const cardRef = selection.selectCard(this.cardType);\r\n\r\n        return [actions.applyCard(cardRef), ...this.initializeCard(cardRef.card as TCard, cardRef)];\r\n    }\r\n\r\n    initializeFollowUp(card: CardRef | null, param: any): ActionType<any>[] {\r\n        return this.initializeFollowUpCard(card!.card as TCard, param, card!);\r\n    }\r\n\r\n    abstract render(): ReactNode;\r\n    protected abstract initializeCard(card: TCard, cardRef: CardRef): ActionType<any>[];\r\n    protected abstract initializeFollowUpCard(card: TCard, param: any, cardRef: CardRef): ActionType<any>[];\r\n}\r\n","export default {\r\n    down: \"#c23616\", //pomegrenate (red)\r\n    drink: \"#2470A3\", //belize hole (blue)\r\n    fact: \"#D5880B\", //orange\r\n    groupGame: \"#664EDF\", //green sea\r\n    neverEver: \"#C75000\", //pumpkin\r\n    noIdeaLoses: \"#192a56\", //pico void (dark blue)\r\n    truthOrDare: \"#2c3e50\", //Midnight blue\r\n    virus: \"##219150\",\r\n    wouldYouRather: \"#273c75\",\r\n    task: \"##667293\",\r\n};","import { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport { PlayerSelectionInsights } from \"@core/selection/insights\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    Button,\r\n    createStyles,\r\n    Paper,\r\n    Theme,\r\n    Typography,\r\n    WithStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport * as actions from \"../actions\";\r\nimport * as gameEngine from \"../game-engine\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles } from \"./base/helper\";\r\nimport { SlidePresenter } from \"./base/slide-presenter\";\r\nimport { formatText, selectText } from \"./base/text-slide-presenter\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TruthOrDareSlideState,\r\n    players: state.settings.players,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: actions.requestSlideAsync.request,\r\n    setState: actions.setSlideState,\r\n    applyCard: actions.applyCard,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            ...getRootStyles(),\r\n            cursor: \"default\",\r\n        },\r\n        clickableRoot: {\r\n            ...getRootStyles()\r\n        },\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n                fontSize: \"1.5rem\",\r\n            },\r\n        },\r\n        spaceHeader: {\r\n            visibility: \"hidden\",\r\n            marginTop: 15,\r\n        },\r\n        questionPaper: {\r\n            padding: theme.spacing.unit * 2,\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                padding: theme.spacing.unit * 3,\r\n                width: theme.spacing.unit * 50,\r\n            },\r\n        },\r\n        questionButtonsContainer: {\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            marginTop: theme.spacing.unit,\r\n        },\r\n    });\r\n\r\ntype MappedActions = typeof dispatchProps;\r\n\r\ntype Props = MappedActions &\r\n    ReturnType<typeof mapStateToProps> &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction QuestionComponent(props: Props) {\r\n    const { state, players, nextSlide, classes } = props;\r\n    const player = players.find(x => x.id === state.selectedPlayer);\r\n    if (player === undefined) {\r\n        nextSlide(toTranslator(props));\r\n        return <div />;\r\n    }\r\n\r\n    const select = (decision: TruthOrDare) =>\r\n        new TruthOrDareSlide(toTranslator(props)).select(decision, props, player);\r\n\r\n    const springProps = useSpring({\r\n        opacity: 1,\r\n        transform: \"scale(1, 1)\",\r\n        from: { opacity: 0, transform: \"scale(2.5, 2.5)\" },\r\n    });\r\n\r\n    return (\r\n        <animated.div style={springProps}>\r\n            <Paper className={classes.questionPaper}>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    <Translate\r\n                        id=\"slides.truthordare.playerTruthordare\"\r\n                        data={{ name: player.name }}\r\n                    />\r\n                </Typography>\r\n                <div className={classes.questionButtonsContainer}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ marginRight: 15 }}\r\n                        onClick={() => select(\"Truth\")}\r\n                    >\r\n                        <Translate id=\"slides.truthordare.truth\" />\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => select(\"Dare\")}>\r\n                        <Translate id=\"slides.truthordare.dare\" />\r\n                    </Button>\r\n                </div>\r\n            </Paper>\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nfunction DareComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <Translate id=\"slides.truthordare.truth\" /> <Translate id=\"slides.truthordare.or\" />{\" \"}\r\n            <b>\r\n                <Translate id=\"slides.truthordare.dare\" />\r\n            </b>\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h4\">\r\n            <b>\r\n                <Translate id=\"slides.truthordare.truth\" />\r\n            </b>{\" \"}\r\n            <Translate id=\"slides.truthordare.or\" /> <Translate id=\"slides.truthordare.dare\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.clickableRoot} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent!} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TruthOrDareComponent(props: Props) {\r\n    const { classes, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    if (state.isDeciding) {\r\n        return <div className={classes.root}>{QuestionComponent(props)}</div>;\r\n    }\r\n\r\n    if (state.decision === \"Dare\") {\r\n        return DareComponent(props);\r\n    } else {\r\n        return TruthComponent(props);\r\n    }\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TruthOrDareComponent) as React.ComponentType;\r\n\r\ntype TruthOrDare = \"Truth\" | \"Dare\";\r\n\r\ninterface TruthOrDareSlideState {\r\n    selectedPlayer: string;\r\n    isDeciding: boolean;\r\n    decision?: TruthOrDare;\r\n    markdownContent?: string;\r\n}\r\n\r\nexport class TruthOrDareSlide implements SlidePresenter {\r\n    backgroundColor = colors.truthOrDare;\r\n\r\n    constructor(private translator: Translator) {}\r\n\r\n    public slideType = \"TruthOrDareSlide\";\r\n    public requiredCards = [\"TaskCard\", \"QuestionCard\"];\r\n\r\n    public select(decision: TruthOrDare, actions: MappedActions, player: PlayerInfo) {\r\n        const selection = gameEngine.getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const cardType = decision === \"Dare\" ? \"TaskCard\" : \"QuestionCard\";\r\n        const cardRef = selection.selectCard(cardType);\r\n        const card = cardRef.card as TextCard;\r\n\r\n        const selectedText = selectText(selection, card, this.translator);\r\n        const text = `#### ${this.translator.translate(\r\n            \"slides.truthordare.instruction\",\r\n        )}\\n${selectedText}`;\r\n\r\n        const { formatted } = formatText(\r\n            text,\r\n            card,\r\n            [{ index: 99, player }],\r\n            selection,\r\n            this.translator,\r\n        );\r\n\r\n        actions.applyCard(cardRef);\r\n\r\n        const state: TruthOrDareSlideState = {\r\n            isDeciding: false,\r\n            selectedPlayer: player.id,\r\n            markdownContent: formatted,\r\n            decision,\r\n        };\r\n        actions.setState({ state, insights: selection.insights.playerSelection });\r\n    }\r\n\r\n    initialize(): RootAction[] {\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const player = gameEngine.selectPlayers(\r\n            selection,\r\n            [new PlayerSetting(1, \"None\")],\r\n            [],\r\n            [],\r\n        )[0].player;\r\n\r\n        return [\r\n            this.setState(\r\n                { isDeciding: true, selectedPlayer: player.id },\r\n                selection.insights.playerSelection,\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private setState(\r\n        state: TruthOrDareSlideState,\r\n        insights: PlayerSelectionInsights | null = null,\r\n    ): RootAction {\r\n        return actions.setSlideState({ state, insights });\r\n    }\r\n\r\n    initializeFollowUp(): RootAction[] {\r\n        throw new Error(\"Method not supported.\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\nimport { compose } from \"redux\";\r\nimport { DownCard } from \"src/impl/cards/down-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DownSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DownSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.down.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Spring\r\n                    config={config.wobbly}\r\n                    from={{ transform: \"translate(-100px, 0px)\" }}\r\n                    to={{ transform: \"translate(0px, 0px)\" }}\r\n                >\r\n                    {props => (\r\n                        <div style={props as any}>\r\n                            {header}\r\n                            <Markdown\r\n                                children={state.markdownContent}\r\n                                options={defaultMarkdownOptions}\r\n                            />\r\n                            <div className={classes.spaceHeader}>{header}</div>\r\n                        </div>\r\n                    )}\r\n                </Spring>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(DownSlideComponent) as React.ComponentType;\r\n\r\ninterface DownSlideState extends TextSlideState {}\r\nexport class DownSlide extends TextSlidePresenter<DownSlideState, DownCard> {\r\n    backgroundColor = colors.down;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DownCard\", \"DownSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DownSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { TextCard } from \"@core/cards/text-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootAction, RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { FactCard } from \"src/impl/cards/fact-card\";\r\nimport * as actions from \"../actions\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles, getHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { CardRef } from \"@core/cards/card-ref\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as FactSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction FactSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id={`slides.fact.title${state.isFollowUp ? (state.isTrue ? \".true\" : \".false\") : \"\"}`} />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface FactSlideFollowUpParam {\r\n    mode: FactSlideMode;\r\n    players: SelectedPlayer[];\r\n    isTrue: boolean;\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize\r\n)(FactSlideComponent) as React.ComponentType;\r\n\r\ntype FactSlideMode = \"singleplayer\" | \"multiplayer\";\r\nconst availableFactSlideModes: FactSlideMode[] = [\"singleplayer\", \"multiplayer\"];\r\n\r\ninterface FactSlideState extends TextSlideState {\r\n    isFollowUp: boolean;\r\n    mode: FactSlideMode;\r\n    isTrue: boolean;\r\n}\r\n\r\nexport class FactSlide extends TextSlidePresenter<FactSlideState, FactCard> {\r\n    private selectedMode: FactSlideMode;\r\n    private players?: SelectedPlayer[];\r\n    backgroundColor = colors.fact;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"FactCard\", \"FactSlide\");\r\n\r\n        this.selectedMode =\r\n            availableFactSlideModes[Math.floor(availableFactSlideModes.length * Math.random())];\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        const cardText = super.selectText(selection, selectedCard);\r\n        const instruction = this.translator.translate(`slides.fact.${this.selectedMode}`);\r\n\r\n        return `#### ${instruction}\\n${cardText}`;\r\n    }\r\n\r\n    selectFollowUpText(\r\n        _selection: SelectionAlgorithm,\r\n        selectedCard: FactCard,\r\n        param: any,\r\n    ): { text: string; players?: SelectedPlayer[] } {\r\n        const { mode, players } = param as FactSlideFollowUpParam;\r\n        const { isTrueFact } = selectedCard;\r\n\r\n        const text = this.translator.translate(`slides.fact.${mode}.${isTrueFact}`);\r\n        return { text, players };\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        card: FactCard,\r\n        players: SelectedPlayer[],\r\n    ): FactSlideState {\r\n        this.players = players;\r\n\r\n        return {\r\n            isFollowUp: false,\r\n            markdownContent: markdownContent,\r\n            mode: this.selectedMode,\r\n            isTrue: card.isTrueFact,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string, card: FactCard,  param: any): FactSlideState {\r\n        const { mode } = param as FactSlideFollowUpParam;\r\n        return {\r\n            isFollowUp: true,\r\n            markdownContent: markdownContent,\r\n            mode,\r\n            isTrue: card.isTrueFact,\r\n        };\r\n    }\r\n\r\n    protected initializeCard(card: FactCard, cardRef: CardRef): RootAction[] {\r\n        return [...super.initializeCard(card, cardRef), actions.enqueueFollowUp({\r\n            due: new Date(),\r\n            selectedCard: cardRef,\r\n            slideType: \"FactSlide\",\r\n            param: {\r\n                mode: this.selectedMode,\r\n                players: this.players,\r\n            } as FactSlideFollowUpParam,\r\n        })];\r\n    }\r\n}\r\n","import { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport {\r\n    getRootStyles,\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { ReactNode } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStyles, Theme, WithStyles, Typography, withStyles } from \"@material-ui/core\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { NeverEverCard } from \"src/impl/cards/never-ever-card\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { SelectedPlayer, Translator } from \"GameModels\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as State,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NeverEverComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h5\">\r\n            <Translate id=\"slides.neverever.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    const springProps = useSpring({\r\n        opacity: 1,\r\n        transform: \"rotate(0deg)\",\r\n        from: { opacity: 0, transform: \"rotate(20deg)\" },\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <animated.div style={springProps} className={classes.content}>\r\n                {header}\r\n                <Typography variant=\"h5\" className={classes.instruction}>\r\n                    <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                </Typography>\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.neverever.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </animated.div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NeverEverComponent) as React.ComponentType;\r\n\r\ninterface State extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class NeverEverSlide extends TextSlidePresenter<State, NeverEverCard> {\r\n    backgroundColor = colors.neverEver;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NeverEverCard\", \"NeverEverSlide\");\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: NeverEverCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2), // at least two sips so the text can be plural\r\n        };\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): State {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator, SelectedPlayer } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WouldYouRatherCard } from \"src/impl/cards/would-you-rather-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as WouldYouRatherSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n        instruction: {\r\n            color: \"white\",\r\n        },\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction WouldYouRatherSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.wouldyourather.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div style={{ position: \"relative\" }}>\r\n                    <Typography\r\n                        style={{ marginTop: 20 }}\r\n                        className={classes.instruction}\r\n                        variant=\"h6\"\r\n                    >\r\n                        <Translate id=\"slides.wouldyourather.instruction\" data={{ sips: state.sips }} />\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(WouldYouRatherSlideComponent) as React.ComponentType;\r\n\r\ninterface WouldYouRatherSlideState extends TextSlideState {\r\n    sips: number;\r\n}\r\n\r\nexport class WouldYouRatherSlide extends TextSlidePresenter<\r\n    WouldYouRatherSlideState,\r\n    WouldYouRatherCard\r\n> {\r\n    backgroundColor = colors.wouldYouRather;\r\n    constructor(translator: Translator) {\r\n        super(translator, \"WyrCard\", \"WouldYouRatherSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        return \"...\" + super.selectText(selection, selectedCard);\r\n    }\r\n\r\n    protected initializeState(\r\n        markdownContent: string,\r\n        _card: WouldYouRatherCard,\r\n        _players: SelectedPlayer[],\r\n        selection: SelectionAlgorithm,\r\n    ): WouldYouRatherSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: selection.getSips(2), // at least two sips so the text can be plural\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): WouldYouRatherSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n            sips: 0,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { DrinkCard } from \"src/impl/cards/drink-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as DrinkSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction DrinkSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(DrinkSlideComponent) as React.ComponentType;\r\n\r\ninterface DrinkSlideState extends TextSlideState {}\r\nexport class DrinkSlide extends TextSlidePresenter<DrinkSlideState, DrinkCard> {\r\n    backgroundColor = colors.drink;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"DrinkCard\", \"DrinkSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): DrinkSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): DrinkSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { VirusCard } from \"src/impl/cards/virus-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as VirusSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction VirusSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.virus.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(VirusSlideComponent) as React.ComponentType;\r\n\r\ninterface VirusSlideState extends TextSlideState {}\r\nexport class VirusSlide extends TextSlidePresenter<VirusSlideState, VirusCard> {\r\n    backgroundColor = colors.virus;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"VirusCard\", \"VirusSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): VirusSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): VirusSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { NoIdeaLosesCard } from \"src/impl/cards/no-idea-loses-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { defaultMarkdownOptions, getContentStyles, getRootStyles, spaceHeaderStyles } from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as NoIdeaLosesSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            color: \"white\",\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction NoIdeaLosesSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(NoIdeaLosesSlideComponent) as React.ComponentType;\r\n\r\ninterface NoIdeaLosesSlideState extends TextSlideState {}\r\nexport class NoIdeaLosesSlide extends TextSlidePresenter<NoIdeaLosesSlideState, NoIdeaLosesCard> {\r\n    backgroundColor = colors.noIdeaLoses;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"NoIdeaLosesCard\", \"NoIdeaLosesSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): NoIdeaLosesSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): NoIdeaLosesSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { GroupGameCard } from \"src/impl/cards/group-game-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as GroupGameSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction GroupGameSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.groupgame.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(GroupGameSlideComponent) as React.ComponentType;\r\n\r\ninterface GroupGameSlideState extends TextSlideState {}\r\nexport class GroupGameSlide extends TextSlidePresenter<GroupGameSlideState, GroupGameCard> {\r\n    backgroundColor = colors.groupGame;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"GroupGameCard\", \"GroupGameSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): GroupGameSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): GroupGameSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { createStyles, Theme, WithStyles, withStyles, Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { Translator } from \"GameModels\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport * as React from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { LocalizeContextProps, withLocalize, Translate } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { TaskCard } from \"src/impl/cards/task-card\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { toTranslator } from \"../utils\";\r\nimport {\r\n    defaultMarkdownOptions,\r\n    getContentStyles,\r\n    getRootStyles,\r\n    spaceHeaderStyles,\r\n    getHeaderStyles,\r\n} from \"./base/helper\";\r\nimport { TextSlidePresenter, TextSlideState } from \"./base/text-slide-presenter\";\r\nimport colors from \"./colors\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { TextCard } from \"@core/cards/text-card\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    state: state.game.slideState as TaskSlideState,\r\n});\r\n\r\nconst dispatchProps = {\r\n    nextSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        root: getRootStyles(),\r\n        content: getContentStyles(theme),\r\n        header: {\r\n            ...getHeaderStyles(theme),\r\n            marginBottom: 15,\r\n        },\r\n        spaceHeader: spaceHeaderStyles(theme),\r\n    });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n    typeof dispatchProps &\r\n    WithStyles<typeof styles> &\r\n    LocalizeContextProps;\r\n\r\nfunction TaskSlideComponent(props: Props) {\r\n    const { classes, nextSlide, state } = props;\r\n    if (state === null) {\r\n        return <div className={classes.root} />;\r\n    }\r\n\r\n    const header = (\r\n        <Typography className={classes.header} variant=\"h3\">\r\n            <Translate id=\"slides.task.title\" />\r\n        </Typography>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root} onClick={() => nextSlide(toTranslator(props))}>\r\n            <div className={classes.content}>\r\n                {header}\r\n                <Markdown children={state.markdownContent} options={defaultMarkdownOptions} />\r\n                <div className={classes.spaceHeader}>{header}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Component = compose(\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(TaskSlideComponent) as React.ComponentType;\r\n\r\ninterface TaskSlideState extends TextSlideState {}\r\nexport class TaskSlide extends TextSlidePresenter<TaskSlideState, TaskCard> {\r\n    backgroundColor = colors.task;\r\n\r\n    constructor(translator: Translator) {\r\n        super(translator, \"TaskCard\", \"TaskSlide\");\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        return <Component />;\r\n    }\r\n\r\n    selectText(selection: SelectionAlgorithm, selectedCard: TextCard): string {\r\n        let task = super.selectText(selection, selectedCard);\r\n        if (/[A-Z-a-z]$/g.test(task)) {\r\n            task = task + \".\";\r\n        }\r\n\r\n        return \"[Player99]: \" + task + \" \" + this.translator.translate(\"slides.task.instruction\");\r\n    }\r\n\r\n    protected initializeState(markdownContent: string): TaskSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n\r\n    protected initializeFollowUpState(markdownContent: string): TaskSlideState {\r\n        return {\r\n            markdownContent: markdownContent,\r\n        };\r\n    }\r\n}\r\n","import { TruthOrDareSlide } from './slides/TruthOrDareSlide';\r\nimport { DownSlide } from \"./slides/DownSlide\";\r\nimport { SlidePresenter } from \"./slides/base/slide-presenter\";\r\nimport { FactSlide } from \"./slides/FactSlide\";\r\nimport { NeverEverSlide } from \"./slides/NeverEverSlide\";\r\nimport { Translator } from \"GameModels\";\r\nimport { WouldYouRatherSlide } from './slides/WouldYouRatherSlide';\r\nimport { DrinkSlide } from './slides/DrinkSlide';\r\nimport { VirusSlide } from './slides/VirusSlide';\r\nimport { NoIdeaLosesSlide } from './slides/NoIdeaLosesSlide';\r\nimport { GroupGameSlide } from './slides/GroupGameSlide';\r\nimport { TaskSlide } from './slides/TaskSlide';\r\n\r\nexport type SlideComponents = { [type: string]: new(translator: Translator) => SlidePresenter };\r\n\r\nexport const slideComponents: SlideComponents = {\r\n    DownSlide,\r\n    FactSlide,\r\n    NeverEverSlide,\r\n    TruthOrDareSlide,\r\n    WouldYouRatherSlide,\r\n    DrinkSlide,\r\n    VirusSlide,\r\n    NoIdeaLosesSlide,\r\n    GroupGameSlide,\r\n    TaskSlide,\r\n};\r\n","import { MelinaAlgorithm } from \"./../../core/selection/melina-algorithm\";\r\nimport { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { Epic } from \"redux-observable\";\r\nimport { filter, mergeMap, tap, ignoreElements } from \"rxjs/operators\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport _ from \"lodash\";\r\nimport store from \"../../store/index\";\r\nimport * as actions from \"./actions\";\r\nimport { getRandomSelectionAlgorithm } from \"./game-engine\";\r\nimport { slideComponents } from \"./component-registry\";\r\nimport { of } from \"rxjs\";\r\nimport { Translator } from \"GameModels\";\r\nimport { getSlideRegistrations } from \"./slides-processor\";\r\nimport Fullscreen from \"@utils/fullscreen\";\r\n\r\nexport const nextSlideEpic: Epic<RootAction, RootAction, RootState, Services> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.requestSlideAsync.request)),\r\n        mergeMap(x => of(...nextSlide(x.payload))),\r\n    );\r\n\r\nexport const redirectOnGameStartedEpic: Epic<\r\n    RootAction,\r\n    RootAction,\r\n    RootState,\r\n    Services\r\n> = action$ =>\r\n    action$.pipe(\r\n        filter(isActionOf(actions.startGame)),\r\n        tap(action => action.payload.push(\"/game\")),\r\n        tap(() => Fullscreen.requestFullscreen(window.document.documentElement)),\r\n        ignoreElements(),\r\n    );\r\n\r\nfunction nextSlide(translator: Translator): RootAction[] {\r\n    const now = new Date();\r\n    let state = store.getState();\r\n\r\n    const dueFollowUps = state.game.followUp.filter(x => x.due < now);\r\n    if (dueFollowUps.length > 0) {\r\n        const followUp = _.sortBy(dueFollowUps, x => x.due.getSeconds())[0];\r\n\r\n        const factory = slideComponents[followUp.slideType];\r\n        const slideInitalizer = new factory(translator);\r\n        const slideActions = slideInitalizer.initializeFollowUp(\r\n            followUp.selectedCard,\r\n            followUp.param,\r\n        );\r\n\r\n        return [actions.activateFollowUp(followUp), ...slideActions];\r\n    }\r\n\r\n    let selection = getRandomSelectionAlgorithm(state);\r\n    const slides = getSlideRegistrations(slideComponents);\r\n\r\n    const { willPower, memory } = selection.recomputeWillPower(state.game.willPowerMemory);\r\n    const willPowerActions = new Array<RootAction>();\r\n\r\n    if (willPower !== state.game.currentWillPower) {\r\n        if (!state.game.isWillPowerLocked) {\r\n            willPowerActions.push(actions.setWillPower(willPower));\r\n            state = { ...state, game: { ...state.game, currentWillPower: willPower } };\r\n            selection = getRandomSelectionAlgorithm(state);\r\n        }\r\n    }\r\n\r\n    if (memory.length > 0) {\r\n        willPowerActions.push(actions.addWillPowerMemory(memory));\r\n    }\r\n\r\n    const slideType = selection.selectNextSlide(slides);\r\n    if (slideType === undefined) {\r\n        // TODO: end game\r\n        throw new Error(\"Game Finished\");\r\n    }\r\n\r\n    const factory = slideComponents[slideType];\r\n    const slideInitalizer = new factory(translator);\r\n    const slideActions = slideInitalizer.initialize();\r\n\r\n    return [\r\n        actions.requestSlideAsync.success({\r\n            slide: slideType,\r\n            insights: (selection as MelinaAlgorithm).insights.slideWeights!,\r\n        }),\r\n        ...slideActions,\r\n        ...willPowerActions\r\n    ];\r\n}\r\n","import { SlideComponents } from \"./component-registry\";\r\nimport { SlideRegistration } from \"@core/slide-registration\";\r\n\r\nexport function getSlideRegistrations(components: SlideComponents): SlideRegistration[] {\r\n    const result = new Array<SlideRegistration>();\r\n\r\n    for (const component in components) {\r\n        if (components.hasOwnProperty(component)) {\r\n            const element = components[component];\r\n            const slide = new element({ languageCode: \"en\", translate: () => \"\" });\r\n            result.push({ slideType: slide.slideType, requestedCards: slide.requiredCards });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { combineEpics } from \"redux-observable\";\r\nimport * as settingsEpics from \"../features/settings/epics\";\r\nimport * as gameEpics from \"../features/game/epics\";\r\n\r\nexport default combineEpics(...Object.values(settingsEpics), ...Object.values(gameEpics));\r\n","import { compose } from \"redux\";\r\n\r\n// @ts-ignore\r\nexport const composeEnhancers =\r\n    (process.env.NODE_ENV === \"development\" &&\r\n        window &&\r\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n","import { PlayerSelectionInsights, SlideSelectionInsights } from './../../core/selection/insights';\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport * as actions from \"./actions\";\r\nimport { FollowUpSlide } from \"GameModels\";\r\nimport cuid from 'cuid';\r\nimport { CardRef } from '@core/cards/card-ref';\r\n\r\nexport type GameState = Readonly<{\r\n    isStarted: boolean;\r\n\r\n    selectedSlide: string | null;\r\n    selectedCard: CardRef | null;\r\n\r\n    slideState: any | null;\r\n\r\n    currentWillPower: number;\r\n    isWillPowerLocked: boolean;\r\n    willPowerMemory: string[];\r\n\r\n    playerInsights: PlayerSelectionInsights | null;\r\n    slideInsights: SlideSelectionInsights | null;\r\n\r\n    startTime: Date | null;\r\n\r\n    cardsHistory: CardRef[];\r\n    slidesHistory: string[];\r\n    followUp: FollowUpSlide[];\r\n    activeFollowUp: FollowUpSlide | null;\r\n    currentSlideStatus: string;\r\n}>;\r\n\r\nexport default combineReducers<GameState, RootAction>({\r\n    cardsHistory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return [action.payload, ...state];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slidesHistory: (state = [], action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return [action.payload.slide, ...state];\r\n        }\r\n        return state;\r\n    },\r\n    isStarted: (state = false, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.startGame):\r\n                return true;\r\n            case getType(actions.cancelGame):\r\n                return false;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    selectedCard: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.applyCard):\r\n                return action.payload;\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.selectedCard;\r\n        }\r\n        return state;\r\n    },\r\n    selectedSlide: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return action.payload.slide;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload.slideType;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    slideState: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n            case getType(actions.activateFollowUp):\r\n                return null;\r\n            case getType(actions.setSlideState):\r\n                return action.payload.state;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    followUp: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.enqueueFollowUp):\r\n                return [...state, action.payload];\r\n            case getType(actions.activateFollowUp):\r\n                return state.filter(x => x.due !== action.payload.due);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    activeFollowUp: (state = null, action) => {\r\n        switch (action.type) {\r\n            case getType(actions.requestSlideAsync.success):\r\n                return null;\r\n            case getType(actions.activateFollowUp):\r\n                return action.payload;\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    startTime: (state = null, action) => {\r\n        if (action.type === getType(actions.startGame)) {\r\n            return new Date();\r\n        }\r\n        return state;\r\n    },\r\n    isWillPowerLocked: (state = false, action) => {\r\n        if (action.type === getType(actions.setWillPowerLocked)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentWillPower: (state = 1, action) => {\r\n        if (action.type === getType(actions.setWillPower)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    willPowerMemory: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addWillPowerMemory):\r\n                return [...state, ...action.payload];\r\n            case getType(actions.startGame):\r\n                return [];\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    playerInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.setSlideState)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    slideInsights: (state = null, action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return action.payload.insights;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    currentSlideStatus: (state = \"\", action) => {\r\n        if (action.type === getType(actions.requestSlideAsync.success)) {\r\n            return cuid();\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n","import { Weighted } from \"@core/weighted\";\r\nimport { RootAction } from \"DrinctetTypes\";\r\nimport { SourceInfo } from \"SettingsModels\";\r\nimport { combineReducers } from \"redux\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport { PlayerArrangement } from \"@core/player-arrangement\";\r\nimport { PlayerInfo } from \"@core/player-info\";\r\nimport * as actions from \"./actions\";\r\nimport { slideWeights } from \"../../preferences\";\r\nimport _ from \"lodash\";\r\n\r\nexport type SettingsState = Readonly<{\r\n    players: PlayerInfo[];\r\n    arrangements: PlayerArrangement[];\r\n    preferOppositeGenders: boolean;\r\n    slides: Array<Weighted<string>>;\r\n    socialMediaPlatform: string;\r\n    sources: SourceInfo[];\r\n    tags: Array<Weighted<string>>;\r\n}>;\r\n\r\nexport default combineReducers<SettingsState, RootAction>({\r\n    players: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayer):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayer):\r\n                return state.filter(x => x.id !== action.payload);\r\n            case getType(actions.updatePlayer):\r\n                return state.map(player =>\r\n                    player.id === action.payload.id ? action.payload : player,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    sources: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addSource):\r\n                return [...state, action.payload];\r\n            case getType(actions.removeSource):\r\n                return state.filter(x => x.url !== action.payload);\r\n            case getType(actions.loadSourceAsync.request):\r\n                return state.map(item =>\r\n                    item.url === action.payload ? { ...item, isLoading: true } : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.success):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? {\r\n                              ...item,\r\n                              cards: action.payload.cards,\r\n                              errorMessage: undefined,\r\n                              isLoading: false,\r\n                              tags: _.uniq(_.flatten(action.payload.cards.map(x => x.tags)).map(x => (x as string).toLowerCase()))\r\n                          }\r\n                        : item,\r\n                );\r\n            case getType(actions.loadSourceAsync.failure):\r\n                return state.map(item =>\r\n                    item.url === action.payload.url\r\n                        ? { ...item, isLoading: false, errorMessage: action.payload.message }\r\n                        : item,\r\n                );\r\n            case getType(actions.setSourceWeight):\r\n                return state.map(item =>\r\n                    item.url === action.payload.value\r\n                        ? { ...item, weight: action.payload.weight }\r\n                        : item,\r\n                );\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    arrangements: (state = [], action) => {\r\n        switch (action.type) {\r\n            case getType(actions.addPlayerArrangment):\r\n                return [...state, action.payload];\r\n            case getType(actions.removePlayerArrangment):\r\n                return state.filter(x => x.p1 !== action.payload);\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    preferOppositeGenders: (state = true, action) => {\r\n        if (action.type === getType(actions.setPreferOppositeGenders)) {\r\n            return action.payload;\r\n        }\r\n        return state;\r\n    },\r\n    slides: (state = GetSlideWeightedArray(), action) => {\r\n        switch (action.type) {\r\n            case getType(actions.setSlideWeight):\r\n                return state.map(x => (x.value === action.payload.value ? action.payload : x));\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    socialMediaPlatform: (state = \"Snapchat\", action) => {\r\n        if (action.type === getType(actions.setSocialMediaPlatform)) {\r\n            return action.payload;\r\n        }\r\n\r\n        return state;\r\n    },\r\n    tags: (state = [], action) => {\r\n        if (action.type === getType(actions.setTagWeight)) {\r\n            const value = action.payload.value.toLowerCase();\r\n            const existingTag = state.find(x => x.value === value);\r\n            if (existingTag !== undefined) {\r\n                return state.map(x => x.value === value ? {value, weight: action.payload.weight} : x);\r\n            } else {\r\n                return [...state, action.payload];\r\n            }\r\n        }\r\n\r\n        return state;\r\n    },\r\n});\r\n\r\nfunction GetSlideWeightedArray() {\r\n    const weightsList: Weighted<string>[] = [];\r\n    for (const key in slideWeights) {\r\n        if (slideWeights.hasOwnProperty(key)) {\r\n            const element = slideWeights[key];\r\n            weightsList.push({ value: key, weight: element });\r\n        }\r\n    }\r\n\r\n    return weightsList;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"../features/game/reducer\";\r\nimport settingsReducer from \"../features/settings/reducer\";\r\nimport { localizeReducer } from \"react-localize-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    game: gameReducer,\r\n    settings: settingsReducer,\r\n    localize: localizeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { RootAction, RootState, Services } from \"DrinctetTypes\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport services from \"../services\";\r\nimport rootEpic from \"./root-epic\";\r\nimport { composeEnhancers } from \"./utils\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nexport const epicMiddleware = createEpicMiddleware<RootAction, RootAction, RootState, Services>({\r\n    dependencies: services,\r\n});\r\n\r\n// configure middlewares\r\nconst middlewares = [epicMiddleware];\r\n\r\n// compose enchancers\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n// rehydrate state on app start\r\nconst initialState = {};\r\n\r\n// create store\r\nconst store = createStore(rootReducer, initialState, enhancer);\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\n// export store singleton instance\r\nexport default store;\r\n","import { CardDeck } from \"@core/card-deck\";\r\nimport { PlayerSetting } from \"@core/cards/player-setting\";\r\nimport { GameStatus } from \"@core/game-status\";\r\nimport { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport { SelectionAlgorithm } from \"@core/selection/selection-algorithm\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport { SelectedPlayer } from \"GameModels\";\r\nimport seedrandom from \"seedrandom\";\r\nimport store from \"../../store\";\r\n\r\nexport function selectPlayers(\r\n    selection: SelectionAlgorithm,\r\n    players: PlayerSetting[],\r\n    predefined: SelectedPlayer[],\r\n    tags: string[],\r\n): SelectedPlayer[] {\r\n    const result = selection.selectPlayers(\r\n        players.map(x => x.gender),\r\n        players.map(x => {\r\n            const p = predefined.find(y => y.index === x.playerIndex);\r\n            if (p === undefined) {\r\n                return null;\r\n            }\r\n\r\n            return p.player;\r\n        }),\r\n        tags,\r\n    );\r\n    const selected = result.map((x, i) => ({ index: players[i].playerIndex, player: x }));\r\n\r\n    return selected;\r\n}\r\n\r\nexport function getRandomSelectionAlgorithm(state?: RootState): SelectionAlgorithm {\r\n    if (state === undefined) {\r\n        state = store.getState();\r\n    }\r\n\r\n    const random = seedrandom();\r\n    return new MelinaAlgorithm(extractGameStatus(state), random);\r\n}\r\n\r\nfunction extractGameStatus(state: RootState): GameStatus {\r\n    const currentStatus: GameStatus = {\r\n        decks: state.settings.sources\r\n            .filter(x => x.cards !== undefined)\r\n            .map(item => {\r\n                const result: CardDeck = { ...item, cards: item.cards || [] };\r\n                return result;\r\n            }),\r\n        cardsHistory: state.game.cardsHistory,\r\n        language: state.localize.languages.find(x => x.active)!.code,\r\n        players: state.settings.players,\r\n        slides: state.settings.slides,\r\n        tags: state.settings.tags,\r\n        arrangements: state.settings.arrangements,\r\n        preferOppositeGenders: state.settings.preferOppositeGenders,\r\n        slidesHistory: state.game.slidesHistory,\r\n        startTime: state.game.startTime!,\r\n        willPower: state.game.currentWillPower,\r\n    };\r\n\r\n    return currentStatus;\r\n}\r\n","import { MelinaAlgorithm } from \"@core/selection/melina-algorithm\";\r\nimport {\r\n    createStyles,\r\n    Typography,\r\n    withStyles,\r\n    WithStyles,\r\n    FormControl,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport { percentageFixedTotal } from \"@utils/statistics\";\r\nimport { toFixedEnd } from \"@utils/string-extensions\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React, { Component } from \"react\";\r\nimport { LocalizeContextProps, Translate, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Cell,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from \"recharts\";\r\nimport { compose } from \"redux\";\r\nimport { getRandomSelectionAlgorithm } from \"../game-engine\";\r\nimport { parsers } from \"../../../impl/registrations\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    currentWillPower: state.game.currentWillPower,\r\n});\r\n\r\nconst styles = createStyles({\r\n    chart: {\r\n        width: 200,\r\n        height: 300,\r\n    },\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & WithStyles<typeof styles> & LocalizeContextProps;\r\ntype State = { selectedCardType: string | null };\r\n\r\nclass InsightsCards extends Component<Props, State> {\r\n    readonly state = { selectedCardType: null };\r\n\r\n    setSelectedCardType = (type: string) => {\r\n        this.setState({ selectedCardType: type === \"\" ? null : type });\r\n    };\r\n\r\n    render() {\r\n        const { translate, currentWillPower } = this.props;\r\n        const { selectedCardType } = this.state;\r\n\r\n        const cardTypes = [\"\", ...Object.keys(parsers)];\r\n\r\n        const selection = getRandomSelectionAlgorithm() as MelinaAlgorithm;\r\n        const insights = selection.getAllCardDeckStatistics(selectedCardType);\r\n\r\n        const decksStatistics = percentageFixedTotal(insights.decks, x => x.weight, 1000).map(\r\n            x => ({\r\n                value: x.part / 10,\r\n                name: x.value.value.url,\r\n            }),\r\n        );\r\n\r\n        const willPowerStatistics = percentageFixedTotal(\r\n            insights.willPower,\r\n            x => x.weight,\r\n            1000,\r\n        ).map(x => ({\r\n            value: x.part / 10,\r\n            name: x.value.value.willPower || translate(\"insights.universal\"),\r\n            info: x.value.value,\r\n        }));\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.cardsDist\" />\r\n                </Typography>\r\n                <Grid container alignItems=\"flex-end\" spacing={16}>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select\r\n                                style={{ width: 200, marginTop: 10 }}\r\n                                value={selectedCardType || \"\"}\r\n                                displayEmpty={true}\r\n                                renderValue={x => x || translate(\"insights.allCards\")}\r\n                                onChange={ev => this.setSelectedCardType(ev.target.value)}\r\n                                input={<Input />}\r\n                            >\r\n                                {cardTypes.map(x => (\r\n                                    <MenuItem key={x} value={x}>\r\n                                        {x || translate(\"insights.allCards\")}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography>{`${translate(\"insights.cards\")}: ${insights.totalCards}`}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <BarChart data={decksStatistics}>\r\n                        <CartesianGrid />\r\n                        <XAxis dataKey=\"name\" tickFormatter={x => toFixedEnd(x, 18)} />\r\n                        <YAxis tickFormatter={x => x + \"%\"} />\r\n                        <Tooltip\r\n                            formatter={x => x + \"%\"}\r\n                            labelFormatter={url =>\r\n                                translate(\"insights.cardDeckName\", {\r\n                                    url,\r\n                                    cards: insights.decks.find(x => x.value.url === url)!.value\r\n                                        .cards.length,\r\n                                })\r\n                            }\r\n                        />\r\n                        <Bar\r\n                            name={translate(\"insights.part\") as string}\r\n                            dataKey=\"value\"\r\n                            fill=\"#8884d8\"\r\n                            maxBarSize={20}\r\n                        />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n                <Typography variant=\"h5\">\r\n                    <Translate id=\"insights.willPowerDist\" />\r\n                </Typography>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <BarChart data={willPowerStatistics}>\r\n                        <CartesianGrid />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis tickFormatter={x => x + \"%\"} />\r\n                        <Tooltip\r\n                            formatter={(x, _, e) =>\r\n                                `${x}% (${e.payload.info.count} ${translate(\"insights.cards\")})`\r\n                            }\r\n                        />\r\n                        <Bar\r\n                            dataKey=\"value\"\r\n                            maxBarSize={20}\r\n                            name={translate(\"insights.part\") as string}\r\n                        >\r\n                            {willPowerStatistics.map((entry, index) => (\r\n                                <Cell\r\n                                    fill={\r\n                                        entry.info.willPower === currentWillPower\r\n                                            ? \"#e74c3c\"\r\n                                            : \"#8884d8\"\r\n                                    }\r\n                                    key={index}\r\n                                />\r\n                            ))}\r\n                        </Bar>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withStyles(styles),\r\n    withLocalize,\r\n)(InsightsCards) as React.ComponentType;\r\n","export function toFixedEnd(s: string, length: number) {\r\n    if (length > s.length) {\r\n        return s;\r\n    }\r\n\r\n    return \"..\" + s.substring(s.length - length - 2, s.length);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport InsightsCurrentSlide from \"./InsightsCurrentSlide\";\r\nimport InsightsWillPowerView from \"./InsightsWillPowerView\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport InsightsCards from \"./InsightsCards\";\r\n\r\nexport default class InsightsView extends Component {\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <InsightsWillPowerView />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 10}}>\r\n                    <InsightsCurrentSlide />\r\n                </Grid>\r\n                <Grid item xs={12} style={{marginTop: 20}}>\r\n                    <InsightsCards />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport withMobileDialog, { InjectedProps } from \"@material-ui/core/withMobileDialog\";\r\nimport {\r\n    AppBar,\r\n    Slide,\r\n    createStyles,\r\n    WithStyles,\r\n    withStyles,\r\n    Toolbar,\r\n    Button,\r\n    Typography,\r\n    Theme,\r\n} from \"@material-ui/core\";\r\nimport { withLocalize, LocalizeContextProps, Translate } from \"react-localize-redux\";\r\nimport { withRouter, RouterProps } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { WithWidth } from \"@material-ui/core/withWidth\";\r\nimport InsightsView from \"./InsightsView\";\r\n\r\nfunction Transition(props: any) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: \"relative\",\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        margin: theme.spacing.unit,\r\n        overflowY: \"auto\",\r\n        overflowX: \"hidden\",\r\n    },\r\n});\r\n\r\ninterface Props\r\n    extends InjectedProps,\r\n        Partial<WithWidth>,\r\n        WithStyles<typeof styles>,\r\n        LocalizeContextProps,\r\n        RouterProps {}\r\n\r\nfunction InsightsDialog({ fullScreen, classes, history }: Props) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={true}\r\n                onClose={() => history.push(\"/game\")}\r\n                TransitionComponent={Transition}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                            <Translate id=\"game.options.insights\" />\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => history.push(\"/game\")}>\r\n                            <Translate id=\"game.close\" />\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.content}>\r\n                    <InsightsView />\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withMobileDialog({ breakpoint: \"sm\" }),\r\n    withStyles(styles),\r\n    withLocalize,\r\n    withRouter,\r\n)(InsightsDialog) as React.ComponentType;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { LocalizeContextProps, withLocalize } from \"react-localize-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { slideComponents } from \"../component-registry\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    selectedSlide: state.game.selectedSlide,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & LocalizeContextProps;\r\n\r\nfunction SlideWrapper(props: Props) {\r\n    const { selectedSlide } = props;\r\n\r\n    if (selectedSlide === null) {\r\n        return <Typography variant=\"h3\">Loading game...</Typography>;\r\n    }\r\n\r\n    const factory = slideComponents[selectedSlide];\r\n    const slideInitalizer = new factory(toTranslator(props));\r\n    const springProps = useSpring({backgroundColor: slideInitalizer.backgroundColor, height: \"100%\"});\r\n\r\n    return <animated.div style={springProps}>{slideInitalizer.render()}</animated.div>;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withLocalize,\r\n)(SlideWrapper) as React.ComponentType;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport GameOptions from \"./GameOptions\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport SettingsDialog from \"./SettingsDialog\";\r\nimport InsightsDialog from \"./InsightsDialog\";\r\nimport SlideWrapper from \"./SlideWrapper\";\r\nimport { requestSlideAsync } from \"../actions\";\r\nimport { withLocalize, LocalizeContextProps } from \"react-localize-redux\";\r\nimport { toTranslator } from \"../utils\";\r\nimport { RootState } from \"DrinctetTypes\";\r\n\r\nconst dispatchProps = {\r\n    requestSlide: requestSlideAsync.request,\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    current: state.game.currentSlideStatus,\r\n});\r\n\r\ntype Props = typeof dispatchProps & LocalizeContextProps & ReturnType<typeof mapStateToProps>;\r\n\r\nclass GameComponent extends Component<Props> {\r\n    public componentDidMount() {\r\n        this.props.requestSlide(toTranslator(this.props));\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\", position: \"relative\", overflow: \"hidden\" }}>\r\n                <SlideWrapper />\r\n                <div style={{ top: 10, right: 10, position: \"absolute\" }}>\r\n                    <GameOptions />\r\n                </div>\r\n                <Switch>\r\n                    <Route path=\"/game/settings\" component={SettingsDialog} />\r\n                    <Route path=\"/game/insights\" component={InsightsDialog} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(\r\n        mapStateToProps,\r\n        dispatchProps,\r\n    ),\r\n    withLocalize,\r\n)(GameComponent) as React.ComponentType;\r\n","import { RootState } from \"DrinctetTypes\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\r\nimport WelcomeView from \"./features/welcome/components/WelcomeView\";\r\nimport GameComponent from \"./features/game/components/GameComponent\";\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    isStarted: state.game.isStarted,\r\n});\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction App({ isStarted }: Props) {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={WelcomeView} />\r\n                <Route\r\n                    path=\"/game\"\r\n                    render={() => (!isStarted ? <Redirect to=\"/\" /> : (<GameComponent />))}\r\n                />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"tslib\";\r\nimport \"typeface-roboto\";\r\nimport App from \"./App\";\r\nimport \"./env\";\r\nimport { addPlayer, addSource, loadSourceAsync } from \"./features/settings/actions\";\r\nimport \"./index.css\";\r\nimport store from \"./store\";\r\nimport { initialize, LocalizeProvider, NamedLanguage } from \"react-localize-redux\";\r\nimport drinctetTranslations from \"./loc/drinctet.json\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { defaultSources } from \"./preferences\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nfor (const src of defaultSources) {\r\n    store.dispatch(addSource(src));\r\n    store.dispatch(loadSourceAsync.request(src));\r\n}\r\n\r\nif (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n    store.dispatch(addPlayer({ name: \"Vincent\", gender: \"Male\" }));\r\n    store.dispatch(addPlayer({ name: \"Melina\", gender: \"Female\" }));\r\n    store.dispatch(addPlayer({ name: \"Bursod\", gender: \"Male\" }));\r\n    store.dispatch(addPlayer({ name: \"Larny\", gender: \"Female\" }));\r\n    store.dispatch(addPlayer({ name: \"Sven\", gender: \"Male\" }));\r\n    store.dispatch(addPlayer({ name: \"Hufeld\", gender: \"Male\" }));\r\n}\r\n\r\nvar userLang = (navigator.language || ((navigator as any).userLanguage as string) || \"en\").split(\r\n    \"-\",\r\n)[0];\r\n\r\nconst languages: NamedLanguage[] = [\r\n    { code: \"en\", name: \"English\" },\r\n    { code: \"de\", name: \"Deutsch\" },\r\n];\r\nstore.dispatch(\r\n    initialize({\r\n        languages,\r\n        translation: drinctetTranslations,\r\n        options: { renderToStaticMarkup, defaultLanguage: userLang },\r\n    }),\r\n);\r\n\r\nconst Root = () => (\r\n    <div style={{ height: \"100%\" }}>\r\n        <Provider store={store}>\r\n            <LocalizeProvider store={store}>\r\n                <App />\r\n            </LocalizeProvider>\r\n        </Provider>\r\n    </div>\r\n);\r\n\r\nrender(<Root />, document.getElementById(\"root\"));\r\n\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}